{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/elementui-笔记/headerRowStyle.PNG","path":"img/elementui-笔记/headerRowStyle.PNG","modified":0,"renderable":0},{"_id":"source/img/elementui-笔记/objectSpanMethod.PNG","path":"img/elementui-笔记/objectSpanMethod.PNG","modified":0,"renderable":0},{"_id":"source/img/java多线程/pic1.PNG","path":"img/java多线程/pic1.PNG","modified":0,"renderable":0},{"_id":"source/img/java多线程/pic2.PNG","path":"img/java多线程/pic2.PNG","modified":0,"renderable":0},{"_id":"source/img/java多线程/pic3.PNG","path":"img/java多线程/pic3.PNG","modified":0,"renderable":0},{"_id":"source/img/java多线程/pic4.PNG","path":"img/java多线程/pic4.PNG","modified":0,"renderable":0},{"_id":"source/img/java多线程/pic5.png","path":"img/java多线程/pic5.png","modified":0,"renderable":0},{"_id":"source/img/java多线程/pic6.png","path":"img/java多线程/pic6.png","modified":0,"renderable":0},{"_id":"source/img/java框架/动态代理.PNG","path":"img/java框架/动态代理.PNG","modified":0,"renderable":0},{"_id":"source/img/java集合/java集合图1.PNG","path":"img/java集合/java集合图1.PNG","modified":0,"renderable":0},{"_id":"source/img/java集合/java集合图2.PNG","path":"img/java集合/java集合图2.PNG","modified":0,"renderable":0},{"_id":"source/img/java集合/java集合图3.PNG","path":"img/java集合/java集合图3.PNG","modified":0,"renderable":0},{"_id":"source/img/java集合/java集合图4.PNG","path":"img/java集合/java集合图4.PNG","modified":0,"renderable":0},{"_id":"source/img/java集合/java集合图5.PNG","path":"img/java集合/java集合图5.PNG","modified":0,"renderable":0},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg1.jpg","path":"img/bg1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg2.jpg","path":"img/bg2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg3.jpg","path":"img/bg3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg4.jpg","path":"img/bg4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg6.jpg","path":"img/bg6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg7.jpg","path":"img/bg7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg8.jpg","path":"img/bg8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg9.jpg","path":"img/bg9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/logo.PNG","path":"img/logo.PNG","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/logo2.PNG","path":"img/logo2.PNG","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-1.9.0/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/bg/headerRowStyle.PNG","path":"img/bg/headerRowStyle.PNG","modified":0,"renderable":0},{"_id":"source/img/web/图片28.png","path":"img/web/图片28.png","modified":0,"renderable":0},{"_id":"source/img/web/20210325210742187.png","path":"img/web/20210325210742187.png","modified":0,"renderable":0},{"_id":"source/img/web/图片30.png","path":"img/web/图片30.png","modified":0,"renderable":0},{"_id":"source/img/web/图片29.png","path":"img/web/图片29.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg10.png","path":"img/bg10.png","modified":0,"renderable":1},{"_id":"source/img/随笔/xml图片问题.PNG","path":"img/随笔/xml图片问题.PNG","modified":0,"renderable":0},{"_id":"source/img/随笔/xml图片问题2.PNG","path":"img/随笔/xml图片问题2.PNG","modified":0,"renderable":0},{"_id":"source/img/随笔/图片显示失败.PNG","path":"img/随笔/图片显示失败.PNG","modified":0,"renderable":0},{"_id":"source/img/享疗共享医生系统/模块结构.png","path":"img/享疗共享医生系统/模块结构.png","modified":0,"renderable":0},{"_id":"source/img/享疗共享医生系统/流程图.png","path":"img/享疗共享医生系统/流程图.png","modified":0,"renderable":0},{"_id":"source/img/享疗共享医生系统/数据库设计.PNG","path":"img/享疗共享医生系统/数据库设计.PNG","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/JAVA集合-0.md","hash":"24f668b83650ba4338086d3f687d9ace4270b38e","modified":1653900591148},{"_id":"source/_posts/Mybatis笔记-1.md","hash":"1a2f176ed4529f809b4bddedf84b74b08bfab862","modified":1653288555954},{"_id":"source/_posts/Web.md","hash":"df84ad341579d508e29ea30677b52fe0054d7bd0","modified":1653901419435},{"_id":"source/_posts/WhiteJotter.md","hash":"61dc8f76e5747180f9ce1e3a6f5e948f1c6f697a","modified":1653288568776},{"_id":"source/_posts/Java多线程.md","hash":"637d24805259ba5eff287c547beb13d1864a84ba","modified":1654650753669},{"_id":"source/_posts/elementUI修改表头指定列.md","hash":"1ba15ab1a55021a679ff5b1f23c2acb7e150a778","modified":1653900806953},{"_id":"source/_posts/elementUI合并相同数据列.md","hash":"4ef6397658def4ebf5c97af856ec105a84f39ed5","modified":1653900808061},{"_id":"source/_posts/meta-标签name-viewport详解.md","hash":"63dd995daa1d8686bd4e4ce41a18dbd5d20d0d72","modified":1653288546706},{"_id":"source/_posts/动态代理.md","hash":"3feb4d0023537c28d8d7b5cf1abbee6545621291","modified":1653900778173},{"_id":"source/_posts/页面打印表格换页问题.md","hash":"4025acf1920cbd52180e5cbe498364b0e3fe2f4f","modified":1653288613113},{"_id":"source/about/index.md","hash":"ee90815db948c3a72eff34569d6ba8105d58c893","modified":1647511261422},{"_id":"source/img/elementui-笔记/headerRowStyle.PNG","hash":"f9e3f7b31b71cc09042884d5df7816504ce98bfc","modified":1652348642842},{"_id":"source/img/elementui-笔记/objectSpanMethod.PNG","hash":"d38f534a9f0be063786be43b3af0e09dc45627c9","modified":1652433867165},{"_id":"source/img/java多线程/pic5.png","hash":"f630bba556d7871210bdf5a1fcb47b306fbf0842","modified":1647502195379},{"_id":"source/img/java集合/java集合图2.PNG","hash":"695540e525719496abd3fdc2dd9403c6072c0f90","modified":1647322079886},{"_id":"source/img/java集合/java集合图3.PNG","hash":"925662f630e4201414a1679f36c353807287c674","modified":1647323098852},{"_id":"source/img/java多线程/pic1.PNG","hash":"86eb9cbac37bd9a47bde6219fe397d740618553e","modified":1647403420126},{"_id":"source/img/java多线程/pic3.PNG","hash":"212a9c8f54b9749e0a6ebc84bf0f0b0c40b8cc53","modified":1647410915546},{"_id":"source/img/java框架/动态代理.PNG","hash":"cad3be02e48a40be1c6c7142fa5ede4db6c21e54","modified":1647397803890},{"_id":"source/img/java集合/java集合图5.PNG","hash":"fcc4dbed54569399b45e92a404b402df28dc8590","modified":1647323139388},{"_id":"source/img/java多线程/pic4.PNG","hash":"9e5150d407748c97da329e13c68b8481fb3e4886","modified":1647411034023},{"_id":"source/img/java集合/java集合图1.PNG","hash":"913df80bd37b82b88910d92c3c73428c8cf4e1c4","modified":1647250397448},{"_id":"source/img/java集合/java集合图4.PNG","hash":"da3d106f824c6980bf39614643fbe432b461d39c","modified":1647323118697},{"_id":"source/img/java多线程/pic2.PNG","hash":"eddf15b47f2d35aead58ab635797bf100f1e0fc1","modified":1647410876264},{"_id":"source/img/java多线程/pic6.png","hash":"738be31f03f90ddc9e7d2522dafa95216acc94cb","modified":1647502372085},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/_config.yml","hash":"bcca92e394ee0ac6ee0fe802f72826a5aab2f694","modified":1669974759030},{"_id":"themes/hexo-theme-fluid-1.9.0/package.json","hash":"980a730164d9f145a3271ed64d7122b7cee6d590","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/about.ejs","hash":"23e5db06cfdc1cb26503204f074db58647adfbf3","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/index.ejs","hash":"952d3f27cd7a245848fa1c4a1f5c8912500c2ee1","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/layout.ejs","hash":"1452acee33611685b199c50e1bd4ecddbf6424e3","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/links.ejs","hash":"edcbef65037759c3a7b3539f2edcd72b082267e9","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/page.ejs","hash":"a4a6b184bd91d9fe090da28891e74afc3b71c7fd","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/post.ejs","hash":"3a812de943457c0c544832daa1957420883aca96","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/head.ejs","hash":"eb2c46aa2508ea65d6e5c397c4bc20d05761d754","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/header.ejs","hash":"536eedc03faae3b35dc69abd478634d453061a0a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/scripts.ejs","hash":"3d8912b68fcf51c38f6e1c5dd2bd74657bb3b7fb","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1640938356000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg1.jpg","hash":"c30bb3e2cecadff2a866d889048b29f8ced9b54c","modified":1647496561437},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg6.jpg","hash":"f3b9939d9487af03534ee851a912b30c36aec410","modified":1647575925664},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1640938356000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640938356000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1640938356000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/logo2.PNG","hash":"b71d9b7f948dfe188268765a2f20cb4464b2602e","modified":1647507040957},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1640938356000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/boot.js","hash":"6b7319b36ca2e2d3afe336623ef438994f3d26de","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/color-schema.js","hash":"781e5c82556f279f99c97ffd13f359bd1a445145","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/leancloud.js","hash":"ed23208de670d7a5900f2669cc715e2479885958","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/plugins.js","hash":"b4ca98f68bf09a74678932e4ac73ac56a7c01e03","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/js/utils.js","hash":"d49d462f8547de07ca49e1ea195dff864b08706b","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/header/banner.ejs","hash":"57358e2164284f33f3bc81d5f602c620aeab942f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/analytics.ejs","hash":"ef56f0903762a7a2c853417dfa6b0463440295e0","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/code-widget.ejs","hash":"129a8b19ab26efd02ff1806ff4012376d2cd3497","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/math.ejs","hash":"c80bdc171aa53eb7205dcdc77764cec87a1dafd6","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/post/copyright.ejs","hash":"359cbcb0e222c23c8a0c5a99034a8a51f667a9ce","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/lib/footnote.js","hash":"54933c294d9b469a76a5ed36328e778ed740158f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/lib/highlight.js","hash":"cb78296da15c7a8a6957cff2129294cc4815513b","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_variables/base.styl","hash":"2465f604eea63b14cd2b0cc142769d963a0193a0","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_index/index.styl","hash":"5f4a17a20ddbf18c8ea6c66638b764905e4386b3","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_post/highlight.styl","hash":"e24cd1186aae10bf897eed9cfd5278247b6300eb","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_post/markdown.styl","hash":"e6e48d6ba2951ce4abc2876600f85eef64095338","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_post/post-page.styl","hash":"078e5496a1852952ce4ee49016e86b9f70d31908","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/pagination.styl","hash":"696e429284bda7ae0fffe62ca84cb01a9243ecf0","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1652845059000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg4.jpg","hash":"582ff8d80034dd8085410be7b7c003a842ae0ac1","modified":1647496478414},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg9.jpg","hash":"d4a85dac030880ad21746ba842f5ee248dfa4d53","modified":1652407690966},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/logo.PNG","hash":"c73af3de5ca77522453c88bcc7aa412d23bee8b2","modified":1647507862000},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg2.jpg","hash":"cf71d56486743e7703f93cfab2e6e0635eeaf834","modified":1647332209529},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg5.jpg","hash":"1ae2f5fd0bf86ea7bdeb4f746f30ffcb7772dbbb","modified":1647490014309},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/wechat.jpg","hash":"4c39c170a41b974a52c6512f75e23706ee3cb512","modified":1647567507747},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg8.jpg","hash":"7f2902ff53bb7bbc94f38ce456d73c4c49dc9b77","modified":1649207730541},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg3.jpg","hash":"bd65c0c83db60fbd45ecf0010347a528a6425623","modified":1647480987329},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg7.jpg","hash":"5adba993410cffb7d2222b5b2a81b0dfb6564ffa","modified":1649207707628},{"_id":"public/sitemap.xml","hash":"f36863fd1bce9312e81e78c8d3fee27b97b35dbc","modified":1682414232245},{"_id":"public/local-search.xml","hash":"2540d099e618b81712b78b50e6e2f8f0a314004b","modified":1682414232245},{"_id":"public/about/index.html","hash":"702bb9425019b68c260b8a68c44a2941bb1b69f0","modified":1669974814597},{"_id":"public/archives/index.html","hash":"376aba8aeb9c1e3bc4840057136110c1c0239794","modified":1682414232245},{"_id":"public/archives/2022/index.html","hash":"9dfecc6e80bf7f089ddf46b932f3feff7b3701c6","modified":1682414232245},{"_id":"public/archives/2022/03/index.html","hash":"baa63d22a14e8ee13c04e77a148c45388206de98","modified":1682414232245},{"_id":"public/archives/2022/04/index.html","hash":"0ae685ae99f2bbe95603a4fb83b0831dea594ddb","modified":1682414232245},{"_id":"public/archives/2022/05/index.html","hash":"5305fa388ce60b9974f005250cca6a33f0927a31","modified":1682414232245},{"_id":"public/categories/Java基础/index.html","hash":"e766ce703c534e60404687ca95db620fb921cd5d","modified":1669974814597},{"_id":"public/categories/笔记/index.html","hash":"21718c098f64a6bb13610129472b16b974a2fdec","modified":1682414232245},{"_id":"public/categories/JAVA框架/index.html","hash":"22180236faca6ca4f99c68333e81f8b94c91a755","modified":1669974814597},{"_id":"public/categories/Web/index.html","hash":"fc8137f653f7604ae4799ad2b5c531b410b791dc","modified":1669974814597},{"_id":"public/tags/Java/index.html","hash":"940ac706e1f44f2a1ab90b10697f35c3f75b2c63","modified":1669974814597},{"_id":"public/tags/集合/index.html","hash":"259d5b77271ca891cebcc7ebbb8886a69905c434","modified":1669974814597},{"_id":"public/tags/vue/index.html","hash":"183175db1df327c69fcb9ac5db2c140a736673c1","modified":1669974814597},{"_id":"public/tags/springboot/index.html","hash":"30e64d6f94be4ece6db6014860c4e72282ebce1b","modified":1669974814597},{"_id":"public/tags/Java框架/index.html","hash":"6c426605ad499978817ef771d221fa93536f15b8","modified":1669974814597},{"_id":"public/tags/mybatis/index.html","hash":"f44c18877af66f0a3337b804bdcbdbab5b4baaea","modified":1669974814597},{"_id":"public/tags/Web/index.html","hash":"b682204de9f935bb999c3da13e3da921bff7283f","modified":1669974814597},{"_id":"public/tags/elementUI/index.html","hash":"5190d80ef8d1f8fd2ebac6ba8ac8eacc0f164303","modified":1669974814597},{"_id":"public/tags/多线程/index.html","hash":"ce6d412d5668e5096534ac7af13ac510bf2221da","modified":1669974814597},{"_id":"public/tags/动态代理/index.html","hash":"2da104a6647f85dd2fc064c58ad91e2ae6907ff0","modified":1669974814597},{"_id":"public/404.html","hash":"13d37af8948da4c1773663df6b664d7020e3b0cb","modified":1669974814597},{"_id":"public/tags/index.html","hash":"57c6207b6823c33454172fc0db80ac46d977cf57","modified":1669974814597},{"_id":"public/links/index.html","hash":"ec89c2faf9429a0da8be8df05b92f8f8b98cf682","modified":1669974814597},{"_id":"public/2022/05/18/页面打印表格换页问题/index.html","hash":"0b3879028f13cd2619beee71c00c32784ccb7d8d","modified":1669974814597},{"_id":"public/2022/05/13/elementUI合并相同数据列/index.html","hash":"6676d65b157261d96b6f79fd3390f082762f665f","modified":1669974814597},{"_id":"public/2022/05/13/elementUI修改表头指定列/index.html","hash":"0b026f0736195ce4da88dc7e1eedd73505f68dfc","modified":1669974814597},{"_id":"public/2022/04/02/meta-标签name-viewport详解/index.html","hash":"9c02127e4be18daeb43e01cfa3f9254eae65c7fe","modified":1669974814597},{"_id":"public/2022/03/25/WhiteJotter/index.html","hash":"43e0a9636b96490f4821ca349a8a751e9e28a69c","modified":1669974814597},{"_id":"public/2022/03/21/Mybatis笔记-1/index.html","hash":"fe9e6a6ec6c2639e4a969d3933202e8e250c7a88","modified":1669974814597},{"_id":"public/2022/03/16/Java多线程/index.html","hash":"aeb03e95e21f32d5d91ec3d18dfc5effad17ad99","modified":1669974814597},{"_id":"public/2022/03/16/动态代理/index.html","hash":"902012a8e72fea5a5b35a4c552623adc1a688c30","modified":1669974814597},{"_id":"public/2022/03/15/JAVA集合-0/index.html","hash":"d1a31336fbebfedc61d5f1afc94332e83137d9a2","modified":1669974814597},{"_id":"public/2022/03/15/Web/index.html","hash":"c6ce0e0508c7c2cb6832e3850173ae0fbdee565e","modified":1669974814597},{"_id":"public/index.html","hash":"ebec0dfcb6ffbb1ab75322e3bcf7e182a5069313","modified":1682414232245},{"_id":"public/categories/index.html","hash":"335e03bd9dcaf02b7c3427c9a20384838ebeee7b","modified":1682414232245},{"_id":"public/img/elementui-笔记/objectSpanMethod.PNG","hash":"d38f534a9f0be063786be43b3af0e09dc45627c9","modified":1653441405985},{"_id":"public/img/elementui-笔记/headerRowStyle.PNG","hash":"f9e3f7b31b71cc09042884d5df7816504ce98bfc","modified":1653441405985},{"_id":"public/img/java多线程/pic5.png","hash":"f630bba556d7871210bdf5a1fcb47b306fbf0842","modified":1653441405985},{"_id":"public/img/java集合/java集合图2.PNG","hash":"695540e525719496abd3fdc2dd9403c6072c0f90","modified":1653441405985},{"_id":"public/img/java集合/java集合图3.PNG","hash":"925662f630e4201414a1679f36c353807287c674","modified":1653441405985},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1653441405985},{"_id":"public/img/bg1.jpg","hash":"c30bb3e2cecadff2a866d889048b29f8ced9b54c","modified":1653441405985},{"_id":"public/img/bg6.jpg","hash":"f3b9939d9487af03534ee851a912b30c36aec410","modified":1653441405985},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1653441405985},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1653441405985},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1653441405985},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1653441405985},{"_id":"public/img/logo2.PNG","hash":"b71d9b7f948dfe188268765a2f20cb4464b2602e","modified":1653441405985},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1653441405985},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1653441405985},{"_id":"public/img/java多线程/pic1.PNG","hash":"86eb9cbac37bd9a47bde6219fe397d740618553e","modified":1653441405985},{"_id":"public/img/java多线程/pic3.PNG","hash":"212a9c8f54b9749e0a6ebc84bf0f0b0c40b8cc53","modified":1653441405985},{"_id":"public/img/java框架/动态代理.PNG","hash":"cad3be02e48a40be1c6c7142fa5ede4db6c21e54","modified":1653441405985},{"_id":"public/img/java集合/java集合图5.PNG","hash":"fcc4dbed54569399b45e92a404b402df28dc8590","modified":1653441405985},{"_id":"public/img/bg4.jpg","hash":"582ff8d80034dd8085410be7b7c003a842ae0ac1","modified":1653441405985},{"_id":"public/img/bg9.jpg","hash":"d4a85dac030880ad21746ba842f5ee248dfa4d53","modified":1653441405985},{"_id":"public/img/logo.PNG","hash":"c73af3de5ca77522453c88bcc7aa412d23bee8b2","modified":1653441405985},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1653441405985},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1653441405985},{"_id":"public/js/boot.js","hash":"6b7319b36ca2e2d3afe336623ef438994f3d26de","modified":1653441405985},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1653441405985},{"_id":"public/js/color-schema.js","hash":"781e5c82556f279f99c97ffd13f359bd1a445145","modified":1653441405985},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1653441405985},{"_id":"public/js/leancloud.js","hash":"ed23208de670d7a5900f2669cc715e2479885958","modified":1653441405985},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1653441405985},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1653441405985},{"_id":"public/js/plugins.js","hash":"b4ca98f68bf09a74678932e4ac73ac56a7c01e03","modified":1653441405985},{"_id":"public/js/utils.js","hash":"d49d462f8547de07ca49e1ea195dff864b08706b","modified":1653441405985},{"_id":"public/css/main.css","hash":"59a886c9cb7552396d971f6ac8847ddf8905a2fb","modified":1653441405985},{"_id":"public/img/java多线程/pic4.PNG","hash":"9e5150d407748c97da329e13c68b8481fb3e4886","modified":1653441405985},{"_id":"public/img/java集合/java集合图1.PNG","hash":"913df80bd37b82b88910d92c3c73428c8cf4e1c4","modified":1653441405985},{"_id":"public/img/java集合/java集合图4.PNG","hash":"da3d106f824c6980bf39614643fbe432b461d39c","modified":1653441405985},{"_id":"public/img/bg2.jpg","hash":"cf71d56486743e7703f93cfab2e6e0635eeaf834","modified":1653441405985},{"_id":"public/img/bg5.jpg","hash":"1ae2f5fd0bf86ea7bdeb4f746f30ffcb7772dbbb","modified":1653441405985},{"_id":"public/img/wechat.jpg","hash":"4c39c170a41b974a52c6512f75e23706ee3cb512","modified":1653441405985},{"_id":"public/img/java多线程/pic2.PNG","hash":"eddf15b47f2d35aead58ab635797bf100f1e0fc1","modified":1653441405985},{"_id":"public/img/java多线程/pic6.png","hash":"738be31f03f90ddc9e7d2522dafa95216acc94cb","modified":1653441405985},{"_id":"public/img/bg8.jpg","hash":"7f2902ff53bb7bbc94f38ce456d73c4c49dc9b77","modified":1653441405985},{"_id":"public/img/bg3.jpg","hash":"bd65c0c83db60fbd45ecf0010347a528a6425623","modified":1653441405985},{"_id":"public/img/bg7.jpg","hash":"5adba993410cffb7d2222b5b2a81b0dfb6564ffa","modified":1653441405985},{"_id":"source/_posts/test.md","hash":"3ab0cd91f2a6b2e00223dff2e6378796bbdff50b","modified":1653900348307},{"_id":"source/_posts/test/test.jpg","hash":"3d4dfe78bdb5423988ab4d4a25aeb1d4e6b630c4","modified":1650545771572},{"_id":"source/img/bg/headerRowStyle.PNG","hash":"f9e3f7b31b71cc09042884d5df7816504ce98bfc","modified":1652348642842},{"_id":"source/img/web/图片29.png","hash":"686f5f929b77756331b6c6ac1fed8892ad7a42a2","modified":1638856057756},{"_id":"source/img/web/图片30.png","hash":"2bd33c9acdebd5fb65513798cea1f9c31720baff","modified":1638856370278},{"_id":"source/img/web/图片28.png","hash":"17b3427785f9645b7487c59a8e0959d325a8055a","modified":1638855733926},{"_id":"source/img/web/20210325210742187.png","hash":"b8f8810c3cb5d745b8d6d2af44d1a3cc35f90b91","modified":1638857510997},{"_id":"public/img/web/图片29.png","hash":"686f5f929b77756331b6c6ac1fed8892ad7a42a2","modified":1654650404549},{"_id":"public/img/web/图片30.png","hash":"2bd33c9acdebd5fb65513798cea1f9c31720baff","modified":1654650404549},{"_id":"public/img/web/图片28.png","hash":"17b3427785f9645b7487c59a8e0959d325a8055a","modified":1654650404549},{"_id":"public/img/web/20210325210742187.png","hash":"b8f8810c3cb5d745b8d6d2af44d1a3cc35f90b91","modified":1654650404549},{"_id":"public/img/bg/headerRowStyle.PNG","hash":"f9e3f7b31b71cc09042884d5df7816504ce98bfc","modified":1654650404549},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/bg10.png","hash":"8a6762ab26dc17d371fdcf94c1341cbb6efa22c7","modified":1653958493820},{"_id":"public/img/bg10.png","hash":"8a6762ab26dc17d371fdcf94c1341cbb6efa22c7","modified":1654652721110},{"_id":"source/_posts/qs序列化.md","hash":"20a060748a35102302f5ae2c1576f28b2e933af3","modified":1655458413315},{"_id":"source/_posts/sql数据库上传到服务器.md","hash":"60de1de4b91eba77b0e604105823e3faaf55594f","modified":1655970393118},{"_id":"public/2022/06/13/qs序列化/index.html","hash":"970eb1b7070b01588f9926910d7ba78cd55c0626","modified":1669974814597},{"_id":"public/archives/page/2/index.html","hash":"d21586c16db9eb0cfda5ea7384a40141e58c57d1","modified":1682414232245},{"_id":"public/archives/2022/page/2/index.html","hash":"e9f683add821d8590d431319a8e7cfab84e6b501","modified":1682414232245},{"_id":"public/archives/2022/06/index.html","hash":"95e74a2ca801bbae94cd68d5a043fbe354dce916","modified":1682414232245},{"_id":"public/page/2/index.html","hash":"2e558b0866606d3afc03f05c695654a4ac733446","modified":1682414232245},{"_id":"public/2022/06/16/sql数据库上传到服务器/index.html","hash":"b86514d0e146b94431b2064af8ef3c7e6e05e8ed","modified":1669974814597},{"_id":"source/_posts/xml导出word图片不显示问题.md","hash":"719557bbfa685d3642e4a4f2f7779da38bdab188","modified":1655970199957},{"_id":"source/img/随笔/xml图片问题.PNG","hash":"68dd8e218e91dad06da1096379f6f3b71ad776ee","modified":1655970072382},{"_id":"source/img/随笔/xml图片问题2.PNG","hash":"ea2c8fbb6f5051c2dfe95c004132c1c7c2a5ca5b","modified":1655970094845},{"_id":"source/img/随笔/图片显示失败.PNG","hash":"526a633ef32c5d81f64a129522bc84afad9fa539","modified":1655969370769},{"_id":"public/2022/06/23/xml导出word图片不显示问题/index.html","hash":"f1e2cd5de9461d0c58ae34478ad1654df80efa9d","modified":1669974814597},{"_id":"public/img/随笔/xml图片问题.PNG","hash":"68dd8e218e91dad06da1096379f6f3b71ad776ee","modified":1655970447344},{"_id":"public/img/随笔/图片显示失败.PNG","hash":"526a633ef32c5d81f64a129522bc84afad9fa539","modified":1655970447344},{"_id":"public/img/随笔/xml图片问题2.PNG","hash":"ea2c8fbb6f5051c2dfe95c004132c1c7c2a5ca5b","modified":1655970447344},{"_id":"source/_posts/Linux常用命令.md","hash":"fea98508e50b0244e7820e77aaf13418e51f7a05","modified":1656297714461},{"_id":"source/_posts/享疗共享医生系统.md","hash":"ef18ea59ad30df33214958301f165b9c2b2c514a","modified":1656469741208},{"_id":"public/2022/06/27/享疗共享医生系统/index.html","hash":"35c1d6c67cc1ca589c04f4746608099b8d2f3f18","modified":1669974814597},{"_id":"public/2022/06/27/Linux常用命令/index.html","hash":"dbc319cba2a640c17eabf79439d25e461e53fadb","modified":1669974814597},{"_id":"source/_posts/Java后端实现token的生成和验证.md","hash":"df56ec0779d58dbfc073645bdf072a27b01ebfa7","modified":1656323276077},{"_id":"public/2022/06/27/Java后端实现token的生成和验证/index.html","hash":"72fc4d41e002a3471cbc0f76b8451c973e5ed43a","modified":1669974814597},{"_id":"public/categories/项目/index.html","hash":"fe12f52f9ecc77f8d0445c4ef778a8fa4dab2e2a","modified":1669974814597},{"_id":"source/_posts/Vue编写token的登录验证.md","hash":"9167c88811ac9ab7dac7f255449f5a1b2f84eae7","modified":1656325042858},{"_id":"public/2022/06/27/Vue编写token的登录验证/index.html","hash":"ff955c781deadb281a3e66eeadba50cee7a8cf3e","modified":1669974814597},{"_id":"public/categories/笔记/page/2/index.html","hash":"5f8a9415ab291c63c09c6d235b42894b0c638d1c","modified":1682414232245},{"_id":"source/img/享疗共享医生系统/模块结构.png","hash":"141be113f8d9aa528dc3ffb2946d81ec74437819","modified":1656467220176},{"_id":"source/_posts/npm install错误之node-js版本问题.md","hash":"c9f0fef4f6f0b416efab8c154fbd9e50dd8788c7","modified":1656559391367},{"_id":"source/img/享疗共享医生系统/流程图.png","hash":"4d8c76817c7271d6d9cdf8bc3b527d431e844f91","modified":1656469452952},{"_id":"source/img/享疗共享医生系统/数据库设计.PNG","hash":"5bc105c15456de89a577f629c1994724575c0782","modified":1656467405601},{"_id":"source/_posts/redisTemplate操作redis.md","hash":"b203ae7700679ba31db141c202058a52b772953d","modified":1656580518179},{"_id":"source/_posts/springboot集成redis.md","hash":"8cfd8e04ad7a8307d71d4f2080ff7d45f6df743f","modified":1656580100346},{"_id":"public/2022/06/30/springboot集成redis/index.html","hash":"e12939733afdcb970e9ba64de177f1512fe54e38","modified":1669974814597},{"_id":"public/2022/06/30/redisTemplate操作redis/index.html","hash":"394c1d600f381216e89749ca5f0b5f878a116417","modified":1669974814597},{"_id":"public/2022/05/22/npm install错误之node-js版本问题/index.html","hash":"628544a6fba10f37d16c97ccf2d62fbb5c3b697d","modified":1669974814597},{"_id":"public/img/享疗共享医生系统/模块结构.png","hash":"141be113f8d9aa528dc3ffb2946d81ec74437819","modified":1656579411716},{"_id":"public/img/享疗共享医生系统/流程图.png","hash":"4d8c76817c7271d6d9cdf8bc3b527d431e844f91","modified":1656579411716},{"_id":"public/img/享疗共享医生系统/数据库设计.PNG","hash":"5bc105c15456de89a577f629c1994724575c0782","modified":1656579411716},{"_id":"source/_posts/javascript中对中文字段排序.md","hash":"6999d40d2c8d2a0d66235045a9c2d213470153a2","modified":1659689164984},{"_id":"source/_posts/SQL-FIND-IN-SET（）函数的使用.md","hash":"e91769c5f4db6a2ade4184ae1d5afef987520284","modified":1661220714725},{"_id":"public/2022/08/05/javascript中对中文字段排序/index.html","hash":"f510f733aefc7338b45cf21e44d7477ccf53e4a1","modified":1669974814597},{"_id":"public/archives/page/3/index.html","hash":"f7580032b9c2f74fa4fd9b1b82ba5a97b2733851","modified":1682414232245},{"_id":"public/archives/2022/page/3/index.html","hash":"d7e08dcff76d70073c1d17023da9076e2dd04d72","modified":1682414232245},{"_id":"public/archives/2022/08/index.html","hash":"67e897ae8322e1c892ae01b98b883e61be73eb14","modified":1682414232245},{"_id":"public/page/3/index.html","hash":"118a079003144c523ce39d902cc99e9f9d792651","modified":1682414232245},{"_id":"public/2022/08/23/SQL-FIND-IN-SET（）函数的使用/index.html","hash":"5d89f30533f772e71fe0f636865e0993e985ffc5","modified":1669974814597},{"_id":"public/tags/MySql/index.html","hash":"9922a59c624b901065568f9600b6ee613e073605","modified":1669974814597},{"_id":"source/_posts/Mybatis-plus-generator代码自动生成工具，自动生成实体类.md","hash":"0ba84ed271826c4659eb4480b4c9726f38dc1fac","modified":1661762975013},{"_id":"public/2022/08/29/Mybatis-plus-generator代码自动生成工具，自动生成实体类/index.html","hash":"aa536b4fef16e9db9811f2c03547006e9313f9dc","modified":1669974814597},{"_id":"source/_posts/修改springboot内嵌tomcat上传文件大小.md","hash":"124c6ceb2ba4cd0660dead0f992e510b0057c519","modified":1662017403260},{"_id":"source/_posts/mybatis动态字段传值问题.md","hash":"f91170b5fd1595c44618f52ff393608c73bec1e8","modified":1662026262908},{"_id":"public/archives/2022/09/index.html","hash":"f332003d6177c3fed11c5dbaf2e1dda8ace2edba","modified":1682414232245},{"_id":"public/2022/09/01/mybatis动态字段传值问题/index.html","hash":"72ded89a6f530b257b70d704861f22a48f53abba","modified":1669974814597},{"_id":"public/2022/09/01/修改springboot内嵌tomcat上传文件大小/index.html","hash":"c8d4d9499c5fc5072577be80dc25fb98d05c0879","modified":1669974814597},{"_id":"source/_posts/axios传递数组参数问题.md","hash":"06dc010d44910f40c06dfc3146920551e3be269e","modified":1662107926834},{"_id":"public/2022/09/02/axios传递数组参数问题/index.html","hash":"2effdfc42ae60c008d413a7287812a0081f745b9","modified":1669974814597},{"_id":"source/_posts/JSON对象数组转Java对象数组.md","hash":"c1c4790553738d0499663510ae90d67be96c0e2e","modified":1662455689000},{"_id":"source/_posts/vue-springboot前后端分离结合easyexcel实现excel导入导出功能.md","hash":"1a8b8a41ecd6549f569780a99fac8d36c7acbb22","modified":1699947211243},{"_id":"public/2022/09/06/JSON对象数组转Java对象数组/index.html","hash":"5084257df53ca0fd2b28bea5f65055f3483b4959","modified":1669974814597},{"_id":"public/2022/09/05/vue-springboot前后端分离结合easyexcel实现excel导入导出功能/index.html","hash":"1308c41e93687625884ef3de7f0afecd8b3b5bb5","modified":1669974814597},{"_id":"public/categories/笔记/page/3/index.html","hash":"02f5b04e7644952bb36c6cb3cbebda1e3e6bf5ce","modified":1682414232245},{"_id":"themes/hexo-theme-fluid-1.9.0/source/img/笨蛋美女.jpg","hash":"7d31d7652e24a8c46e0458b19e17c98dd93485ab","modified":1662715115319},{"_id":"public/img/笨蛋美女.jpg","hash":"7d31d7652e24a8c46e0458b19e17c98dd93485ab","modified":1666333229145},{"_id":"source/_posts/调用榛子云短信api服务.md","hash":"6783c8fd7a7ea0b451086bc57f90d0a062cba565","modified":1670577995977},{"_id":"public/archives/2022/10/index.html","hash":"b8b5ca67365bd167e6fe425b09db91d52b3815f4","modified":1682414232245},{"_id":"public/2022/10/28/调用榛子云短信api服务/index.html","hash":"81634d1d604129347e81b3d992cad80c2eca754f","modified":1672036441743},{"_id":"source/_posts/JsBarcode循环生成多个条形码.md","hash":"502f322178830116127e945c0934fd28ea3e1633","modified":1670578012094},{"_id":"source/_posts/Windows安装RabbitMQ详细教程.md","hash":"0ea5ba96c7784e9187560d1d8fd256e7c856f4a2","modified":1672021323414},{"_id":"source/_posts/git上传项目到gitee.md","hash":"a7415b47d53f70d69446080ea303953efe873270","modified":1699947419787},{"_id":"public/archives/page/4/index.html","hash":"a3d3ec8de8536e9fc288aea8fe8d4c3bf979683a","modified":1682414232245},{"_id":"public/archives/2022/page/4/index.html","hash":"85ccb93a58ed587d6dcc48781ddd85f23234bf3e","modified":1682414232245},{"_id":"public/archives/2022/12/index.html","hash":"30f13b85ec5d4058436ef9a6eaa9d1964232b7a2","modified":1682414232245},{"_id":"public/page/4/index.html","hash":"98d822c76ed64a2cc4cffc6f2fe0c1c81a4b7925","modified":1682414232245},{"_id":"public/2022/12/26/git上传项目到gitee/index.html","hash":"2ddef2ce8614689ab4fa44c683584653a9df14d4","modified":1682414232245},{"_id":"public/2022/12/26/Windows安装RabbitMQ详细教程/index.html","hash":"be9420fc006dface355080d95ab08e92721db9f3","modified":1672036441743},{"_id":"public/2022/12/09/JsBarcode循环生成多个条形码/index.html","hash":"f51d0a5e0151268e99b33c0f355937f9359c6a5e","modified":1672036441743},{"_id":"source/_posts/Js实现数字转化人名币汉字.md","hash":"95f3933a060448fad7e003f83f4e41ae3c71cd91","modified":1682414215074},{"_id":"public/2023/04/25/Js实现数字转化人名币汉字/index.html","hash":"7b3ed11a943f9f77df00e240b7eb235d84d4ee29","modified":1682414232245},{"_id":"public/archives/2023/index.html","hash":"2c36c6361f78de746163fafac672092ed79b8b78","modified":1682414232245},{"_id":"public/archives/2023/04/index.html","hash":"8a50603fbe0e60d72926a77e1e01da0855a17d6e","modified":1682414232245},{"_id":"source/_posts/Django生成模型类的编码问题.md","hash":"aa4a93c79ff6de76e4530284651061a57e0c774c","modified":1704867562792},{"_id":"source/_posts/Django使用Vue在html中按-取值失败的解决办法.md","hash":"00ba938adf87dc79419413c05b8c37cdccc768e6","modified":1708593491956},{"_id":"source/_posts/WSGIRequest’-object-has-no-attribute-‘is-ajax’.md","hash":"5f99fbf6fed14ce84d07ccb999878c87e6019d15","modified":1708500459662},{"_id":"source/_posts/用python实现图片验证码.md","hash":"f14991d9e3c8bc37d6e7f59ed5e0d7e154b557bb","modified":1708416565747}],"Category":[{"name":"Java基础","_id":"cl3kwbmx900035cu3brd61zxi"},{"name":"笔记","_id":"cl3kwbmxg00085cu30yaa35dp"},{"name":"JAVA框架","_id":"cl3kwbmxj000d5cu3h54g27hc"},{"name":"Web","_id":"cl3kwbmxm000k5cu31864ckcc"},{"name":"项目","_id":"cl4whgbuc0000n4u3ebuahkpv"}],"Data":[],"Page":[{"title":"about","layout":"about","date":"2022-03-17T09:57:21.000Z","_content":"\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2022-03-17 17:57:21\n---\n\n","updated":"2022-03-17T10:01:01.422Z","path":"about/index.html","comments":1,"_id":"cl3kwbmwv00005cu34o7g51c3","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"JAVA集合","author":"Evan","date":"2022-03-15T02:22:20.000Z","index_img":"/img/bg1.jpg","_content":"\n\n\n# Java集合\n\n***\n\n### 集合概述\n\n* 概念：对象的容器，定义了多个对象进行操作的常用方法。可实现  数组的功能。\n\n* 和数组的区别：\n\n  1.数组长度固定，集合长度不固定。\n  \n  2.数组可以存储基本类型和引用类型，集合只能存储引用类型。\n\n* Java引用包：java.util.*;\n\n  \n\n****\n\n## Collection体系集合\n\n![](/img/java集合/java集合图1.PNG)\n\n****\n\n## Collection父接口\n\n* 特点：代表一组任意类型的对象，无序、无下标、不能重复。\n* 方法：\n\n  - `boolean add(Object obj) //添加一个对象。`\n  - `boolean addAll(Collection c) //讲一个集合中的所有对象添加到此集合中。`\n  - `void clear() //清空此集合中的所有对象。`\n  - `boolean contains(Object o) //检查此集合中是否包含o对象。`\n  - `boolean equals(Object o) //比较此集合是否与指定对象相等。`\n  - `boolean isEmpty() //判断此集合是否为空。`\n  - `boolean remove(Object o) //在此集合中移除o对象。`\n  - `int size() //返回此集合中的元素个数。`\n  - `Object[] toArray() //姜此集合转换成数组。`\n\n&nbsp;\n\n```java\n/**\n * Collection接口的使用（一）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n */\npublic class Demo1{\n    pubic static void main(String[] args){\n        //创建集合\n        Collection collection=new ArrayList();        \n//      * 1.添加元素\n        Collection.add(\"苹果\");\n        Collection.add(\"西瓜\");\n        Collection.add(\"榴莲\");\n        System.out.println(\"元素个数：\"+collection.size());\n        System.out.println(collection);\n//      * 2.删除元素\n        collection.remove(\"榴莲\");\n        System.out.println(\"删除之后：\"+collection.size());\n//      * 3.遍历元素\n        //3.1 使用增强for \n        for(Object object : collection){\n            System.out.println(object);\n        }\n        //3.2 使用迭代器（迭代器专门用来遍历集合的一种方式）\n        //hasnext();判断是否有下一个元素\n        //next();获取下一个元素\n        //remove();删除当前元素\n        Iterator iterator=collection.Itertor();\n        while(iterator.hasnext()){\n            String object=(String)iterator.next();\n            System.out.println(s);\n            //删除操作\n            //collection.remove(s);引发错误：并发修改异常\n            //iterator.remove();应使用迭代器的方法\n//      * 4.判断\n        System.out.println(collection.contains(\"西瓜\"));//true\n        System.out.println(collection.isEmpty());//false\n        }\n    }\n}\n```\n\n&nbsp;\n\n```java\n/**\n * Collection接口的使用（二）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n */\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tCollection collection=new ArrayList();\n\t\tStudent s1=new Student(\"张三\",18);\n\t\tStudent s2=new Student(\"李四\", 20);\n\t\tStudent s3=new Student(\"王五\", 19);\n\t\t//1.添加数据\n\t\tcollection.add(s1);\n\t\tcollection.add(s2);\n\t\tcollection.add(s3);\n\t\t//collection.add(s3);可重复添加相同对象\n\t\tSystem.out.println(\"元素个数：\"+collection.size());\n\t\tSystem.out.println(collection.toString());\n\t\t//2.删除数据\n\t\tcollection.remove(s1);\n\t\tSystem.out.println(\"删除之后：\"+collection.size());\n\t\t//3.遍历数据\n\t\t//3.1 增强for\n\t\tfor(Object object:collection) {\n\t\t\tStudent student=(Student) object;\n\t\t\tSystem.out.println(student.toString());\n\t\t}\n\t\t//3.2迭代器\n\t\t//迭代过程中不能使用collection的删除方法\n\t\tIterator iterator=collection.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tStudent student=(Student) iterator.next();\n\t\t\tSystem.out.println(student.toString());\n\t\t}\n\t\t//4.判断和上一块代码类似。\n\t}\n}\n```\n\n&nbsp;\n\n```java\n/**\n * 学生类\n */\npublic class Student {\n\tprivate String name;\n\tprivate int age;\n\tpublic Student(String name, int age) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Student [name=\" + name + \", age=\" + age +\"]\";\n\t}\n}\n```\n\n&nbsp;\n\n***\n\n\n\n## Collection子接口\n\n\n\n## List 集合\n\n* 特点：有序、有下标、元素可以重复。\n* 方法:\n  - `void add(int index,Object o) //在index位置插入对象o。`\n  - `boolean addAll(index,Collection c) //将一个集合中的元素添加到此集合中的index位置。`\n  - `Object get(int index) //返回集合中指定位置的元素。`\n  - `List subList(int fromIndex,int toIndex) //返回fromIndex和toIndex之间的集合元素。 ` \n\n```java\n/**\n * List子接口的使用（一）\n * 特点：1.有序有下标 2.可以重复\n * \n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n * 5.获取位置\n */\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tList list=new ArrayList<>();\n\t\t//1.添加元素\n\t\tlist.add(\"杨\");\n\t\tlist.add(\"李\");\n\t\tlist.add(0,\"陈\");//插入操作\n\t\tSystem.out.println(\"元素个数：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//2.删除元素\n\t\tlist.remove(0);\n\t\t//list.remove(\"李\");结果同上\n\t\tSystem.out.println(\"删除之后：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//3.遍历元素\n\t\t//3.1 使用for遍历\n\t\tfor(int i=0;i<list.size();++i) {\n\t\t\tSystem.out.println(list.get(i));\n\t\t}\n\t\t//3.2 使用增强for\n\t\tfor(Object object:list) {\n\t\t\tSystem.out.println(object);\n\t\t}\n\t\t//3.3 使用迭代器\n\t\tIterator iterator=list.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(iterator.next());\n\t\t}\n\t\t//3.4使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。\n\t\tListIterator listIterator=list.listIterator();\n\t\t//从前往后\n\t\twhile (listIterator.hasNext()) {\n\t\t\tSystem.out.println(listIterator.next());\t\t\n\t\t}\n\t\t//从后往前（此时“遍历指针”已经指向末尾）\n\t\twhile(listIterator.hasPrevious()) {\n\t\t\tSystem.out.println(listIterator.previous());\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(list.isEmpty());\n\t\tSystem.out.println(list.contains(\"杨\"));\n\t\t//5.获取位置\n\t\tSystem.out.println(list.indexOf(\"杨\"));\n\t}\n}\n```\n\n&nbsp;\n\n```java\n/**\n * List子接口的使用（二）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n * 5.获取位置\n */\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tList list=new ArrayList();\n\t\t//1.添加数字数据（自动装箱）\n\t\tlist.add(20);\n\t\tlist.add(30);\n\t\tlist.add(40);\n\t\tlist.add(50);\n\t\tSystem.out.println(\"元素个数：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//2.删除元素\n\t\tlist.remove(0);\n\t\t//list.remove(20);很明显数组越界错误，改成如下\n\t\t//list.remove(Object(20));\n\t\t//list.remove(new Integer(20));\n\t\tSystem.out.println(\"元素个数：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//3-5不再演示，与之前类似\n\t\t//6.补充方法subList，返回子集合，含头不含尾\n\t\tList list2=list.subList(1, 3);\n\t\tSystem.out.println(list2.toString());\t\n\t}\n}\n```\n\n&nbsp;\n\n***\n\n## List实现类\n\n\n\nArrayList 【重点】\n\n* 数组结构实现，查询快、增删慢；\n\n* JDK1.2版本，运行效率快、线程不安全。\n\n  ```java\n  /**\n   * ArrayList的使用\n   * 存储结构：数组；\n   * 特点：查找遍历速度快，增删慢。\n   * 1.添加元素\n   * 2.删除元素\n   * 3.遍历元素\n   * 4.判断\n   * 5.查找\n   */\n  public class Demo5 {\n  \tpublic static void main(String[] args) {\n  \t\tArrayList arrayList=new ArrayList<>();\n  \t\t//1.添加元素\n  \t\tStudent s1=new Student(\"陈冠希\", 21);\n  \t\tStudent s2=new Student(\"刘德华\", 22);\n  \t\tStudent s3=new Student(\"梁朝伟\", 21);\n  \t\tarrayList.add(s1);\n  \t\tarrayList.add(s2);\n  \t\tarrayList.add(s3);\n  \t\tSystem.out.println(\"元素个数：\"+arrayList.size());\n  \t\tSystem.out.println(arrayList.toString());\n  \t\t//2.删除元素\n  \t\tarrayList.remove(s1);\n  \t\t//arrayList.remove(new Student(\"梁朝伟\", 21));\n  \t\t//注：这样可以删除吗（不可以）？显然这是两个不同的对象。\n  \t\t//假如两个对象属性相同便认为其是同一对象，那么如何修改代码？\n  \t\t//3.遍历元素\n  \t\t//3.1使用迭代器\n  \t\tIterator iterator=arrayList.iterator();\n  \t\twhile(iterator.hasNext()) {\n  \t\t\tSystem.out.println(iterator.next());\n  \t\t}\n  \t\t//3.2使用列表迭代器\n  \t\tListIterator listIterator=arrayList.listIterator();\n  \t\t//从前往后遍历\n  \t\twhile(listIterator.hasNext()) {\n  \t\t\tSystem.out.println(listIterator.next());\n  \t\t}\n  \t\t//从后往前遍历\n  \t\twhile(listIterator.hasPrevious()) {\n  \t\t\tSystem.out.println(listIterator.previous());\n  \t\t}\n  \t\t//4.判断\n  \t\tSystem.out.println(arrayList.isEmpty());\n  \t\t//System.out.println(arrayList.contains(new Student(\"何\", 22)));\n  \t\t//注：与上文相同的问题。\n  \t\t//5.查找\n  \t\tSystem.out.println(arrayList.indexOf(s1));\n  \t}\n  }\n  ```\n\n**注**：Object里的equals(this==obj)用地址和当前对象比较，如果想实现代码中的问题，可以在学生类中重写equals方法：\n\n```java\n@Override\npublic boolean equals(Object obj) {\n\t//1.是否为同一对象\n\tif (this==obj) {\n\t\treturn true;\n\t}\n\t//2.判断是否为空\n\tif (obj==null) {\n\t\treturn false;\n\t}\n\t//3.判断是否是Student类型\n\tif (obj instanceof Student) {\n\t\tStudent student=(Student) obj;\n\t\t//4.比较属性\n\t\tif(this.name.equals(student.getName())&&this.age==student.age) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t//不满足，返回false\n\treturn false;\n}\n```\n\n## ArrayList源码分析\n\n* 默认容量大小：`private static final int DEFAULT_CAPACITY = 10;`\n\n* 存放元素的数组：`transient Object[] elementData;`\n\n* 实际元素个数：`private int size;`\n\n* 创建对象时调用的无参构造函数：\n\n```java\n//这是一个空的数组\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n```\n\n这段源码说明当你没有向集合中添加任何元素时，集合容量为0。那么默认的10个容量怎么来的呢？\n\n这就得看看add方法的源码了：\n\n```java\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n```\n\n假设你new了一个数组，当前容量为0，size当然也为0。这时调用add方法进入到`ensureCapacityInternal(size + 1);`该方法源码如下：\n\n```java\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n```\n\n该方法中的参数minCapacity传入的值为size+1也就是 1，接着我们再进入到`calculateCapacity(elementData, minCapacity)`里面：\n\n```java\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n```\n\n上文说过，elementData就是存放元素的数组，当前容量为0，if条件成立，返回默认容量`DEFAULT_CAPACITY`也就是10。这个值作为参数又传入`ensureExplicitCapacity()`方法中，进入该方法查看源码：\n\n```java\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n```\n\n因为elementData数组长度为0，所以if条件成立，调用grow方法，**重要的部分来了**，我们再次进入到grow方法的源码中：\n\n```java\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n这个方法先声明了一个oldCapacity变量将数组长度赋给它，其值为0；又声明了一个newCapacity变量其值为`oldCapacity+一个增量`，可以发现这个增量是和原数组长度有关的量，当然在这里也为0。第一个if条件满足，newCapacity的值为10（这就是默认的容量，不理解的话再看看前面）。第二个if条件不成立，也可以不用注意，因为MAX_ARRAY_SIZE的定义如下：\n\n```java\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n```\n\n最后一句话就是为elementData数组赋予了新的长度，`Arrays.copyOf()`方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。`copyOf()`的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。\n\n这时候再回到add的方法中，接着就向下执行`elementData[size++] = e;`ArrayList当数组长度为10每次的增量每次扩容为原来的1.5倍。\n\n***\n\n## Vector\n\n* 数组结构实现，查询快、增删慢；\n* JDK1.0版本，运行效率慢、线程安全。\n\n```java\n/**\n * Vector的演示使用\n * \n *1.添加数据\n *2.删除数据\n *3.遍历\n *4.判断\n */\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tVector vector=new Vector<>();\n\t\t//1.添加数据\n\t\tvector.add(\"tang\");\n\t\tvector.add(\"he\");\n\t\tvector.add(\"yu\");\n\t\tSystem.out.println(\"元素个数：\"+vector.size());\n\t\t//2.删除数据\n\t\t/*\n\t\t * vector.remove(0); vector.remove(\"tang\");\n\t\t */\n\t\t//3.遍历\n\t\t//使用枚举器\n\t\tEnumeration enumeration=vector.elements();\n\t\twhile (enumeration.hasMoreElements()) {\n\t\t\tString s = (String) enumeration.nextElement();\n\t\t\tSystem.out.println(s);\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(vector.isEmpty());\n\t\tSystem.out.println(vector.contains(\"he\"));\n\t\t//5. Vector其他方法\n\t\t//firstElement()  lastElement()  ElementAt();\n\t}\n}\n```\n\n***\n\n## LinkedList\n\n* 链表结构实现，增删快，查询慢。\n\n  ```java\n  /**\n   * LinkedList的用法\n   * 存储结构：双向链表\n   * 1.添加元素\n   * 2.删除元素\n   * 3.遍历\n   * 4.判断\n   */\n  public class Demo2 {\n  \tpublic static void main(String[] args) {\n  \t\tLinkedList linkedList=new LinkedList<>();\n  \t\tStudent s1=new Student(\"陈冠希\", 21);\n  \t\tStudent s2=new Student(\"梁朝伟\", 22);\n  \t\tStudent s3=new Student(\"刘德华\", 21);\n  \t\t//1.添加元素\n  \t\tlinkedList.add(s1);\n  \t\tlinkedList.add(s2);\n  \t\tlinkedList.add(s3);\n  \t\tlinkedList.add(s3);\n  \t\tSystem.out.println(\"元素个数：\"+linkedList.size());\n  \t\tSystem.out.println(linkedList.toString());\n  \t\t//2.删除元素\n  \t\t/*\n  \t\t * linkedList.remove(new Student(\"唐\", 21));\n  \t\t * System.out.println(linkedList.toString());\n  \t\t */\n  \t\t//3.遍历\n  \t\t//3.1 使用for\n  \t\tfor(int i=0;i<linkedList.size();++i) {\n  \t\t\tSystem.out.println(linkedList.get(i));\n  \t\t}\n  \t\t//3.2 使用增强for\n  \t\tfor(Object object:linkedList) {\n  \t\t\tStudent student=(Student) object;\n  \t\t\tSystem.out.println(student.toString());\n  \t\t}\n  \t\t//3.3 使用迭代器\n  \t\tIterator iterator =linkedList.iterator();\n  \t\twhile (iterator.hasNext()) {\n  \t\t\tStudent student = (Student) iterator.next();\n  \t\t\tSystem.out.println(student.toString());\n  \t\t}\n  \t\t//3.4 使用列表迭代器（略）\n  \t\t//4. 判断\n  \t\tSystem.out.println(linkedList.contains(s1));\n  \t\tSystem.out.println(linkedList.isEmpty());\n  \t\tSystem.out.println(linkedList.indexOf(s3));\n  \t}\n  }\n  ```\n\n## LinkedList源码分析\n\n​\tLinkedList首先有三个属性：\n\n* 链表大小：`transient int size = 0;`\n* （指向）第一个结点/头结点：`transient Nod<E> first;`\n* （指向）最后一个结点/尾结点：`transient Node<E> last;`\n\n关于Node类型我们再进入到类里看看：\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n首先item存放的是实际数据；next指向下一个结点而prev指向上一个结点。\n\nNode带参构造方法的三个参数分别是前一个结点、存储的数据、后一个结点，调用这个构造方法时将它们赋值给当前对象。\n\nLinkedList是如何添加元素的呢？先看看add方法：\n\n```java\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n```\n\n进入到linkLast方法：\n\n```java\nvoid linkLast(E e) {\n    final Node<E> l = last;\n    final Node<E> newNode = new Node<>(l, e, null);\n    last = newNode;\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;\n    size++;\n    modCount++;\n}\n```\n\n假设刚开始new了一个LinkedList对象，first和last属性都为空，调用add进入到linkLast方法。\n\n首先创建一个Node变量 l 将last（此时为空）赋给它，然后new一个newNode变量存储数据，并且它的前驱指向l，后继指向null；再把last指向newNode。如下图所示：\n\n![](/img/java集合/java集合图2.PNG)\n\n如果满足if条件，说明这是添加的第一个结点，将first指向newNode：\n\n![](/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE3.PNG)\n\n至此，LinkedList对象的第一个数据添加完毕。假设需要再添加一个数据，我们可以再来走一遍，过程同上不再赘述，图示如下：\n\n![](/img/java集合/Java集合图4.PNG)\n\n***\n\n## ArrayList和LinkedList区别\n\n* ArrayList：必须开辟连续空间，查询快，增删慢。\n\n* LinkedList：无需开辟连续空间，查询慢，增删快。\n\n  ![](/img/java集合/java集合图5.PNG)\n\n***\n\n## 泛型概述\n\n* Java泛型式JDK1.5中引入的一个新特性，其本质式参数化类型，把类型作为参数传递。\n\n* 常见形式又泛型类、泛型接口、泛型方法。\n\n* 语法:\n\n  ​\t`<T,…> T称为类型占位符，表示一种引用类型。`\n\n* 好处：\n\n   `提高代码的重用性。`\n\n  `防止类型转换异常，提高代码的安全性。`\n\n### 泛型类\n\n```java\n/**\n * 泛型类\n * 语法：类名<T>\n * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开\n * \n */\npublic class myGeneric<T>{\n\t\t//1.创建泛型变量\n\t\t//不能使用new来创建，因为泛型式不确定的类型，野可能拥有私密的构造方法。\n\t\tT t\n\t\t//2.泛型作为方法的参数\n\t\tpublic void show(T t){\n     \tSystem.out.println(t);\n\t\t}\n\t\t//泛型作为方法的返回值\n\t\tpublic T getT(){\n\t\t\t\treturn t;\n\t\t}\n}\n```\n\n&nbsp;\n\n```\n/**\n * 注意：\n * 1.泛型只能使用引用类型\n * 2.不同泛型类型的对象不能相互赋值\n */\npublic class testGeneric {\n\tpublic static void main(String[] args) {\n\t\t//使用泛型类创建对象\n\t\tmyGeneric<String> myGeneric1=new myGeneric<String>();\n\t\tmyGeneric1.t=\"tang\";\n\t\tmyGeneric1.show(\"he\");\n\t\t\n\t\tmyGeneric<Integer> myGeneric2=new myGeneric<Integer>();\n\t\tmyGeneric2.t=10;\n\t\tmyGeneric2.show(20);\n\t\tInteger integer=myGeneric2.getT();\n\t}\n}\n```\n\n泛型接口\n\n```java\n/**\n * 泛型接口\n * 语法：接口名<T>\n * 注意：不能创建泛型静态常量\n */\npublic interface MyInterface<T>{\n    //创建常量\n    \tString nameString=\"tang\";\n    \t\n    \tT server(T t);\n}\n```\n\n```java\n/**\n * 实现接口时确定泛型类\n */\n public clas MyInterfaceImpl implements MyInterface<String>{\n \t\t@Override\n\t\tpublic String server(String t) {\n\t\t\t\tSystem.out.println(t);\n\t\t\t\treturn t; \n\t}\n }\n```\n\n```java\n//测试\nMyInterfaceImpl myInterfaceImpl=new MyInterfaceImpl();\nmyInterfaceImpl.server(\"xxx\");\n//xxx\n```\n\n```java\n/**\n * 实现接口时不确定泛型类\n */\npublic class MyInterfaceImpl2<T> implements MyInterface<T>{\n\t@Override\n\tpublic T server(T t) {\n\t\tSystem.out.println(t);\n\t\treturn t;\n\t}\n}\n```\n\n```java\n//测试\nMyInterfaceImpl2<Integer> myInterfaceImpl2=new MyInterfaceImpl2<Integer>();\nmyInterfaceImpl2.server(2000);\n//2000\n```\n\n泛型方法\n\n```java\n/**\n * 泛型方法\n * 语法：<T> 返回类型\n */\npublic class MyGenericMethod {\n\tpublic <T> void show(T t) {\n\t\tSystem.out.println(\"泛型方法\"+t);\n\t}\n}\n```\n\n```java\n//测试\nMyGenericMethod myGenericMethod=new MyGenericMethod();\nmyGenericMethod.show(\"tang\");\nmyGenericMethod.show(200);\nmyGenericMethod.show(3.14);\n```\n\n##### **泛型集合**\n\n- **概念**：参数化类型、类型安全的集合，强制集合元素的类型必须一致。\n\n- 特点\n\n  ：\n\n  - 编译时即可检查，而非运行时抛出异常。\n  - 访问时，不必类型转换（拆箱）。\n  - 不同泛型指尖引用不能相互赋值，泛型不存在多态。\n\n之前我们在创建LinkedList类型对象的时候并没有使用泛型，但是进到它的源码中会发现：\n\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable{//略}\n```\n\n它是一个泛型类，而我之前使用的时候并没有传递，说明java语法是允许的，这个时候传递的类型是Object类，虽然它是所有类的父类，可以存储任意的类型，但是在遍历、获取元素时需要原来的类型就要进行强制转换。这个时候就会出现一些问题，假如往链表里存储了许多不同类型的数据，在强转的时候就要判断每一个原来的类型，这样就很容易出现错误。\n\n***\n\n## Set集合概述\n\n### Set子接口\n\n* 特点：无序、无下标、元素不可重复。\n\n* 方法：全部继承自Collection中的方法。\n\n  ```java\n  /**\n   * 测试Set接口的使用\n   * 特点：1.无序，没有下标；2.重复\n   * 1.添加数据\n   * 2.删除数据\n   * 3.遍历【重点】\n   * 4.判断\n   */\n  public class Demo1 {\n  \tpublic static void main(String[] args) {\n  \t\tSet<String> set=new HashSet<String>();\n  \t\t//1.添加数据\n  \t\tset.add(\"tang\");\n  \t\tset.add(\"he\");\n  \t\tset.add(\"yu\");\n  \t\tSystem.out.println(\"数据个数：\"+set.size());\n  \t\tSystem.out.println(set.toString());//无序输出\n  \t\t//2.删除数据\n  \t\t/*\n  \t\t * set.remove(\"tang\"); System.out.println(set.toString());\n  \t\t */\n  \t\t//3.遍历【重点】\n  \t\t//3.1 使用增强for\n  \t\tfor (String string : set) {\n  \t\t\tSystem.out.println(string);\n  \t\t}\n  \t\t//3.2 使用迭代器\n  \t\tIterator<String> iterator=set.iterator();\n  \t\twhile (iterator.hasNext()) {\n  \t\t\tSystem.out.println(iterator.next());\n  \t\t}\n  \t\t//4.判断\n  \t\tSystem.out.println(set.contains(\"tang\"));\n  \t\tSystem.out.println(set.isEmpty());\n  \t}\n  }\n  ```\n\n## Set实现类\n\n### HashSet【重点】\n\n* 基于HashCode计算元素存放位置。\n* 当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入。\n\n```java\n/**\n * 人类\n */\npublic class Person {\n\tprivate String name;\n\tprivate int age;\n\tpublic Person(String name,int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Peerson [name=\" + name + \", age=\" + age + \"]\";\n\t}\n}\n```\n\n```java\n/**\n * HashSet集合的使用\n * 存储结构：哈希表（数组+链表+红黑树）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历\n * 4.判断\n*/\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tHashSet<Person> hashSet=new HashSet<>();\n\t\tPerson p1=new Person(\"陈冠希\",21);\n\t\tPerson p2=new Person(\"刘德华\", 22);\n\t\tPerson p3=new Person(\"吴彦祖\", 21);\n\t\t//1.添加元素\n\t\thashSet.add(p1);\n\t\thashSet.add(p2);\n\t\thashSet.add(p3);\n        //重复，添加失败\n        hashSet.add(p3);\n        //直接new一个相同属性的对象，依然会被添加，不难理解。\n        //假如相同属性便认为是同一个对象，怎么修改？\n        hashSet.add(new Person(\"吴彦祖\", 21));\n\t\tSystem.out.println(hashSet.toString());\n\t\t//2.删除元素\n\t\thashSet.remove(p2);\n\t\t//3.遍历\n\t\t//3.1 增强for\n\t\tfor (Person person : hashSet) {\n\t\t\tSystem.out.println(person);\n\t\t}\n\t\t//3.2 迭代器\n\t\tIterator<Person> iterator=hashSet.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(iterator.next());\t\t\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(hashSet.isEmpty());\n        //直接new一个相同属性的对象结果输出是false，不难理解。\n        //注：假如相同属性便认为是同一个对象，该怎么做？\n\t\tSystem.out.println(hashSet.contains(new Person(\"吴彦祖\", 21)));\n\t}\n}\n```\n\n**注**：hashSet存储过程：\n\n1. 根据hashCode计算保存的位置，如果位置为空，则直接保存，否则执行第二步。\n2. 执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。\n\n存储过程实际上就是重复依据，要实现“注”里的问题，可以重写hashCode和equals代码：\n\n```java\n@Override\npublic int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + age;\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\n    return result;\n}\n@Override\npublic boolean equals(Object obj) {\n    if (this == obj)\n        return true;\n    if (obj == null)\n        return false;\n    if (getClass() != obj.getClass())\n        return false;\n    Person other = (Person) obj;\n    if (age != other.age)\n        return false;\n    if (name == null) {\n        if (other.name != null)\n            return false;\n    } else if (!name.equals(other.name))\n        return false;\n    return true;\n}\n```\n\nhashCode方法里为什么要使用31这个数字大概有两个原因：\n\n1. 31是一个质数，这样的数字在计算时可以尽量减少散列冲突。\n\n2. 可以提高执行效率，因为31*i=(i<<5)-i，31乘以一个数可以转换成移位操作，这样能快一点；但是也有网上一些人对这两点提出质疑。\n\n   \n\n   ### TreeSet\n\n   - 基于排序顺序实现不重复。\n   - 实现了SortedSet接口，对集合元素自动排序。\n   - 元素对象的类型必须实现Comparable接口，指定排序规则。\n   - 通过CompareTo方法确定是否为重复元素。\n\n```java\n/**\n * 使用TreeSet保存数据\n * 存储结构：红黑树\n * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 \n */\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tTreeSet<Person> persons=new TreeSet<Person>();\n\t\tPerson p1=new Person(\"tang\",21);\n\t\tPerson p2=new Person(\"he\", 22);\n\t\tPerson p3=new Person(\"yu\", 21);\n\t\t//1.添加元素\n\t\tpersons.add(p1);\n\t\tpersons.add(p2);\n\t\tpersons.add(p3);\n\t\t//注：直接添加会报类型转换错误，需要实现Comparable接口\n\t\tSystem.out.println(persons.toString());\n\t\t//2.删除元素\n\t\tpersons.remove(p1);\n\t\tpersons.remove(new Person(\"he\", 22));\n\t\tSystem.out.println(persons.toString());\n\t\t//3.遍历（略）\n\t\t//4.判断\n\t\tSystem.out.println(persons.contains(new Person(\"yu\", 21)));\n\t}\n}\n```\n\n查看Comparable接口的源码，发现只有一个compareTo抽象方法，在人类中实现它：\n\n```java\npublic class Person implements Comparable<Person>{\n    @Override\n\t//1.先按姓名比\n\t//2.再按年龄比\n\tpublic int compareTo(Person o) {\n\t\tint n1=this.getName().compareTo(o.getName());\n\t\tint n2=this.age-o.getAge();\n\t\treturn n1==0?n2:n1;\n\t}\n}\n```\n\n除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它：\n\n```java\n/**\n * TreeSet的使用\n * Comparator：实现定制比较（比较器）\n */\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tTreeSet<Person> persons=new TreeSet<Person>(new Comparator<Person>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Person o1, Person o2) {\n\t\t\t\t// 先按年龄比较\n\t\t\t\t// 再按姓名比较\n\t\t\t\tint n1=o1.getAge()-o2.getAge();\n\t\t\t\tint n2=o1.getName().compareTo(o2.getName());\n\t\t\t\treturn n1==0?n2:n1;\n\t\t\t}\t\t\t\n\t\t});\n\t\tPerson p1=new Person(\"陈冠希\",21);\n\t\tPerson p2=new Person(\"吴彦祖\", 22);\n\t\tPerson p3=new Person(\"彭于晏\", 21);\n\t\tpersons.add(p1);\n\t\tpersons.add(p2);\n\t\tpersons.add(p3);\n\t\tSystem.out.println(persons.toString());\n\t}\n}\n```\n\n接下来我们来做一个小案例：\n\n```java\n/**\n * 要求：使用TreeSet集合实现字符串按照长度进行排序\n * helloworld tangrui hechengyang wangzixu yuguoming\n * Comparator接口实现定制比较\n */\npublic class Demo6 {\n\tpublic static void main(String[] args) {\n\t\tTreeSet<String> treeSet=new TreeSet<String>(new Comparator<String>() {\n\t\t\t@Override\n\t\t\t//先比较字符串长度\n\t\t\t//再比较字符串\n\t\t\tpublic int compare(String o1, String o2) {\n\t\t\t\tint n1=o1.length()-o2.length();\n\t\t\t\tint n2=o1.compareTo(o2);\n\t\t\t\treturn n1==0?n2:n1;\n\t\t\t}\t\t\t\n\t\t});\n\t\ttreeSet.add(\"hello\");\n\t\ttreeSet.add(\"chen\");\n\t\ttreeSet.add(\"liu\");\n\t\ttreeSet.add(\"peng\");\n\t\ttreeSet.add(\"liang\");\n\t\tSystem.out.println(treeSet.toString());\n        //输出[liu, chen, peng, hello, liang]\n\t}\n}\n```\n\n***\n\n## Map集合的实现类\n\n\n\n## HashMap 【重点】\n\n* JDK1.2版本，线程不安全，运行效率快；允许用null作为key或是value。\n\n```java\n/**\n   * 学生类\n   */\n  public class Student {\n  \tprivate String name;\n  \tprivate int id;\t\n  \tpublic Student(String name, int id) {\n  \t\tsuper();\n  \t\tthis.name = name;\n  \t\tthis.id = id;\n  \t}\n  \tpublic String getName() {\n  \t\treturn name;\n  \t}\n  \tpublic void setName(String name) {\n  \t\tthis.name = name;\n  \t}\n  \tpublic int getId() {\n  \t\treturn id;\n  \t}\n  \tpublic void setId(int id) {\n  \t\tthis.id = id;\n  \t}\n  \t@Override\n  \tpublic String toString() {\n  \t\treturn \"Student [name=\" + name + \", age=\" + id + \"]\";\n  \t}\n  }\n```\n\n```java\n/**\n   * HashMap的使用\n   * 存储结构：哈希表（数组+链表+红黑树）\n   */\n  public class Demo2 {\n  \tpublic static void main(String[] args) {\n  \t\tHashMap<Student, String> hashMap=new HashMap<Student, String>();\n  \t\tStudent s1=new Student(\"tang\", 36);\n  \t\tStudent s2=new Student(\"yu\", 101);\n  \t\tStudent s3=new Student(\"he\", 10);\n  \t\t//1.添加元素\n  \t\thashMap.put(s1, \"成都\");\n  \t\thashMap.put(s2, \"杭州\");\n  \t\thashMap.put(s3, \"郑州\");\n  \t\t//添加失败，但会更新值\n  \t\thashMap.put(s3,\"上海\");\n  \t\t//添加成功，不过两个属性一模一样；\n  \t\t//注：假如相同属性便认为是同一个对象，怎么修改？\n  \t\thashMap.put(new Student(\"he\", 10),\"上海\");\n  \t\tSystem.out.println(hashMap.toString());\n  \t\t//2.删除元素\n  \t\thashMap.remove(s3);\n  \t\tSystem.out.println(hashMap.toString());\n  \t\t//3.遍历\n  \t\t//3.1 使用keySet()遍历\n  \t\tfor (Student key : hashMap.keySet()) {\n  \t\t\tSystem.out.println(key+\" \"+hashMap.get(key));\n  \t\t}\n  \t\t//3.2 使用entrySet()遍历\n  \t\tfor (Entry<Student, String> entry : hashMap.entrySet()) {\n  \t\t\tSystem.out.println(entry.getKey()+\" \"+entry.getValue());\n  \t\t}\n  \t\t//4.判断\n  \t\t//注：同上\n  \t\tSystem.out.println(hashMap.containsKey(new Student(\"he\", 10)));\n  \t\tSystem.out.println(hashMap.containsValue(\"成都\"));\n  \t}\n  }\n```\n\n注：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：\n\n```java\n@Override\n  public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + id;\n      result = prime * result + ((name == null) ? 0 : name.hashCode());\n      return result;\n  }\n  @Override\n  public boolean equals(Object obj) {\n      if (this == obj)\n          return true;\n      if (obj == null)\n          return false;\n      if (getClass() != obj.getClass())\n          return false;\n      Student other = (Student) obj;\n      if (id != other.id)\n          return false;\n      if (name == null) {\n          if (other.name != null)\n              return false;\n      } else if (!name.equals(other.name))\n          return false;\n      return true;\n  }\n```\n\n## HashMap 源码分析\n\n* 默认初始化容量：`static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16`\n\n- 数组最大容量：`static final int MAXIMUM_CAPACITY = 1 << 30;`\n\n* 默认加载因子：`static final float DEFAULT_LOAD_FACTOR = 0.75f;`\n\n* 链表调整为红黑树的链表长度阈值（JDK1.8）：`static final int TREEIFY_THRESHOLD = 8;`\n\n* 红黑树调整为链表的链表长度阈值（JDK1.8）：`static final int UNTREEIFY_THRESHOLD = 6;`\n\n* 链表调整为红黑树的数组最小阈值（JDK1.8）：`static final int MIN_TREEIFY_CAPACITY = 64;`\n\n* HashMap存储的数组：`transient Node<K,V>[] table;`\n\n* HashMap存储的元素个数：`transient int size;`\n\n> - 默认加载因子是什么？\n>   - 就是判断数组是否扩容的一个因子。假如数组容量为100，如果HashMap的存储元素个数超过了100*0.75=75，那么就会进行扩容。\n> - 链表调整为红黑树的链表长度阈值是什么？\n>   - 假设在数组中下标为3的位置已经存储了数据，当新增数据时通过哈希码得到的存储位置又是3，那么就会在该位置形成一个链表，当链表过长时就会转换成红黑树以提高执行效率，这个阈值就是链表转换成红黑树的最短链表长度；\n> - 红黑树调整为链表的链表长度阈值是什么？\n>   - 当红黑树的元素个数小于该阈值时就会转换成链表。\n> - 链表调整为红黑树的数组最小阈值是什么？\n>   - 并不是只要链表长度大于8就可以转换成红黑树，在前者条件成立的情况下，数组的容量必须大于等于64才会进行转换。\n\n\n\nHashMap的数组table存储的就是一个个的Node<K,V>类型，很清晰地看到有一对键值，还有一个指向next的指针（以下只截取了部分源码）：\n\n```java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n      final K key;\n      V value;\n      Node<K,V> next;\n  }\n```\n\n之前的代码中在new对象时调用的是HashMap的无参构造方法，进入到该构造方法的源码查看一下：\n\n```java\npublic HashMap() {\n      this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n  }\n```\n\n发现没什么内容，只是赋值了一个默认加载因子；而在上文我们观察到源码中table和size都没有赋予初始值，说明刚创建的HashMap对象没有分配容量，并不拥有默认的16个空间大小，这样做的目的是为了节约空间，此时table为null，size为0。\n\n当我们往对象里添加元素时调用put方法：\n\n```java\npublic V put(K key, V value) {\n      return putVal(hash(key), key, value, false, true);\n  }\n```\n\nput方法把key和value传给了putVal，同时还传入了一个hash(Key)所返回的值，这是一个产生哈希值的方法，再进入到putVal方法（部分源码）：\n\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                    boolean evict) {\n      Node<K,V>[] tab; Node<K,V> p; int n, i;\n      if ((tab = table) == null || (n = tab.length) == 0)\n          n = (tab = resize()).length;\n      if ((p = tab[i = (n - 1) & hash]) == null)\n          tab[i] = newNode(hash, key, value, null);\n      else{\n          //略\n      }\n  }\n```\n\n这里面创建了一个tab数组和一个Node变量p，第一个if实际是判断table是否为空，而我们现在只关注刚创建HashMap对象时的状态，此时tab和table都为空，满足条件，执行内部代码，这条代码其实就是把resize()所返回的结果赋给tab，n就是tab的长度，resize顾名思义就是重新调整大小。查看resize()源码（部分）：\n\n```java\nfinal Node<K,V>[] resize() {\n      Node<K,V>[] oldTab = table;\n      int oldCap = (oldTab == null) ? 0 : oldTab.length;\n      int oldThr = threshold;\n      if (oldCap > 0);\n      else if (oldThr > 0);\n      else {               // zero initial threshold signifies using defaults\n          newCap = DEFAULT_INITIAL_CAPACITY;\n          newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n      } \n      @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n      Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n      table = newTab;\n      return newTab;\n  }\n```\n\n该方法首先把table及其长度赋值给oldTab和oldCap；threshold是阈值的意思，此时为0，所以前两个if先不管，最后else里newCap的值为默认初始化容量16；往下创建了一个newCap大小的数组并将其赋给了table，刚创建的HashMap对象就在这里获得了初始容量。然后我们再回到putVal方法，第二个if就是根据哈希码得到的tab中的一个位置是否为空，为空便直接添加元素，此时数组中无元素所以直接添加。至此HashMap对象就完成了第一个元素的添加。当添加的元素超过16*0.75=12时，就会进行扩容：\n\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict){\n      if (++size > threshold)\n          resize();\n  }\n```\n\n扩容的代码如下（部分）：\n\n```java\nfinal Node<K,V>[] resize() {\n      int oldCap = (oldTab == null) ? 0 : oldTab.length;\n      int newCap;\n      if (oldCap > 0) {\n          if (oldCap >= MAXIMUM_CAPACITY) {//略}\n          else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                   oldCap >= DEFAULT_INITIAL_CAPACITY)\n      }\n  }\n```\n\n核心部分是else if里的移位操作，**也就是说每次扩容都是原来大小的两倍**。\n\n* 注**：额外说明的一点是在JDK1.8以前链表是头插入，JDK1.8以后链表是尾插入。\n\n***\n\n#### **HashSet源码分析**\n\n```java\npublic class HashSet<E>\n      extends AbstractSet<E>\n      implements Set<E>, Cloneable, java.io.Serializable\n  {\n      private transient HashMap<E,Object> map;\n      private static final Object PRESENT = new Object();\n      public HashSet() {\n          map = new HashMap<>();\n      }\n  }\n```\n\nHashSet的存储结构就是HashMap，那它的存储方式是怎样的呢？可以看一下add方法：\n\n```java\npublic boolean add(E e) {\n      return map.put(e, PRESENT)==null;\n  }\n```\n\n很明了地发现它的add方法调用的就是map的put方法，把元素作为map的key传进去的。。\n\n## Hashtable\n\n- JDK1.0版本，线程安全，运行效率慢；不允许null作为key或是value。\n\n- 初始容量11，加载因子0.75。\n\n  这个集合在开发过程中已经不用了，稍微了解即可。\n\n### **Properties**\n\n- Hashtable的子类，要求key和value都是String。通常用于配置文件的读取。\n\n它继承了Hashtable的方法，与流关系密切，此处不详解。\n\n### TreeMap\n\n- 实现了SortedMap接口（是Map的子接口），可以对key自动排序。\n\n```java\n/**\n * TreeMap的使用\n * 存储结构：红黑树\n */\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tTreeMap<Student, Integer> treeMap=new TreeMap<Student, Integer>();\n\t\tStudent s1=new Student(\"tang\", 36);\n\t\tStudent s2=new Student(\"yu\", 101);\n\t\tStudent s3=new Student(\"he\", 10);\n\t\t//1.添加元素\n\t\ttreeMap.put(s1, 21);\n\t\ttreeMap.put(s2, 22);\n\t\ttreeMap.put(s3, 21);\n\t\t//不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小\n\t\tSystem.out.println(treeMap.toString());\n\t\t//2.删除元素\n\t\ttreeMap.remove(new Student(\"he\", 10));\n\t\tSystem.out.println(treeMap.toString());\n\t\t//3.遍历\n\t\t//3.1 使用keySet()\n\t\tfor (Student key : treeMap.keySet()) {\n\t\t\tSystem.out.println(key+\" \"+treeMap.get(key));\n\t\t}\n\t\t//3.2 使用entrySet()\n\t\tfor (Entry<Student, Integer> entry : treeMap.entrySet()) {\n\t\t\tSystem.out.println(entry.getKey()+\" \"+entry.getValue());\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(treeMap.containsKey(s1));\n\t\tSystem.out.println(treeMap.isEmpty());\t\t\n\t}\n}\n```\n\n在学生类中实现Comparable接口：\n\n```java\npublic class Student implements Comparable<Student>{\n    @Override\n    public int compareTo(Student o) {\n        int n1=this.id-o.id;\n        return n1;\n}\n```\n\n除此之外还可以使用比较器来定制比较：\n\n```java\nTreeMap<Student, Integer> treeMap2=new TreeMap<Student, Integer>(new Comparator<Student>() {\n    @Override\n    public int compare(Student o1, Student o2) {\n        // 略\n        return 0;\n    }\t\t\t\n});\n```\n\n### TreeSet源码\n\n与HashSet类似\n\n```java\npublic class TreeSet<E> extends AbstractSet<E>\n    implements NavigableSet<E>, Cloneable, java.io.Serializable\n{\n    private transient NavigableMap<E,Object> m;\n    private static final Object PRESENT = new Object();\n    TreeSet(NavigableMap<E,Object> m) {\n        this.m = m;\n    }\n    public TreeSet() {\n        this(new TreeMap<E,Object>());\n    }\n}\n```\n\nTreeSet的存储结构实际上就是TreeMap，再来看其存储方式：\n\n```java\npublic boolean add(E e) {\n    return m.put(e, PRESENT)==null;\n}\n```\n\n它的add方法调用的就是TreeMap的put方法，将元素作为key传入到存储结构中。\n\n***\n\n## **Collections工具类**\n\n**概念**：集合工具类，定义了除了存取以外的集合常用方法。\n\n**方法**：\n\n- `public static void reverse(List<?> list)`//反转集合中元素的顺序\n- `public static void shuffle(List<?> list)`//随机重置集合元素的顺序\n- `public static void sort(List<T> list)`//升序排序（元素类型必须实现Comparable接口）\n\n```java\n/**\n * 演示Collections工具类的使用\n *\n */\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tList<Integer> list=new ArrayList<Integer>();\n\t\tlist.add(20);\n\t\tlist.add(10);\n\t\tlist.add(30);\n\t\tlist.add(90);\n\t\tlist.add(70);\n\t\t\n\t\t//sort排序\n\t\tSystem.out.println(list.toString());\n\t\tCollections.sort(list);\n\t\tSystem.out.println(list.toString());\n\t\tSystem.out.println(\"---------\");\n\t\t\n\t\t//binarySearch二分查找\n\t\tint i=Collections.binarySearch(list, 10);\n\t\tSystem.out.println(i);\n\t\t\n\t\t//copy复制\n\t\tList<Integer> list2=new ArrayList<Integer>();\n\t\tfor(int i1=0;i1<5;++i1) {\n\t\t\tlist2.add(0);\n\t\t}\n\t\t//该方法要求目标元素容量大于等于源目标\n\t\tCollections.copy(list2, list);\n\t\tSystem.out.println(list2.toString());\n\t\t\n\t\t//reserve反转\n\t\tCollections.reverse(list2);\n\t\tSystem.out.println(list2.toString());\n\t\t\n\t\t//shuffle 打乱\n\t\tCollections.shuffle(list2);\n\t\tSystem.out.println(list2.toString());\n\t\t\n\t\t//补充：list转成数组\n\t\tInteger[] arr=list.toArray(new Integer[0]);\n\t\tSystem.out.println(arr.length);\n\t\t//补充：数组转成集合 \n\t\tString[] nameStrings= {\"tang\",\"he\",\"yu\"};\n\t\t//受限集合，不能添加和删除\n\t\tList<String> list3=Arrays.asList(nameStrings);\n\t\tSystem.out.println(list3);\n\t\t\n\t\t//注：基本类型转成集合时需要修改为包装类\n\t}\n}\n```\n\n本文已完结\n\n* 本文源于:https://lazydog036.gitee.io/2020/10/29/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/\n\n","source":"_posts/JAVA集合-0.md","raw":"---\ntitle: JAVA集合\n\ncategories: Java基础\nauthor: Evan\ndate: 2022-03-15 10:22:20\n\nindex_img: /img/bg1.jpg\ntags:\n- Java\n- 集合\n\n\n---\n\n\n\n# Java集合\n\n***\n\n### 集合概述\n\n* 概念：对象的容器，定义了多个对象进行操作的常用方法。可实现  数组的功能。\n\n* 和数组的区别：\n\n  1.数组长度固定，集合长度不固定。\n  \n  2.数组可以存储基本类型和引用类型，集合只能存储引用类型。\n\n* Java引用包：java.util.*;\n\n  \n\n****\n\n## Collection体系集合\n\n![](/img/java集合/java集合图1.PNG)\n\n****\n\n## Collection父接口\n\n* 特点：代表一组任意类型的对象，无序、无下标、不能重复。\n* 方法：\n\n  - `boolean add(Object obj) //添加一个对象。`\n  - `boolean addAll(Collection c) //讲一个集合中的所有对象添加到此集合中。`\n  - `void clear() //清空此集合中的所有对象。`\n  - `boolean contains(Object o) //检查此集合中是否包含o对象。`\n  - `boolean equals(Object o) //比较此集合是否与指定对象相等。`\n  - `boolean isEmpty() //判断此集合是否为空。`\n  - `boolean remove(Object o) //在此集合中移除o对象。`\n  - `int size() //返回此集合中的元素个数。`\n  - `Object[] toArray() //姜此集合转换成数组。`\n\n&nbsp;\n\n```java\n/**\n * Collection接口的使用（一）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n */\npublic class Demo1{\n    pubic static void main(String[] args){\n        //创建集合\n        Collection collection=new ArrayList();        \n//      * 1.添加元素\n        Collection.add(\"苹果\");\n        Collection.add(\"西瓜\");\n        Collection.add(\"榴莲\");\n        System.out.println(\"元素个数：\"+collection.size());\n        System.out.println(collection);\n//      * 2.删除元素\n        collection.remove(\"榴莲\");\n        System.out.println(\"删除之后：\"+collection.size());\n//      * 3.遍历元素\n        //3.1 使用增强for \n        for(Object object : collection){\n            System.out.println(object);\n        }\n        //3.2 使用迭代器（迭代器专门用来遍历集合的一种方式）\n        //hasnext();判断是否有下一个元素\n        //next();获取下一个元素\n        //remove();删除当前元素\n        Iterator iterator=collection.Itertor();\n        while(iterator.hasnext()){\n            String object=(String)iterator.next();\n            System.out.println(s);\n            //删除操作\n            //collection.remove(s);引发错误：并发修改异常\n            //iterator.remove();应使用迭代器的方法\n//      * 4.判断\n        System.out.println(collection.contains(\"西瓜\"));//true\n        System.out.println(collection.isEmpty());//false\n        }\n    }\n}\n```\n\n&nbsp;\n\n```java\n/**\n * Collection接口的使用（二）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n */\npublic class Demo2 {\n\tpublic static void main(String[] args) {\n\t\tCollection collection=new ArrayList();\n\t\tStudent s1=new Student(\"张三\",18);\n\t\tStudent s2=new Student(\"李四\", 20);\n\t\tStudent s3=new Student(\"王五\", 19);\n\t\t//1.添加数据\n\t\tcollection.add(s1);\n\t\tcollection.add(s2);\n\t\tcollection.add(s3);\n\t\t//collection.add(s3);可重复添加相同对象\n\t\tSystem.out.println(\"元素个数：\"+collection.size());\n\t\tSystem.out.println(collection.toString());\n\t\t//2.删除数据\n\t\tcollection.remove(s1);\n\t\tSystem.out.println(\"删除之后：\"+collection.size());\n\t\t//3.遍历数据\n\t\t//3.1 增强for\n\t\tfor(Object object:collection) {\n\t\t\tStudent student=(Student) object;\n\t\t\tSystem.out.println(student.toString());\n\t\t}\n\t\t//3.2迭代器\n\t\t//迭代过程中不能使用collection的删除方法\n\t\tIterator iterator=collection.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tStudent student=(Student) iterator.next();\n\t\t\tSystem.out.println(student.toString());\n\t\t}\n\t\t//4.判断和上一块代码类似。\n\t}\n}\n```\n\n&nbsp;\n\n```java\n/**\n * 学生类\n */\npublic class Student {\n\tprivate String name;\n\tprivate int age;\n\tpublic Student(String name, int age) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Student [name=\" + name + \", age=\" + age +\"]\";\n\t}\n}\n```\n\n&nbsp;\n\n***\n\n\n\n## Collection子接口\n\n\n\n## List 集合\n\n* 特点：有序、有下标、元素可以重复。\n* 方法:\n  - `void add(int index,Object o) //在index位置插入对象o。`\n  - `boolean addAll(index,Collection c) //将一个集合中的元素添加到此集合中的index位置。`\n  - `Object get(int index) //返回集合中指定位置的元素。`\n  - `List subList(int fromIndex,int toIndex) //返回fromIndex和toIndex之间的集合元素。 ` \n\n```java\n/**\n * List子接口的使用（一）\n * 特点：1.有序有下标 2.可以重复\n * \n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n * 5.获取位置\n */\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tList list=new ArrayList<>();\n\t\t//1.添加元素\n\t\tlist.add(\"杨\");\n\t\tlist.add(\"李\");\n\t\tlist.add(0,\"陈\");//插入操作\n\t\tSystem.out.println(\"元素个数：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//2.删除元素\n\t\tlist.remove(0);\n\t\t//list.remove(\"李\");结果同上\n\t\tSystem.out.println(\"删除之后：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//3.遍历元素\n\t\t//3.1 使用for遍历\n\t\tfor(int i=0;i<list.size();++i) {\n\t\t\tSystem.out.println(list.get(i));\n\t\t}\n\t\t//3.2 使用增强for\n\t\tfor(Object object:list) {\n\t\t\tSystem.out.println(object);\n\t\t}\n\t\t//3.3 使用迭代器\n\t\tIterator iterator=list.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(iterator.next());\n\t\t}\n\t\t//3.4使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。\n\t\tListIterator listIterator=list.listIterator();\n\t\t//从前往后\n\t\twhile (listIterator.hasNext()) {\n\t\t\tSystem.out.println(listIterator.next());\t\t\n\t\t}\n\t\t//从后往前（此时“遍历指针”已经指向末尾）\n\t\twhile(listIterator.hasPrevious()) {\n\t\t\tSystem.out.println(listIterator.previous());\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(list.isEmpty());\n\t\tSystem.out.println(list.contains(\"杨\"));\n\t\t//5.获取位置\n\t\tSystem.out.println(list.indexOf(\"杨\"));\n\t}\n}\n```\n\n&nbsp;\n\n```java\n/**\n * List子接口的使用（二）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历元素\n * 4.判断\n * 5.获取位置\n */\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tList list=new ArrayList();\n\t\t//1.添加数字数据（自动装箱）\n\t\tlist.add(20);\n\t\tlist.add(30);\n\t\tlist.add(40);\n\t\tlist.add(50);\n\t\tSystem.out.println(\"元素个数：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//2.删除元素\n\t\tlist.remove(0);\n\t\t//list.remove(20);很明显数组越界错误，改成如下\n\t\t//list.remove(Object(20));\n\t\t//list.remove(new Integer(20));\n\t\tSystem.out.println(\"元素个数：\"+list.size());\n\t\tSystem.out.println(list.toString());\n\t\t//3-5不再演示，与之前类似\n\t\t//6.补充方法subList，返回子集合，含头不含尾\n\t\tList list2=list.subList(1, 3);\n\t\tSystem.out.println(list2.toString());\t\n\t}\n}\n```\n\n&nbsp;\n\n***\n\n## List实现类\n\n\n\nArrayList 【重点】\n\n* 数组结构实现，查询快、增删慢；\n\n* JDK1.2版本，运行效率快、线程不安全。\n\n  ```java\n  /**\n   * ArrayList的使用\n   * 存储结构：数组；\n   * 特点：查找遍历速度快，增删慢。\n   * 1.添加元素\n   * 2.删除元素\n   * 3.遍历元素\n   * 4.判断\n   * 5.查找\n   */\n  public class Demo5 {\n  \tpublic static void main(String[] args) {\n  \t\tArrayList arrayList=new ArrayList<>();\n  \t\t//1.添加元素\n  \t\tStudent s1=new Student(\"陈冠希\", 21);\n  \t\tStudent s2=new Student(\"刘德华\", 22);\n  \t\tStudent s3=new Student(\"梁朝伟\", 21);\n  \t\tarrayList.add(s1);\n  \t\tarrayList.add(s2);\n  \t\tarrayList.add(s3);\n  \t\tSystem.out.println(\"元素个数：\"+arrayList.size());\n  \t\tSystem.out.println(arrayList.toString());\n  \t\t//2.删除元素\n  \t\tarrayList.remove(s1);\n  \t\t//arrayList.remove(new Student(\"梁朝伟\", 21));\n  \t\t//注：这样可以删除吗（不可以）？显然这是两个不同的对象。\n  \t\t//假如两个对象属性相同便认为其是同一对象，那么如何修改代码？\n  \t\t//3.遍历元素\n  \t\t//3.1使用迭代器\n  \t\tIterator iterator=arrayList.iterator();\n  \t\twhile(iterator.hasNext()) {\n  \t\t\tSystem.out.println(iterator.next());\n  \t\t}\n  \t\t//3.2使用列表迭代器\n  \t\tListIterator listIterator=arrayList.listIterator();\n  \t\t//从前往后遍历\n  \t\twhile(listIterator.hasNext()) {\n  \t\t\tSystem.out.println(listIterator.next());\n  \t\t}\n  \t\t//从后往前遍历\n  \t\twhile(listIterator.hasPrevious()) {\n  \t\t\tSystem.out.println(listIterator.previous());\n  \t\t}\n  \t\t//4.判断\n  \t\tSystem.out.println(arrayList.isEmpty());\n  \t\t//System.out.println(arrayList.contains(new Student(\"何\", 22)));\n  \t\t//注：与上文相同的问题。\n  \t\t//5.查找\n  \t\tSystem.out.println(arrayList.indexOf(s1));\n  \t}\n  }\n  ```\n\n**注**：Object里的equals(this==obj)用地址和当前对象比较，如果想实现代码中的问题，可以在学生类中重写equals方法：\n\n```java\n@Override\npublic boolean equals(Object obj) {\n\t//1.是否为同一对象\n\tif (this==obj) {\n\t\treturn true;\n\t}\n\t//2.判断是否为空\n\tif (obj==null) {\n\t\treturn false;\n\t}\n\t//3.判断是否是Student类型\n\tif (obj instanceof Student) {\n\t\tStudent student=(Student) obj;\n\t\t//4.比较属性\n\t\tif(this.name.equals(student.getName())&&this.age==student.age) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t//不满足，返回false\n\treturn false;\n}\n```\n\n## ArrayList源码分析\n\n* 默认容量大小：`private static final int DEFAULT_CAPACITY = 10;`\n\n* 存放元素的数组：`transient Object[] elementData;`\n\n* 实际元素个数：`private int size;`\n\n* 创建对象时调用的无参构造函数：\n\n```java\n//这是一个空的数组\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n```\n\n这段源码说明当你没有向集合中添加任何元素时，集合容量为0。那么默认的10个容量怎么来的呢？\n\n这就得看看add方法的源码了：\n\n```java\npublic boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n```\n\n假设你new了一个数组，当前容量为0，size当然也为0。这时调用add方法进入到`ensureCapacityInternal(size + 1);`该方法源码如下：\n\n```java\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n```\n\n该方法中的参数minCapacity传入的值为size+1也就是 1，接着我们再进入到`calculateCapacity(elementData, minCapacity)`里面：\n\n```java\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n```\n\n上文说过，elementData就是存放元素的数组，当前容量为0，if条件成立，返回默认容量`DEFAULT_CAPACITY`也就是10。这个值作为参数又传入`ensureExplicitCapacity()`方法中，进入该方法查看源码：\n\n```java\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n```\n\n因为elementData数组长度为0，所以if条件成立，调用grow方法，**重要的部分来了**，我们再次进入到grow方法的源码中：\n\n```java\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n这个方法先声明了一个oldCapacity变量将数组长度赋给它，其值为0；又声明了一个newCapacity变量其值为`oldCapacity+一个增量`，可以发现这个增量是和原数组长度有关的量，当然在这里也为0。第一个if条件满足，newCapacity的值为10（这就是默认的容量，不理解的话再看看前面）。第二个if条件不成立，也可以不用注意，因为MAX_ARRAY_SIZE的定义如下：\n\n```java\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n```\n\n最后一句话就是为elementData数组赋予了新的长度，`Arrays.copyOf()`方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。`copyOf()`的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。\n\n这时候再回到add的方法中，接着就向下执行`elementData[size++] = e;`ArrayList当数组长度为10每次的增量每次扩容为原来的1.5倍。\n\n***\n\n## Vector\n\n* 数组结构实现，查询快、增删慢；\n* JDK1.0版本，运行效率慢、线程安全。\n\n```java\n/**\n * Vector的演示使用\n * \n *1.添加数据\n *2.删除数据\n *3.遍历\n *4.判断\n */\npublic class Demo1 {\n\tpublic static void main(String[] args) {\n\t\tVector vector=new Vector<>();\n\t\t//1.添加数据\n\t\tvector.add(\"tang\");\n\t\tvector.add(\"he\");\n\t\tvector.add(\"yu\");\n\t\tSystem.out.println(\"元素个数：\"+vector.size());\n\t\t//2.删除数据\n\t\t/*\n\t\t * vector.remove(0); vector.remove(\"tang\");\n\t\t */\n\t\t//3.遍历\n\t\t//使用枚举器\n\t\tEnumeration enumeration=vector.elements();\n\t\twhile (enumeration.hasMoreElements()) {\n\t\t\tString s = (String) enumeration.nextElement();\n\t\t\tSystem.out.println(s);\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(vector.isEmpty());\n\t\tSystem.out.println(vector.contains(\"he\"));\n\t\t//5. Vector其他方法\n\t\t//firstElement()  lastElement()  ElementAt();\n\t}\n}\n```\n\n***\n\n## LinkedList\n\n* 链表结构实现，增删快，查询慢。\n\n  ```java\n  /**\n   * LinkedList的用法\n   * 存储结构：双向链表\n   * 1.添加元素\n   * 2.删除元素\n   * 3.遍历\n   * 4.判断\n   */\n  public class Demo2 {\n  \tpublic static void main(String[] args) {\n  \t\tLinkedList linkedList=new LinkedList<>();\n  \t\tStudent s1=new Student(\"陈冠希\", 21);\n  \t\tStudent s2=new Student(\"梁朝伟\", 22);\n  \t\tStudent s3=new Student(\"刘德华\", 21);\n  \t\t//1.添加元素\n  \t\tlinkedList.add(s1);\n  \t\tlinkedList.add(s2);\n  \t\tlinkedList.add(s3);\n  \t\tlinkedList.add(s3);\n  \t\tSystem.out.println(\"元素个数：\"+linkedList.size());\n  \t\tSystem.out.println(linkedList.toString());\n  \t\t//2.删除元素\n  \t\t/*\n  \t\t * linkedList.remove(new Student(\"唐\", 21));\n  \t\t * System.out.println(linkedList.toString());\n  \t\t */\n  \t\t//3.遍历\n  \t\t//3.1 使用for\n  \t\tfor(int i=0;i<linkedList.size();++i) {\n  \t\t\tSystem.out.println(linkedList.get(i));\n  \t\t}\n  \t\t//3.2 使用增强for\n  \t\tfor(Object object:linkedList) {\n  \t\t\tStudent student=(Student) object;\n  \t\t\tSystem.out.println(student.toString());\n  \t\t}\n  \t\t//3.3 使用迭代器\n  \t\tIterator iterator =linkedList.iterator();\n  \t\twhile (iterator.hasNext()) {\n  \t\t\tStudent student = (Student) iterator.next();\n  \t\t\tSystem.out.println(student.toString());\n  \t\t}\n  \t\t//3.4 使用列表迭代器（略）\n  \t\t//4. 判断\n  \t\tSystem.out.println(linkedList.contains(s1));\n  \t\tSystem.out.println(linkedList.isEmpty());\n  \t\tSystem.out.println(linkedList.indexOf(s3));\n  \t}\n  }\n  ```\n\n## LinkedList源码分析\n\n​\tLinkedList首先有三个属性：\n\n* 链表大小：`transient int size = 0;`\n* （指向）第一个结点/头结点：`transient Nod<E> first;`\n* （指向）最后一个结点/尾结点：`transient Node<E> last;`\n\n关于Node类型我们再进入到类里看看：\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n首先item存放的是实际数据；next指向下一个结点而prev指向上一个结点。\n\nNode带参构造方法的三个参数分别是前一个结点、存储的数据、后一个结点，调用这个构造方法时将它们赋值给当前对象。\n\nLinkedList是如何添加元素的呢？先看看add方法：\n\n```java\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n```\n\n进入到linkLast方法：\n\n```java\nvoid linkLast(E e) {\n    final Node<E> l = last;\n    final Node<E> newNode = new Node<>(l, e, null);\n    last = newNode;\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;\n    size++;\n    modCount++;\n}\n```\n\n假设刚开始new了一个LinkedList对象，first和last属性都为空，调用add进入到linkLast方法。\n\n首先创建一个Node变量 l 将last（此时为空）赋给它，然后new一个newNode变量存储数据，并且它的前驱指向l，后继指向null；再把last指向newNode。如下图所示：\n\n![](/img/java集合/java集合图2.PNG)\n\n如果满足if条件，说明这是添加的第一个结点，将first指向newNode：\n\n![](/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE3.PNG)\n\n至此，LinkedList对象的第一个数据添加完毕。假设需要再添加一个数据，我们可以再来走一遍，过程同上不再赘述，图示如下：\n\n![](/img/java集合/Java集合图4.PNG)\n\n***\n\n## ArrayList和LinkedList区别\n\n* ArrayList：必须开辟连续空间，查询快，增删慢。\n\n* LinkedList：无需开辟连续空间，查询慢，增删快。\n\n  ![](/img/java集合/java集合图5.PNG)\n\n***\n\n## 泛型概述\n\n* Java泛型式JDK1.5中引入的一个新特性，其本质式参数化类型，把类型作为参数传递。\n\n* 常见形式又泛型类、泛型接口、泛型方法。\n\n* 语法:\n\n  ​\t`<T,…> T称为类型占位符，表示一种引用类型。`\n\n* 好处：\n\n   `提高代码的重用性。`\n\n  `防止类型转换异常，提高代码的安全性。`\n\n### 泛型类\n\n```java\n/**\n * 泛型类\n * 语法：类名<T>\n * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开\n * \n */\npublic class myGeneric<T>{\n\t\t//1.创建泛型变量\n\t\t//不能使用new来创建，因为泛型式不确定的类型，野可能拥有私密的构造方法。\n\t\tT t\n\t\t//2.泛型作为方法的参数\n\t\tpublic void show(T t){\n     \tSystem.out.println(t);\n\t\t}\n\t\t//泛型作为方法的返回值\n\t\tpublic T getT(){\n\t\t\t\treturn t;\n\t\t}\n}\n```\n\n&nbsp;\n\n```\n/**\n * 注意：\n * 1.泛型只能使用引用类型\n * 2.不同泛型类型的对象不能相互赋值\n */\npublic class testGeneric {\n\tpublic static void main(String[] args) {\n\t\t//使用泛型类创建对象\n\t\tmyGeneric<String> myGeneric1=new myGeneric<String>();\n\t\tmyGeneric1.t=\"tang\";\n\t\tmyGeneric1.show(\"he\");\n\t\t\n\t\tmyGeneric<Integer> myGeneric2=new myGeneric<Integer>();\n\t\tmyGeneric2.t=10;\n\t\tmyGeneric2.show(20);\n\t\tInteger integer=myGeneric2.getT();\n\t}\n}\n```\n\n泛型接口\n\n```java\n/**\n * 泛型接口\n * 语法：接口名<T>\n * 注意：不能创建泛型静态常量\n */\npublic interface MyInterface<T>{\n    //创建常量\n    \tString nameString=\"tang\";\n    \t\n    \tT server(T t);\n}\n```\n\n```java\n/**\n * 实现接口时确定泛型类\n */\n public clas MyInterfaceImpl implements MyInterface<String>{\n \t\t@Override\n\t\tpublic String server(String t) {\n\t\t\t\tSystem.out.println(t);\n\t\t\t\treturn t; \n\t}\n }\n```\n\n```java\n//测试\nMyInterfaceImpl myInterfaceImpl=new MyInterfaceImpl();\nmyInterfaceImpl.server(\"xxx\");\n//xxx\n```\n\n```java\n/**\n * 实现接口时不确定泛型类\n */\npublic class MyInterfaceImpl2<T> implements MyInterface<T>{\n\t@Override\n\tpublic T server(T t) {\n\t\tSystem.out.println(t);\n\t\treturn t;\n\t}\n}\n```\n\n```java\n//测试\nMyInterfaceImpl2<Integer> myInterfaceImpl2=new MyInterfaceImpl2<Integer>();\nmyInterfaceImpl2.server(2000);\n//2000\n```\n\n泛型方法\n\n```java\n/**\n * 泛型方法\n * 语法：<T> 返回类型\n */\npublic class MyGenericMethod {\n\tpublic <T> void show(T t) {\n\t\tSystem.out.println(\"泛型方法\"+t);\n\t}\n}\n```\n\n```java\n//测试\nMyGenericMethod myGenericMethod=new MyGenericMethod();\nmyGenericMethod.show(\"tang\");\nmyGenericMethod.show(200);\nmyGenericMethod.show(3.14);\n```\n\n##### **泛型集合**\n\n- **概念**：参数化类型、类型安全的集合，强制集合元素的类型必须一致。\n\n- 特点\n\n  ：\n\n  - 编译时即可检查，而非运行时抛出异常。\n  - 访问时，不必类型转换（拆箱）。\n  - 不同泛型指尖引用不能相互赋值，泛型不存在多态。\n\n之前我们在创建LinkedList类型对象的时候并没有使用泛型，但是进到它的源码中会发现：\n\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable{//略}\n```\n\n它是一个泛型类，而我之前使用的时候并没有传递，说明java语法是允许的，这个时候传递的类型是Object类，虽然它是所有类的父类，可以存储任意的类型，但是在遍历、获取元素时需要原来的类型就要进行强制转换。这个时候就会出现一些问题，假如往链表里存储了许多不同类型的数据，在强转的时候就要判断每一个原来的类型，这样就很容易出现错误。\n\n***\n\n## Set集合概述\n\n### Set子接口\n\n* 特点：无序、无下标、元素不可重复。\n\n* 方法：全部继承自Collection中的方法。\n\n  ```java\n  /**\n   * 测试Set接口的使用\n   * 特点：1.无序，没有下标；2.重复\n   * 1.添加数据\n   * 2.删除数据\n   * 3.遍历【重点】\n   * 4.判断\n   */\n  public class Demo1 {\n  \tpublic static void main(String[] args) {\n  \t\tSet<String> set=new HashSet<String>();\n  \t\t//1.添加数据\n  \t\tset.add(\"tang\");\n  \t\tset.add(\"he\");\n  \t\tset.add(\"yu\");\n  \t\tSystem.out.println(\"数据个数：\"+set.size());\n  \t\tSystem.out.println(set.toString());//无序输出\n  \t\t//2.删除数据\n  \t\t/*\n  \t\t * set.remove(\"tang\"); System.out.println(set.toString());\n  \t\t */\n  \t\t//3.遍历【重点】\n  \t\t//3.1 使用增强for\n  \t\tfor (String string : set) {\n  \t\t\tSystem.out.println(string);\n  \t\t}\n  \t\t//3.2 使用迭代器\n  \t\tIterator<String> iterator=set.iterator();\n  \t\twhile (iterator.hasNext()) {\n  \t\t\tSystem.out.println(iterator.next());\n  \t\t}\n  \t\t//4.判断\n  \t\tSystem.out.println(set.contains(\"tang\"));\n  \t\tSystem.out.println(set.isEmpty());\n  \t}\n  }\n  ```\n\n## Set实现类\n\n### HashSet【重点】\n\n* 基于HashCode计算元素存放位置。\n* 当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入。\n\n```java\n/**\n * 人类\n */\npublic class Person {\n\tprivate String name;\n\tprivate int age;\n\tpublic Person(String name,int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Peerson [name=\" + name + \", age=\" + age + \"]\";\n\t}\n}\n```\n\n```java\n/**\n * HashSet集合的使用\n * 存储结构：哈希表（数组+链表+红黑树）\n * 1.添加元素\n * 2.删除元素\n * 3.遍历\n * 4.判断\n*/\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tHashSet<Person> hashSet=new HashSet<>();\n\t\tPerson p1=new Person(\"陈冠希\",21);\n\t\tPerson p2=new Person(\"刘德华\", 22);\n\t\tPerson p3=new Person(\"吴彦祖\", 21);\n\t\t//1.添加元素\n\t\thashSet.add(p1);\n\t\thashSet.add(p2);\n\t\thashSet.add(p3);\n        //重复，添加失败\n        hashSet.add(p3);\n        //直接new一个相同属性的对象，依然会被添加，不难理解。\n        //假如相同属性便认为是同一个对象，怎么修改？\n        hashSet.add(new Person(\"吴彦祖\", 21));\n\t\tSystem.out.println(hashSet.toString());\n\t\t//2.删除元素\n\t\thashSet.remove(p2);\n\t\t//3.遍历\n\t\t//3.1 增强for\n\t\tfor (Person person : hashSet) {\n\t\t\tSystem.out.println(person);\n\t\t}\n\t\t//3.2 迭代器\n\t\tIterator<Person> iterator=hashSet.iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t\tSystem.out.println(iterator.next());\t\t\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(hashSet.isEmpty());\n        //直接new一个相同属性的对象结果输出是false，不难理解。\n        //注：假如相同属性便认为是同一个对象，该怎么做？\n\t\tSystem.out.println(hashSet.contains(new Person(\"吴彦祖\", 21)));\n\t}\n}\n```\n\n**注**：hashSet存储过程：\n\n1. 根据hashCode计算保存的位置，如果位置为空，则直接保存，否则执行第二步。\n2. 执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。\n\n存储过程实际上就是重复依据，要实现“注”里的问题，可以重写hashCode和equals代码：\n\n```java\n@Override\npublic int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + age;\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\n    return result;\n}\n@Override\npublic boolean equals(Object obj) {\n    if (this == obj)\n        return true;\n    if (obj == null)\n        return false;\n    if (getClass() != obj.getClass())\n        return false;\n    Person other = (Person) obj;\n    if (age != other.age)\n        return false;\n    if (name == null) {\n        if (other.name != null)\n            return false;\n    } else if (!name.equals(other.name))\n        return false;\n    return true;\n}\n```\n\nhashCode方法里为什么要使用31这个数字大概有两个原因：\n\n1. 31是一个质数，这样的数字在计算时可以尽量减少散列冲突。\n\n2. 可以提高执行效率，因为31*i=(i<<5)-i，31乘以一个数可以转换成移位操作，这样能快一点；但是也有网上一些人对这两点提出质疑。\n\n   \n\n   ### TreeSet\n\n   - 基于排序顺序实现不重复。\n   - 实现了SortedSet接口，对集合元素自动排序。\n   - 元素对象的类型必须实现Comparable接口，指定排序规则。\n   - 通过CompareTo方法确定是否为重复元素。\n\n```java\n/**\n * 使用TreeSet保存数据\n * 存储结构：红黑树\n * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 \n */\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tTreeSet<Person> persons=new TreeSet<Person>();\n\t\tPerson p1=new Person(\"tang\",21);\n\t\tPerson p2=new Person(\"he\", 22);\n\t\tPerson p3=new Person(\"yu\", 21);\n\t\t//1.添加元素\n\t\tpersons.add(p1);\n\t\tpersons.add(p2);\n\t\tpersons.add(p3);\n\t\t//注：直接添加会报类型转换错误，需要实现Comparable接口\n\t\tSystem.out.println(persons.toString());\n\t\t//2.删除元素\n\t\tpersons.remove(p1);\n\t\tpersons.remove(new Person(\"he\", 22));\n\t\tSystem.out.println(persons.toString());\n\t\t//3.遍历（略）\n\t\t//4.判断\n\t\tSystem.out.println(persons.contains(new Person(\"yu\", 21)));\n\t}\n}\n```\n\n查看Comparable接口的源码，发现只有一个compareTo抽象方法，在人类中实现它：\n\n```java\npublic class Person implements Comparable<Person>{\n    @Override\n\t//1.先按姓名比\n\t//2.再按年龄比\n\tpublic int compareTo(Person o) {\n\t\tint n1=this.getName().compareTo(o.getName());\n\t\tint n2=this.age-o.getAge();\n\t\treturn n1==0?n2:n1;\n\t}\n}\n```\n\n除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它：\n\n```java\n/**\n * TreeSet的使用\n * Comparator：实现定制比较（比较器）\n */\npublic class Demo5 {\n\tpublic static void main(String[] args) {\n\t\tTreeSet<Person> persons=new TreeSet<Person>(new Comparator<Person>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Person o1, Person o2) {\n\t\t\t\t// 先按年龄比较\n\t\t\t\t// 再按姓名比较\n\t\t\t\tint n1=o1.getAge()-o2.getAge();\n\t\t\t\tint n2=o1.getName().compareTo(o2.getName());\n\t\t\t\treturn n1==0?n2:n1;\n\t\t\t}\t\t\t\n\t\t});\n\t\tPerson p1=new Person(\"陈冠希\",21);\n\t\tPerson p2=new Person(\"吴彦祖\", 22);\n\t\tPerson p3=new Person(\"彭于晏\", 21);\n\t\tpersons.add(p1);\n\t\tpersons.add(p2);\n\t\tpersons.add(p3);\n\t\tSystem.out.println(persons.toString());\n\t}\n}\n```\n\n接下来我们来做一个小案例：\n\n```java\n/**\n * 要求：使用TreeSet集合实现字符串按照长度进行排序\n * helloworld tangrui hechengyang wangzixu yuguoming\n * Comparator接口实现定制比较\n */\npublic class Demo6 {\n\tpublic static void main(String[] args) {\n\t\tTreeSet<String> treeSet=new TreeSet<String>(new Comparator<String>() {\n\t\t\t@Override\n\t\t\t//先比较字符串长度\n\t\t\t//再比较字符串\n\t\t\tpublic int compare(String o1, String o2) {\n\t\t\t\tint n1=o1.length()-o2.length();\n\t\t\t\tint n2=o1.compareTo(o2);\n\t\t\t\treturn n1==0?n2:n1;\n\t\t\t}\t\t\t\n\t\t});\n\t\ttreeSet.add(\"hello\");\n\t\ttreeSet.add(\"chen\");\n\t\ttreeSet.add(\"liu\");\n\t\ttreeSet.add(\"peng\");\n\t\ttreeSet.add(\"liang\");\n\t\tSystem.out.println(treeSet.toString());\n        //输出[liu, chen, peng, hello, liang]\n\t}\n}\n```\n\n***\n\n## Map集合的实现类\n\n\n\n## HashMap 【重点】\n\n* JDK1.2版本，线程不安全，运行效率快；允许用null作为key或是value。\n\n```java\n/**\n   * 学生类\n   */\n  public class Student {\n  \tprivate String name;\n  \tprivate int id;\t\n  \tpublic Student(String name, int id) {\n  \t\tsuper();\n  \t\tthis.name = name;\n  \t\tthis.id = id;\n  \t}\n  \tpublic String getName() {\n  \t\treturn name;\n  \t}\n  \tpublic void setName(String name) {\n  \t\tthis.name = name;\n  \t}\n  \tpublic int getId() {\n  \t\treturn id;\n  \t}\n  \tpublic void setId(int id) {\n  \t\tthis.id = id;\n  \t}\n  \t@Override\n  \tpublic String toString() {\n  \t\treturn \"Student [name=\" + name + \", age=\" + id + \"]\";\n  \t}\n  }\n```\n\n```java\n/**\n   * HashMap的使用\n   * 存储结构：哈希表（数组+链表+红黑树）\n   */\n  public class Demo2 {\n  \tpublic static void main(String[] args) {\n  \t\tHashMap<Student, String> hashMap=new HashMap<Student, String>();\n  \t\tStudent s1=new Student(\"tang\", 36);\n  \t\tStudent s2=new Student(\"yu\", 101);\n  \t\tStudent s3=new Student(\"he\", 10);\n  \t\t//1.添加元素\n  \t\thashMap.put(s1, \"成都\");\n  \t\thashMap.put(s2, \"杭州\");\n  \t\thashMap.put(s3, \"郑州\");\n  \t\t//添加失败，但会更新值\n  \t\thashMap.put(s3,\"上海\");\n  \t\t//添加成功，不过两个属性一模一样；\n  \t\t//注：假如相同属性便认为是同一个对象，怎么修改？\n  \t\thashMap.put(new Student(\"he\", 10),\"上海\");\n  \t\tSystem.out.println(hashMap.toString());\n  \t\t//2.删除元素\n  \t\thashMap.remove(s3);\n  \t\tSystem.out.println(hashMap.toString());\n  \t\t//3.遍历\n  \t\t//3.1 使用keySet()遍历\n  \t\tfor (Student key : hashMap.keySet()) {\n  \t\t\tSystem.out.println(key+\" \"+hashMap.get(key));\n  \t\t}\n  \t\t//3.2 使用entrySet()遍历\n  \t\tfor (Entry<Student, String> entry : hashMap.entrySet()) {\n  \t\t\tSystem.out.println(entry.getKey()+\" \"+entry.getValue());\n  \t\t}\n  \t\t//4.判断\n  \t\t//注：同上\n  \t\tSystem.out.println(hashMap.containsKey(new Student(\"he\", 10)));\n  \t\tSystem.out.println(hashMap.containsValue(\"成都\"));\n  \t}\n  }\n```\n\n注：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：\n\n```java\n@Override\n  public int hashCode() {\n      final int prime = 31;\n      int result = 1;\n      result = prime * result + id;\n      result = prime * result + ((name == null) ? 0 : name.hashCode());\n      return result;\n  }\n  @Override\n  public boolean equals(Object obj) {\n      if (this == obj)\n          return true;\n      if (obj == null)\n          return false;\n      if (getClass() != obj.getClass())\n          return false;\n      Student other = (Student) obj;\n      if (id != other.id)\n          return false;\n      if (name == null) {\n          if (other.name != null)\n              return false;\n      } else if (!name.equals(other.name))\n          return false;\n      return true;\n  }\n```\n\n## HashMap 源码分析\n\n* 默认初始化容量：`static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16`\n\n- 数组最大容量：`static final int MAXIMUM_CAPACITY = 1 << 30;`\n\n* 默认加载因子：`static final float DEFAULT_LOAD_FACTOR = 0.75f;`\n\n* 链表调整为红黑树的链表长度阈值（JDK1.8）：`static final int TREEIFY_THRESHOLD = 8;`\n\n* 红黑树调整为链表的链表长度阈值（JDK1.8）：`static final int UNTREEIFY_THRESHOLD = 6;`\n\n* 链表调整为红黑树的数组最小阈值（JDK1.8）：`static final int MIN_TREEIFY_CAPACITY = 64;`\n\n* HashMap存储的数组：`transient Node<K,V>[] table;`\n\n* HashMap存储的元素个数：`transient int size;`\n\n> - 默认加载因子是什么？\n>   - 就是判断数组是否扩容的一个因子。假如数组容量为100，如果HashMap的存储元素个数超过了100*0.75=75，那么就会进行扩容。\n> - 链表调整为红黑树的链表长度阈值是什么？\n>   - 假设在数组中下标为3的位置已经存储了数据，当新增数据时通过哈希码得到的存储位置又是3，那么就会在该位置形成一个链表，当链表过长时就会转换成红黑树以提高执行效率，这个阈值就是链表转换成红黑树的最短链表长度；\n> - 红黑树调整为链表的链表长度阈值是什么？\n>   - 当红黑树的元素个数小于该阈值时就会转换成链表。\n> - 链表调整为红黑树的数组最小阈值是什么？\n>   - 并不是只要链表长度大于8就可以转换成红黑树，在前者条件成立的情况下，数组的容量必须大于等于64才会进行转换。\n\n\n\nHashMap的数组table存储的就是一个个的Node<K,V>类型，很清晰地看到有一对键值，还有一个指向next的指针（以下只截取了部分源码）：\n\n```java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n      final K key;\n      V value;\n      Node<K,V> next;\n  }\n```\n\n之前的代码中在new对象时调用的是HashMap的无参构造方法，进入到该构造方法的源码查看一下：\n\n```java\npublic HashMap() {\n      this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n  }\n```\n\n发现没什么内容，只是赋值了一个默认加载因子；而在上文我们观察到源码中table和size都没有赋予初始值，说明刚创建的HashMap对象没有分配容量，并不拥有默认的16个空间大小，这样做的目的是为了节约空间，此时table为null，size为0。\n\n当我们往对象里添加元素时调用put方法：\n\n```java\npublic V put(K key, V value) {\n      return putVal(hash(key), key, value, false, true);\n  }\n```\n\nput方法把key和value传给了putVal，同时还传入了一个hash(Key)所返回的值，这是一个产生哈希值的方法，再进入到putVal方法（部分源码）：\n\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                    boolean evict) {\n      Node<K,V>[] tab; Node<K,V> p; int n, i;\n      if ((tab = table) == null || (n = tab.length) == 0)\n          n = (tab = resize()).length;\n      if ((p = tab[i = (n - 1) & hash]) == null)\n          tab[i] = newNode(hash, key, value, null);\n      else{\n          //略\n      }\n  }\n```\n\n这里面创建了一个tab数组和一个Node变量p，第一个if实际是判断table是否为空，而我们现在只关注刚创建HashMap对象时的状态，此时tab和table都为空，满足条件，执行内部代码，这条代码其实就是把resize()所返回的结果赋给tab，n就是tab的长度，resize顾名思义就是重新调整大小。查看resize()源码（部分）：\n\n```java\nfinal Node<K,V>[] resize() {\n      Node<K,V>[] oldTab = table;\n      int oldCap = (oldTab == null) ? 0 : oldTab.length;\n      int oldThr = threshold;\n      if (oldCap > 0);\n      else if (oldThr > 0);\n      else {               // zero initial threshold signifies using defaults\n          newCap = DEFAULT_INITIAL_CAPACITY;\n          newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n      } \n      @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n      Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n      table = newTab;\n      return newTab;\n  }\n```\n\n该方法首先把table及其长度赋值给oldTab和oldCap；threshold是阈值的意思，此时为0，所以前两个if先不管，最后else里newCap的值为默认初始化容量16；往下创建了一个newCap大小的数组并将其赋给了table，刚创建的HashMap对象就在这里获得了初始容量。然后我们再回到putVal方法，第二个if就是根据哈希码得到的tab中的一个位置是否为空，为空便直接添加元素，此时数组中无元素所以直接添加。至此HashMap对象就完成了第一个元素的添加。当添加的元素超过16*0.75=12时，就会进行扩容：\n\n```java\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict){\n      if (++size > threshold)\n          resize();\n  }\n```\n\n扩容的代码如下（部分）：\n\n```java\nfinal Node<K,V>[] resize() {\n      int oldCap = (oldTab == null) ? 0 : oldTab.length;\n      int newCap;\n      if (oldCap > 0) {\n          if (oldCap >= MAXIMUM_CAPACITY) {//略}\n          else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                   oldCap >= DEFAULT_INITIAL_CAPACITY)\n      }\n  }\n```\n\n核心部分是else if里的移位操作，**也就是说每次扩容都是原来大小的两倍**。\n\n* 注**：额外说明的一点是在JDK1.8以前链表是头插入，JDK1.8以后链表是尾插入。\n\n***\n\n#### **HashSet源码分析**\n\n```java\npublic class HashSet<E>\n      extends AbstractSet<E>\n      implements Set<E>, Cloneable, java.io.Serializable\n  {\n      private transient HashMap<E,Object> map;\n      private static final Object PRESENT = new Object();\n      public HashSet() {\n          map = new HashMap<>();\n      }\n  }\n```\n\nHashSet的存储结构就是HashMap，那它的存储方式是怎样的呢？可以看一下add方法：\n\n```java\npublic boolean add(E e) {\n      return map.put(e, PRESENT)==null;\n  }\n```\n\n很明了地发现它的add方法调用的就是map的put方法，把元素作为map的key传进去的。。\n\n## Hashtable\n\n- JDK1.0版本，线程安全，运行效率慢；不允许null作为key或是value。\n\n- 初始容量11，加载因子0.75。\n\n  这个集合在开发过程中已经不用了，稍微了解即可。\n\n### **Properties**\n\n- Hashtable的子类，要求key和value都是String。通常用于配置文件的读取。\n\n它继承了Hashtable的方法，与流关系密切，此处不详解。\n\n### TreeMap\n\n- 实现了SortedMap接口（是Map的子接口），可以对key自动排序。\n\n```java\n/**\n * TreeMap的使用\n * 存储结构：红黑树\n */\npublic class Demo3 {\n\tpublic static void main(String[] args) {\n\t\tTreeMap<Student, Integer> treeMap=new TreeMap<Student, Integer>();\n\t\tStudent s1=new Student(\"tang\", 36);\n\t\tStudent s2=new Student(\"yu\", 101);\n\t\tStudent s3=new Student(\"he\", 10);\n\t\t//1.添加元素\n\t\ttreeMap.put(s1, 21);\n\t\ttreeMap.put(s2, 22);\n\t\ttreeMap.put(s3, 21);\n\t\t//不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小\n\t\tSystem.out.println(treeMap.toString());\n\t\t//2.删除元素\n\t\ttreeMap.remove(new Student(\"he\", 10));\n\t\tSystem.out.println(treeMap.toString());\n\t\t//3.遍历\n\t\t//3.1 使用keySet()\n\t\tfor (Student key : treeMap.keySet()) {\n\t\t\tSystem.out.println(key+\" \"+treeMap.get(key));\n\t\t}\n\t\t//3.2 使用entrySet()\n\t\tfor (Entry<Student, Integer> entry : treeMap.entrySet()) {\n\t\t\tSystem.out.println(entry.getKey()+\" \"+entry.getValue());\n\t\t}\n\t\t//4.判断\n\t\tSystem.out.println(treeMap.containsKey(s1));\n\t\tSystem.out.println(treeMap.isEmpty());\t\t\n\t}\n}\n```\n\n在学生类中实现Comparable接口：\n\n```java\npublic class Student implements Comparable<Student>{\n    @Override\n    public int compareTo(Student o) {\n        int n1=this.id-o.id;\n        return n1;\n}\n```\n\n除此之外还可以使用比较器来定制比较：\n\n```java\nTreeMap<Student, Integer> treeMap2=new TreeMap<Student, Integer>(new Comparator<Student>() {\n    @Override\n    public int compare(Student o1, Student o2) {\n        // 略\n        return 0;\n    }\t\t\t\n});\n```\n\n### TreeSet源码\n\n与HashSet类似\n\n```java\npublic class TreeSet<E> extends AbstractSet<E>\n    implements NavigableSet<E>, Cloneable, java.io.Serializable\n{\n    private transient NavigableMap<E,Object> m;\n    private static final Object PRESENT = new Object();\n    TreeSet(NavigableMap<E,Object> m) {\n        this.m = m;\n    }\n    public TreeSet() {\n        this(new TreeMap<E,Object>());\n    }\n}\n```\n\nTreeSet的存储结构实际上就是TreeMap，再来看其存储方式：\n\n```java\npublic boolean add(E e) {\n    return m.put(e, PRESENT)==null;\n}\n```\n\n它的add方法调用的就是TreeMap的put方法，将元素作为key传入到存储结构中。\n\n***\n\n## **Collections工具类**\n\n**概念**：集合工具类，定义了除了存取以外的集合常用方法。\n\n**方法**：\n\n- `public static void reverse(List<?> list)`//反转集合中元素的顺序\n- `public static void shuffle(List<?> list)`//随机重置集合元素的顺序\n- `public static void sort(List<T> list)`//升序排序（元素类型必须实现Comparable接口）\n\n```java\n/**\n * 演示Collections工具类的使用\n *\n */\npublic class Demo4 {\n\tpublic static void main(String[] args) {\n\t\tList<Integer> list=new ArrayList<Integer>();\n\t\tlist.add(20);\n\t\tlist.add(10);\n\t\tlist.add(30);\n\t\tlist.add(90);\n\t\tlist.add(70);\n\t\t\n\t\t//sort排序\n\t\tSystem.out.println(list.toString());\n\t\tCollections.sort(list);\n\t\tSystem.out.println(list.toString());\n\t\tSystem.out.println(\"---------\");\n\t\t\n\t\t//binarySearch二分查找\n\t\tint i=Collections.binarySearch(list, 10);\n\t\tSystem.out.println(i);\n\t\t\n\t\t//copy复制\n\t\tList<Integer> list2=new ArrayList<Integer>();\n\t\tfor(int i1=0;i1<5;++i1) {\n\t\t\tlist2.add(0);\n\t\t}\n\t\t//该方法要求目标元素容量大于等于源目标\n\t\tCollections.copy(list2, list);\n\t\tSystem.out.println(list2.toString());\n\t\t\n\t\t//reserve反转\n\t\tCollections.reverse(list2);\n\t\tSystem.out.println(list2.toString());\n\t\t\n\t\t//shuffle 打乱\n\t\tCollections.shuffle(list2);\n\t\tSystem.out.println(list2.toString());\n\t\t\n\t\t//补充：list转成数组\n\t\tInteger[] arr=list.toArray(new Integer[0]);\n\t\tSystem.out.println(arr.length);\n\t\t//补充：数组转成集合 \n\t\tString[] nameStrings= {\"tang\",\"he\",\"yu\"};\n\t\t//受限集合，不能添加和删除\n\t\tList<String> list3=Arrays.asList(nameStrings);\n\t\tSystem.out.println(list3);\n\t\t\n\t\t//注：基本类型转成集合时需要修改为包装类\n\t}\n}\n```\n\n本文已完结\n\n* 本文源于:https://lazydog036.gitee.io/2020/10/29/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/\n\n","slug":"JAVA集合-0","published":1,"updated":"2022-05-30T08:49:51.148Z","_id":"cl3kwbmx000015cu3cojahhni","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java集合\"><a href=\"#Java集合\" class=\"headerlink\" title=\"Java集合\"></a>Java集合</h1><hr>\n<h3 id=\"集合概述\"><a href=\"#集合概述\" class=\"headerlink\" title=\"集合概述\"></a>集合概述</h3><ul>\n<li><p>概念：对象的容器，定义了多个对象进行操作的常用方法。可实现  数组的功能。</p>\n</li>\n<li><p>和数组的区别：</p>\n<p>1.数组长度固定，集合长度不固定。</p>\n<p>2.数组可以存储基本类型和引用类型，集合只能存储引用类型。</p>\n</li>\n<li><p>Java引用包：java.util.*;</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Collection体系集合\"><a href=\"#Collection体系集合\" class=\"headerlink\" title=\"Collection体系集合\"></a>Collection体系集合</h2><p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE1.PNG\"></p>\n<hr>\n<h2 id=\"Collection父接口\"><a href=\"#Collection父接口\" class=\"headerlink\" title=\"Collection父接口\"></a>Collection父接口</h2><ul>\n<li><p>特点：代表一组任意类型的对象，无序、无下标、不能重复。</p>\n</li>\n<li><p>方法：</p>\n<ul>\n<li><code>boolean add(Object obj) //添加一个对象。</code></li>\n<li><code>boolean addAll(Collection c) //讲一个集合中的所有对象添加到此集合中。</code></li>\n<li><code>void clear() //清空此集合中的所有对象。</code></li>\n<li><code>boolean contains(Object o) //检查此集合中是否包含o对象。</code></li>\n<li><code>boolean equals(Object o) //比较此集合是否与指定对象相等。</code></li>\n<li><code>boolean isEmpty() //判断此集合是否为空。</code></li>\n<li><code>boolean remove(Object o) //在此集合中移除o对象。</code></li>\n<li><code>int size() //返回此集合中的元素个数。</code></li>\n<li><code>Object[] toArray() //姜此集合转换成数组。</code></li>\n</ul>\n</li>\n</ul>\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Collection接口的使用（一）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span>&#123;<br>    pubic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>        <span class=\"hljs-comment\">//创建集合</span><br>        Collection collection=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();        <br><span class=\"hljs-comment\">//      * 1.添加元素</span><br>        Collection.add(<span class=\"hljs-string\">&quot;苹果&quot;</span>);<br>        Collection.add(<span class=\"hljs-string\">&quot;西瓜&quot;</span>);<br>        Collection.add(<span class=\"hljs-string\">&quot;榴莲&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+collection.size());<br>        System.out.println(collection);<br><span class=\"hljs-comment\">//      * 2.删除元素</span><br>        collection.remove(<span class=\"hljs-string\">&quot;榴莲&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;删除之后：&quot;</span>+collection.size());<br><span class=\"hljs-comment\">//      * 3.遍历元素</span><br>        <span class=\"hljs-comment\">//3.1 使用增强for </span><br>        <span class=\"hljs-keyword\">for</span>(Object object : collection)&#123;<br>            System.out.println(object);<br>        &#125;<br>        <span class=\"hljs-comment\">//3.2 使用迭代器（迭代器专门用来遍历集合的一种方式）</span><br>        <span class=\"hljs-comment\">//hasnext();判断是否有下一个元素</span><br>        <span class=\"hljs-comment\">//next();获取下一个元素</span><br>        <span class=\"hljs-comment\">//remove();删除当前元素</span><br>        Iterator iterator=collection.Itertor();<br>        <span class=\"hljs-keyword\">while</span>(iterator.hasnext())&#123;<br>            String object=(String)iterator.next();<br>            System.out.println(s);<br>            <span class=\"hljs-comment\">//删除操作</span><br>            <span class=\"hljs-comment\">//collection.remove(s);引发错误：并发修改异常</span><br>            <span class=\"hljs-comment\">//iterator.remove();应使用迭代器的方法</span><br><span class=\"hljs-comment\">//      * 4.判断</span><br>        System.out.println(collection.contains(<span class=\"hljs-string\">&quot;西瓜&quot;</span>));<span class=\"hljs-comment\">//true</span><br>        System.out.println(collection.isEmpty());<span class=\"hljs-comment\">//false</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Collection接口的使用（二）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo2</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tCollection collection=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();<br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;张三&quot;</span>,<span class=\"hljs-number\">18</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-number\">20</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-number\">19</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加数据</span><br>\t\tcollection.add(s1);<br>\t\tcollection.add(s2);<br>\t\tcollection.add(s3);<br>\t\t<span class=\"hljs-comment\">//collection.add(s3);可重复添加相同对象</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+collection.size());<br>\t\tSystem.out.println(collection.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除数据</span><br>\t\tcollection.remove(s1);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;删除之后：&quot;</span>+collection.size());<br>\t\t<span class=\"hljs-comment\">//3.遍历数据</span><br>\t\t<span class=\"hljs-comment\">//3.1 增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(Object object:collection) &#123;<br>\t\t\tStudent student=(Student) object;<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2迭代器</span><br>\t\t<span class=\"hljs-comment\">//迭代过程中不能使用collection的删除方法</span><br>\t\tIterator iterator=collection.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tStudent student=(Student) iterator.next();<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断和上一块代码类似。</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 学生类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> String name;<br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">super</span>();<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student [name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<span class=\"hljs-string\">&quot;]&quot;</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"Collection子接口\"><a href=\"#Collection子接口\" class=\"headerlink\" title=\"Collection子接口\"></a>Collection子接口</h2><h2 id=\"List-集合\"><a href=\"#List-集合\" class=\"headerlink\" title=\"List 集合\"></a>List 集合</h2><ul>\n<li>特点：有序、有下标、元素可以重复。</li>\n<li>方法:<ul>\n<li><code>void add(int index,Object o) //在index位置插入对象o。</code></li>\n<li><code>boolean addAll(index,Collection c) //将一个集合中的元素添加到此集合中的index位置。</code></li>\n<li><code>Object get(int index) //返回集合中指定位置的元素。</code></li>\n<li><code>List subList(int fromIndex,int toIndex) //返回fromIndex和toIndex之间的集合元素。 </code> </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * List子接口的使用（一）</span><br><span class=\"hljs-comment\"> * 特点：1.有序有下标 2.可以重复</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> * 5.获取位置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo3</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tList list=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tlist.add(<span class=\"hljs-string\">&quot;杨&quot;</span>);<br>\t\tlist.add(<span class=\"hljs-string\">&quot;李&quot;</span>);<br>\t\tlist.add(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;陈&quot;</span>);<span class=\"hljs-comment\">//插入操作</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tlist.remove(<span class=\"hljs-number\">0</span>);<br>\t\t<span class=\"hljs-comment\">//list.remove(&quot;李&quot;);结果同上</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;删除之后：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//3.遍历元素</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用for遍历</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;list.size();++i) &#123;<br>\t\t\tSystem.out.println(list.get(i));<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(Object object:list) &#123;<br>\t\t\tSystem.out.println(object);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.3 使用迭代器</span><br>\t\tIterator iterator=list.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.4使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。</span><br>\t\tListIterator listIterator=list.listIterator();<br>\t\t<span class=\"hljs-comment\">//从前往后</span><br>\t\t<span class=\"hljs-keyword\">while</span> (listIterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(listIterator.next());\t\t<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//从后往前（此时“遍历指针”已经指向末尾）</span><br>\t\t<span class=\"hljs-keyword\">while</span>(listIterator.hasPrevious()) &#123;<br>\t\t\tSystem.out.println(listIterator.previous());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(list.isEmpty());<br>\t\tSystem.out.println(list.contains(<span class=\"hljs-string\">&quot;杨&quot;</span>));<br>\t\t<span class=\"hljs-comment\">//5.获取位置</span><br>\t\tSystem.out.println(list.indexOf(<span class=\"hljs-string\">&quot;杨&quot;</span>));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * List子接口的使用（二）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> * 5.获取位置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo4</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tList list=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();<br>\t\t<span class=\"hljs-comment\">//1.添加数字数据（自动装箱）</span><br>\t\tlist.add(<span class=\"hljs-number\">20</span>);<br>\t\tlist.add(<span class=\"hljs-number\">30</span>);<br>\t\tlist.add(<span class=\"hljs-number\">40</span>);<br>\t\tlist.add(<span class=\"hljs-number\">50</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tlist.remove(<span class=\"hljs-number\">0</span>);<br>\t\t<span class=\"hljs-comment\">//list.remove(20);很明显数组越界错误，改成如下</span><br>\t\t<span class=\"hljs-comment\">//list.remove(Object(20));</span><br>\t\t<span class=\"hljs-comment\">//list.remove(new Integer(20));</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//3-5不再演示，与之前类似</span><br>\t\t<span class=\"hljs-comment\">//6.补充方法subList，返回子集合，含头不含尾</span><br>\t\tList list2=list.subList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);<br>\t\tSystem.out.println(list2.toString());\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"List实现类\"><a href=\"#List实现类\" class=\"headerlink\" title=\"List实现类\"></a>List实现类</h2><p>ArrayList 【重点】</p>\n<ul>\n<li><p>数组结构实现，查询快、增删慢；</p>\n</li>\n<li><p>JDK1.2版本，运行效率快、线程不安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * ArrayList的使用</span><br><span class=\"hljs-comment\"> * 存储结构：数组；</span><br><span class=\"hljs-comment\"> * 特点：查找遍历速度快，增删慢。</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> * 5.查找</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo5</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tArrayList arrayList=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;刘德华&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;梁朝伟&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tarrayList.add(s1);<br>\t\tarrayList.add(s2);<br>\t\tarrayList.add(s3);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+arrayList.size());<br>\t\tSystem.out.println(arrayList.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tarrayList.remove(s1);<br>\t\t<span class=\"hljs-comment\">//arrayList.remove(new Student(&quot;梁朝伟&quot;, 21));</span><br>\t\t<span class=\"hljs-comment\">//注：这样可以删除吗（不可以）？显然这是两个不同的对象。</span><br>\t\t<span class=\"hljs-comment\">//假如两个对象属性相同便认为其是同一对象，那么如何修改代码？</span><br>\t\t<span class=\"hljs-comment\">//3.遍历元素</span><br>\t\t<span class=\"hljs-comment\">//3.1使用迭代器</span><br>\t\tIterator iterator=arrayList.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span>(iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2使用列表迭代器</span><br>\t\tListIterator listIterator=arrayList.listIterator();<br>\t\t<span class=\"hljs-comment\">//从前往后遍历</span><br>\t\t<span class=\"hljs-keyword\">while</span>(listIterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(listIterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//从后往前遍历</span><br>\t\t<span class=\"hljs-keyword\">while</span>(listIterator.hasPrevious()) &#123;<br>\t\t\tSystem.out.println(listIterator.previous());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(arrayList.isEmpty());<br>\t\t<span class=\"hljs-comment\">//System.out.println(arrayList.contains(new Student(&quot;何&quot;, 22)));</span><br>\t\t<span class=\"hljs-comment\">//注：与上文相同的问题。</span><br>\t\t<span class=\"hljs-comment\">//5.查找</span><br>\t\tSystem.out.println(arrayList.indexOf(s1));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>注</strong>：Object里的equals(this==obj)用地址和当前对象比较，如果想实现代码中的问题，可以在学生类中重写equals方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> &#123;<br>\t<span class=\"hljs-comment\">//1.是否为同一对象</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>==obj) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//2.判断是否为空</span><br>\t<span class=\"hljs-keyword\">if</span> (obj==<span class=\"hljs-literal\">null</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//3.判断是否是Student类型</span><br>\t<span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">instanceof</span> Student) &#123;<br>\t\tStudent student=(Student) obj;<br>\t\t<span class=\"hljs-comment\">//4.比较属性</span><br>\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.name.equals(student.getName())&amp;&amp;<span class=\"hljs-built_in\">this</span>.age==student.age) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//不满足，返回false</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayList源码分析\"><a href=\"#ArrayList源码分析\" class=\"headerlink\" title=\"ArrayList源码分析\"></a>ArrayList源码分析</h2><ul>\n<li><p>默认容量大小：<code>private static final int DEFAULT_CAPACITY = 10;</code></p>\n</li>\n<li><p>存放元素的数组：<code>transient Object[] elementData;</code></p>\n</li>\n<li><p>实际元素个数：<code>private int size;</code></p>\n</li>\n<li><p>创建对象时调用的无参构造函数：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//这是一个空的数组</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ArrayList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段源码说明当你没有向集合中添加任何元素时，集合容量为0。那么默认的10个容量怎么来的呢？</p>\n<p>这就得看看add方法的源码了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>假设你new了一个数组，当前容量为0，size当然也为0。这时调用add方法进入到<code>ensureCapacityInternal(size + 1);</code>该方法源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">ensureCapacityInternal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>该方法中的参数minCapacity传入的值为size+1也就是 1，接着我们再进入到<code>calculateCapacity(elementData, minCapacity)</code>里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calculateCapacity</span><span class=\"hljs-params\">(Object[] elementData, <span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> minCapacity;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上文说过，elementData就是存放元素的数组，当前容量为0，if条件成立，返回默认容量<code>DEFAULT_CAPACITY</code>也就是10。这个值作为参数又传入<code>ensureExplicitCapacity()</code>方法中，进入该方法查看源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">ensureExplicitCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    modCount++;<br>    <span class=\"hljs-comment\">// overflow-conscious code</span><br>    <span class=\"hljs-keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"hljs-number\">0</span>)<br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>因为elementData数组长度为0，所以if条件成立，调用grow方法，<strong>重要的部分来了</strong>，我们再次进入到grow方法的源码中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">grow</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    <span class=\"hljs-comment\">// overflow-conscious code</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldCapacity</span> <span class=\"hljs-operator\">=</span> elementData.length;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">newCapacity</span> <span class=\"hljs-operator\">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"hljs-number\">0</span>)<br>        newCapacity = minCapacity;<br>    <span class=\"hljs-keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"hljs-number\">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class=\"hljs-comment\">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个方法先声明了一个oldCapacity变量将数组长度赋给它，其值为0；又声明了一个newCapacity变量其值为<code>oldCapacity+一个增量</code>，可以发现这个增量是和原数组长度有关的量，当然在这里也为0。第一个if条件满足，newCapacity的值为10（这就是默认的容量，不理解的话再看看前面）。第二个if条件不成立，也可以不用注意，因为MAX_ARRAY_SIZE的定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">MAX_ARRAY_SIZE</span> <span class=\"hljs-operator\">=</span> Integer.MAX_VALUE - <span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n<p>最后一句话就是为elementData数组赋予了新的长度，<code>Arrays.copyOf()</code>方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。<code>copyOf()</code>的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。</p>\n<p>这时候再回到add的方法中，接着就向下执行<code>elementData[size++] = e;</code>ArrayList当数组长度为10每次的增量每次扩容为原来的1.5倍。</p>\n<hr>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>数组结构实现，查询快、增删慢；</li>\n<li>JDK1.0版本，运行效率慢、线程安全。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Vector的演示使用</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> *1.添加数据</span><br><span class=\"hljs-comment\"> *2.删除数据</span><br><span class=\"hljs-comment\"> *3.遍历</span><br><span class=\"hljs-comment\"> *4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tVector vector=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>&lt;&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加数据</span><br>\t\tvector.add(<span class=\"hljs-string\">&quot;tang&quot;</span>);<br>\t\tvector.add(<span class=\"hljs-string\">&quot;he&quot;</span>);<br>\t\tvector.add(<span class=\"hljs-string\">&quot;yu&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+vector.size());<br>\t\t<span class=\"hljs-comment\">//2.删除数据</span><br>\t\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t * vector.remove(0); vector.remove(&quot;tang&quot;);</span><br><span class=\"hljs-comment\">\t\t */</span><br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//使用枚举器</span><br>\t\tEnumeration enumeration=vector.elements();<br>\t\t<span class=\"hljs-keyword\">while</span> (enumeration.hasMoreElements()) &#123;<br>\t\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> (String) enumeration.nextElement();<br>\t\t\tSystem.out.println(s);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(vector.isEmpty());<br>\t\tSystem.out.println(vector.contains(<span class=\"hljs-string\">&quot;he&quot;</span>));<br>\t\t<span class=\"hljs-comment\">//5. Vector其他方法</span><br>\t\t<span class=\"hljs-comment\">//firstElement()  lastElement()  ElementAt();</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><ul>\n<li><p>链表结构实现，增删快，查询慢。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * LinkedList的用法</span><br><span class=\"hljs-comment\"> * 存储结构：双向链表</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo2</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tLinkedList linkedList=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();<br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;梁朝伟&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;刘德华&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tlinkedList.add(s1);<br>\t\tlinkedList.add(s2);<br>\t\tlinkedList.add(s3);<br>\t\tlinkedList.add(s3);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+linkedList.size());<br>\t\tSystem.out.println(linkedList.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t * linkedList.remove(new Student(&quot;唐&quot;, 21));</span><br><span class=\"hljs-comment\">\t\t * System.out.println(linkedList.toString());</span><br><span class=\"hljs-comment\">\t\t */</span><br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;linkedList.size();++i) &#123;<br>\t\t\tSystem.out.println(linkedList.get(i));<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(Object object:linkedList) &#123;<br>\t\t\tStudent student=(Student) object;<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.3 使用迭代器</span><br>\t\t<span class=\"hljs-type\">Iterator</span> <span class=\"hljs-variable\">iterator</span> <span class=\"hljs-operator\">=</span>linkedList.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\t<span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> (Student) iterator.next();<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.4 使用列表迭代器（略）</span><br>\t\t<span class=\"hljs-comment\">//4. 判断</span><br>\t\tSystem.out.println(linkedList.contains(s1));<br>\t\tSystem.out.println(linkedList.isEmpty());<br>\t\tSystem.out.println(linkedList.indexOf(s3));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"LinkedList源码分析\"><a href=\"#LinkedList源码分析\" class=\"headerlink\" title=\"LinkedList源码分析\"></a>LinkedList源码分析</h2><p>​    LinkedList首先有三个属性：</p>\n<ul>\n<li>链表大小：<code>transient int size = 0;</code></li>\n<li>（指向）第一个结点/头结点：<code>transient Nod&lt;E&gt; first;</code></li>\n<li>（指向）最后一个结点/尾结点：<code>transient Node&lt;E&gt; last;</code></li>\n</ul>\n<p>关于Node类型我们再进入到类里看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class=\"hljs-built_in\">this</span>.item = element;<br>        <span class=\"hljs-built_in\">this</span>.next = next;<br>        <span class=\"hljs-built_in\">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>首先item存放的是实际数据；next指向下一个结点而prev指向上一个结点。</p>\n<p>Node带参构造方法的三个参数分别是前一个结点、存储的数据、后一个结点，调用这个构造方法时将它们赋值给当前对象。</p>\n<p>LinkedList是如何添加元素的呢？先看看add方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    linkLast(e);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>进入到linkLast方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">linkLast</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> Node&lt;E&gt; l = last;<br>    <span class=\"hljs-keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>&lt;&gt;(l, e, <span class=\"hljs-literal\">null</span>);<br>    last = newNode;<br>    <span class=\"hljs-keyword\">if</span> (l == <span class=\"hljs-literal\">null</span>)<br>        first = newNode;<br>    <span class=\"hljs-keyword\">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>假设刚开始new了一个LinkedList对象，first和last属性都为空，调用add进入到linkLast方法。</p>\n<p>首先创建一个Node变量 l 将last（此时为空）赋给它，然后new一个newNode变量存储数据，并且它的前驱指向l，后继指向null；再把last指向newNode。如下图所示：</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE2.PNG\"></p>\n<p>如果满足if条件，说明这是添加的第一个结点，将first指向newNode：</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE3.PNG\"></p>\n<p>至此，LinkedList对象的第一个数据添加完毕。假设需要再添加一个数据，我们可以再来走一遍，过程同上不再赘述，图示如下：</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E5%9B%BE4.PNG\"></p>\n<hr>\n<h2 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h2><ul>\n<li><p>ArrayList：必须开辟连续空间，查询快，增删慢。</p>\n</li>\n<li><p>LinkedList：无需开辟连续空间，查询慢，增删快。</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE5.PNG\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"泛型概述\"><a href=\"#泛型概述\" class=\"headerlink\" title=\"泛型概述\"></a>泛型概述</h2><ul>\n<li><p>Java泛型式JDK1.5中引入的一个新特性，其本质式参数化类型，把类型作为参数传递。</p>\n</li>\n<li><p>常见形式又泛型类、泛型接口、泛型方法。</p>\n</li>\n<li><p>语法:</p>\n<p>​    <code>&lt;T,…&gt; T称为类型占位符，表示一种引用类型。</code></p>\n</li>\n<li><p>好处：</p>\n<p> <code>提高代码的重用性。</code></p>\n<p><code>防止类型转换异常，提高代码的安全性。</code></p>\n</li>\n</ul>\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 泛型类</span><br><span class=\"hljs-comment\"> * 语法：类名&lt;T&gt;</span><br><span class=\"hljs-comment\"> * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">myGeneric</span>&lt;T&gt;&#123;<br>\t\t<span class=\"hljs-comment\">//1.创建泛型变量</span><br>\t\t<span class=\"hljs-comment\">//不能使用new来创建，因为泛型式不确定的类型，野可能拥有私密的构造方法。</span><br>\t\tT t<br>\t\t<span class=\"hljs-comment\">//2.泛型作为方法的参数</span><br>\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">(T t)</span>&#123;<br>     \tSystem.out.println(t);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//泛型作为方法的返回值</span><br>\t\t<span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">getT</span><span class=\"hljs-params\">()</span>&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> t;<br>\t\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 注意：</span><br><span class=\"hljs-comment\"> * 1.泛型只能使用引用类型</span><br><span class=\"hljs-comment\"> * 2.不同泛型类型的对象不能相互赋值</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">testGeneric</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> void main(<span class=\"hljs-keyword\">String</span>[] args) &#123;<br>\t\t<span class=\"hljs-comment\">//使用泛型类创建对象</span><br>\t\tmyGeneric&lt;<span class=\"hljs-keyword\">String</span>&gt; myGeneric1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">myGeneric</span>&lt;<span class=\"hljs-keyword\">String</span>&gt;();<br>\t\tmyGeneric1.t=<span class=\"hljs-string\">&quot;tang&quot;</span>;<br>\t\tmyGeneric1.show(<span class=\"hljs-string\">&quot;he&quot;</span>);<br>\t\t<br>\t\tmyGeneric&lt;Integer&gt; myGeneric2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">myGeneric</span>&lt;Integer&gt;();<br>\t\tmyGeneric2.t=<span class=\"hljs-number\">10</span>;<br>\t\tmyGeneric2.show(<span class=\"hljs-number\">20</span>);<br>\t\tInteger integer=myGeneric2.getT();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>泛型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 泛型接口</span><br><span class=\"hljs-comment\"> * 语法：接口名&lt;T&gt;</span><br><span class=\"hljs-comment\"> * 注意：不能创建泛型静态常量</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">MyInterface</span>&lt;T&gt;&#123;<br>    <span class=\"hljs-comment\">//创建常量</span><br>    \tString nameString=<span class=\"hljs-string\">&quot;tang&quot;</span>;<br>    \t<br>    \tT <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(T t)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 实现接口时确定泛型类</span><br><span class=\"hljs-comment\"> */</span><br> <span class=\"hljs-keyword\">public</span> clas MyInterfaceImpl <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">MyInterface</span>&lt;String&gt;&#123;<br> \t\t<span class=\"hljs-meta\">@Override</span><br>\t\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(String t)</span> &#123;<br>\t\t\t\tSystem.out.println(t);<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> t; <br>\t&#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试</span><br>MyInterfaceImpl myInterfaceImpl=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyInterfaceImpl</span>();<br>myInterfaceImpl.server(<span class=\"hljs-string\">&quot;xxx&quot;</span>);<br><span class=\"hljs-comment\">//xxx</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 实现接口时不确定泛型类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyInterfaceImpl2</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">MyInterface</span>&lt;T&gt;&#123;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(T t)</span> &#123;<br>\t\tSystem.out.println(t);<br>\t\t<span class=\"hljs-keyword\">return</span> t;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试</span><br>MyInterfaceImpl2&lt;Integer&gt; myInterfaceImpl2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyInterfaceImpl2</span>&lt;Integer&gt;();<br>myInterfaceImpl2.server(<span class=\"hljs-number\">2000</span>);<br><span class=\"hljs-comment\">//2000</span><br></code></pre></td></tr></table></figure>\n\n<p>泛型方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 泛型方法</span><br><span class=\"hljs-comment\"> * 语法：&lt;T&gt; 返回类型</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyGenericMethod</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">(T t)</span> &#123;<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;泛型方法&quot;</span>+t);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试</span><br>MyGenericMethod myGenericMethod=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyGenericMethod</span>();<br>myGenericMethod.show(<span class=\"hljs-string\">&quot;tang&quot;</span>);<br>myGenericMethod.show(<span class=\"hljs-number\">200</span>);<br>myGenericMethod.show(<span class=\"hljs-number\">3.14</span>);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"泛型集合\"><a href=\"#泛型集合\" class=\"headerlink\" title=\"泛型集合\"></a><strong>泛型集合</strong></h5><ul>\n<li><p><strong>概念</strong>：参数化类型、类型安全的集合，强制集合元素的类型必须一致。</p>\n</li>\n<li><p>特点</p>\n<p>：</p>\n<ul>\n<li>编译时即可检查，而非运行时抛出异常。</li>\n<li>访问时，不必类型转换（拆箱）。</li>\n<li>不同泛型指尖引用不能相互赋值，泛型不存在多态。</li>\n</ul>\n</li>\n</ul>\n<p>之前我们在创建LinkedList类型对象的时候并没有使用泛型，但是进到它的源码中会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;E&gt;<br>    <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractSequentialList</span>&lt;E&gt;<br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable&#123;<span class=\"hljs-comment\">//略&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>它是一个泛型类，而我之前使用的时候并没有传递，说明java语法是允许的，这个时候传递的类型是Object类，虽然它是所有类的父类，可以存储任意的类型，但是在遍历、获取元素时需要原来的类型就要进行强制转换。这个时候就会出现一些问题，假如往链表里存储了许多不同类型的数据，在强转的时候就要判断每一个原来的类型，这样就很容易出现错误。</p>\n<hr>\n<h2 id=\"Set集合概述\"><a href=\"#Set集合概述\" class=\"headerlink\" title=\"Set集合概述\"></a>Set集合概述</h2><h3 id=\"Set子接口\"><a href=\"#Set子接口\" class=\"headerlink\" title=\"Set子接口\"></a>Set子接口</h3><ul>\n<li><p>特点：无序、无下标、元素不可重复。</p>\n</li>\n<li><p>方法：全部继承自Collection中的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 测试Set接口的使用</span><br><span class=\"hljs-comment\"> * 特点：1.无序，没有下标；2.重复</span><br><span class=\"hljs-comment\"> * 1.添加数据</span><br><span class=\"hljs-comment\"> * 2.删除数据</span><br><span class=\"hljs-comment\"> * 3.遍历【重点】</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tSet&lt;String&gt; set=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;String&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加数据</span><br>\t\tset.add(<span class=\"hljs-string\">&quot;tang&quot;</span>);<br>\t\tset.add(<span class=\"hljs-string\">&quot;he&quot;</span>);<br>\t\tset.add(<span class=\"hljs-string\">&quot;yu&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;数据个数：&quot;</span>+set.size());<br>\t\tSystem.out.println(set.toString());<span class=\"hljs-comment\">//无序输出</span><br>\t\t<span class=\"hljs-comment\">//2.删除数据</span><br>\t\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t * set.remove(&quot;tang&quot;); System.out.println(set.toString());</span><br><span class=\"hljs-comment\">\t\t */</span><br>\t\t<span class=\"hljs-comment\">//3.遍历【重点】</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span> (String string : set) &#123;<br>\t\t\tSystem.out.println(string);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用迭代器</span><br>\t\tIterator&lt;String&gt; iterator=set.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(set.contains(<span class=\"hljs-string\">&quot;tang&quot;</span>));<br>\t\tSystem.out.println(set.isEmpty());<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Set实现类\"><a href=\"#Set实现类\" class=\"headerlink\" title=\"Set实现类\"></a>Set实现类</h2><h3 id=\"HashSet【重点】\"><a href=\"#HashSet【重点】\" class=\"headerlink\" title=\"HashSet【重点】\"></a>HashSet【重点】</h3><ul>\n<li>基于HashCode计算元素存放位置。</li>\n<li>当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 人类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> String name;<br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Person</span><span class=\"hljs-params\">(String name,<span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Peerson [name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, age=&quot;</span> + age + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * HashSet集合的使用</span><br><span class=\"hljs-comment\"> * 存储结构：哈希表（数组+链表+红黑树）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo3</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tHashSet&lt;Person&gt; hashSet=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>\t\tPerson p1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>,<span class=\"hljs-number\">21</span>);<br>\t\tPerson p2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;刘德华&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tPerson p3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\thashSet.add(p1);<br>\t\thashSet.add(p2);<br>\t\thashSet.add(p3);<br>        <span class=\"hljs-comment\">//重复，添加失败</span><br>        hashSet.add(p3);<br>        <span class=\"hljs-comment\">//直接new一个相同属性的对象，依然会被添加，不难理解。</span><br>        <span class=\"hljs-comment\">//假如相同属性便认为是同一个对象，怎么修改？</span><br>        hashSet.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">21</span>));<br>\t\tSystem.out.println(hashSet.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\thashSet.remove(p2);<br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//3.1 增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span> (Person person : hashSet) &#123;<br>\t\t\tSystem.out.println(person);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 迭代器</span><br>\t\tIterator&lt;Person&gt; iterator=hashSet.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());\t\t<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(hashSet.isEmpty());<br>        <span class=\"hljs-comment\">//直接new一个相同属性的对象结果输出是false，不难理解。</span><br>        <span class=\"hljs-comment\">//注：假如相同属性便认为是同一个对象，该怎么做？</span><br>\t\tSystem.out.println(hashSet.contains(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">21</span>)));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>注</strong>：hashSet存储过程：</p>\n<ol>\n<li>根据hashCode计算保存的位置，如果位置为空，则直接保存，否则执行第二步。</li>\n<li>执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。</li>\n</ol>\n<p>存储过程实际上就是重复依据，要实现“注”里的问题，可以重写hashCode和equals代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">prime</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">31</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    result = prime * result + age;<br>    result = prime * result + ((name == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : name.hashCode());<br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> == obj)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-literal\">null</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">if</span> (getClass() != obj.getClass())<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">other</span> <span class=\"hljs-operator\">=</span> (Person) obj;<br>    <span class=\"hljs-keyword\">if</span> (age != other.age)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">if</span> (name == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (other.name != <span class=\"hljs-literal\">null</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!name.equals(other.name))<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>hashCode方法里为什么要使用31这个数字大概有两个原因：</p>\n<ol>\n<li><p>31是一个质数，这样的数字在计算时可以尽量减少散列冲突。</p>\n</li>\n<li><p>可以提高执行效率，因为31*i=(i&lt;&lt;5)-i，31乘以一个数可以转换成移位操作，这样能快一点；但是也有网上一些人对这两点提出质疑。</p>\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><ul>\n<li>基于排序顺序实现不重复。</li>\n<li>实现了SortedSet接口，对集合元素自动排序。</li>\n<li>元素对象的类型必须实现Comparable接口，指定排序规则。</li>\n<li>通过CompareTo方法确定是否为重复元素。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 使用TreeSet保存数据</span><br><span class=\"hljs-comment\"> * 存储结构：红黑树</span><br><span class=\"hljs-comment\"> * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 </span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo4</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeSet&lt;Person&gt; persons=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;Person&gt;();<br>\t\tPerson p1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;tang&quot;</span>,<span class=\"hljs-number\">21</span>);<br>\t\tPerson p2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tPerson p3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tpersons.add(p1);<br>\t\tpersons.add(p2);<br>\t\tpersons.add(p3);<br>\t\t<span class=\"hljs-comment\">//注：直接添加会报类型转换错误，需要实现Comparable接口</span><br>\t\tSystem.out.println(persons.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tpersons.remove(p1);<br>\t\tpersons.remove(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">22</span>));<br>\t\tSystem.out.println(persons.toString());<br>\t\t<span class=\"hljs-comment\">//3.遍历（略）</span><br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(persons.contains(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">21</span>)));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>查看Comparable接口的源码，发现只有一个compareTo抽象方法，在人类中实现它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Person&gt;&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-comment\">//1.先按姓名比</span><br>\t<span class=\"hljs-comment\">//2.再按年龄比</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Person o)</span> &#123;<br>\t\t<span class=\"hljs-type\">int</span> n1=<span class=\"hljs-built_in\">this</span>.getName().compareTo(o.getName());<br>\t\t<span class=\"hljs-type\">int</span> n2=<span class=\"hljs-built_in\">this</span>.age-o.getAge();<br>\t\t<span class=\"hljs-keyword\">return</span> n1==<span class=\"hljs-number\">0</span>?n2:n1;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * TreeSet的使用</span><br><span class=\"hljs-comment\"> * Comparator：实现定制比较（比较器）</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo5</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeSet&lt;Person&gt; persons=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;Person&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Person&gt;() &#123;<br>\t\t\t<span class=\"hljs-meta\">@Override</span><br>\t\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Person o1, Person o2)</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// 先按年龄比较</span><br>\t\t\t\t<span class=\"hljs-comment\">// 再按姓名比较</span><br>\t\t\t\t<span class=\"hljs-type\">int</span> n1=o1.getAge()-o2.getAge();<br>\t\t\t\t<span class=\"hljs-type\">int</span> n2=o1.getName().compareTo(o2.getName());<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> n1==<span class=\"hljs-number\">0</span>?n2:n1;<br>\t\t\t&#125;\t\t\t<br>\t\t&#125;);<br>\t\tPerson p1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>,<span class=\"hljs-number\">21</span>);<br>\t\tPerson p2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tPerson p3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;彭于晏&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tpersons.add(p1);<br>\t\tpersons.add(p2);<br>\t\tpersons.add(p3);<br>\t\tSystem.out.println(persons.toString());<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来我们来做一个小案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 要求：使用TreeSet集合实现字符串按照长度进行排序</span><br><span class=\"hljs-comment\"> * helloworld tangrui hechengyang wangzixu yuguoming</span><br><span class=\"hljs-comment\"> * Comparator接口实现定制比较</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo6</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeSet&lt;String&gt; treeSet=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;String&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;String&gt;() &#123;<br>\t\t\t<span class=\"hljs-meta\">@Override</span><br>\t\t\t<span class=\"hljs-comment\">//先比较字符串长度</span><br>\t\t\t<span class=\"hljs-comment\">//再比较字符串</span><br>\t\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(String o1, String o2)</span> &#123;<br>\t\t\t\t<span class=\"hljs-type\">int</span> n1=o1.length()-o2.length();<br>\t\t\t\t<span class=\"hljs-type\">int</span> n2=o1.compareTo(o2);<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> n1==<span class=\"hljs-number\">0</span>?n2:n1;<br>\t\t\t&#125;\t\t\t<br>\t\t&#125;);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;chen&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;liu&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;peng&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;liang&quot;</span>);<br>\t\tSystem.out.println(treeSet.toString());<br>        <span class=\"hljs-comment\">//输出[liu, chen, peng, hello, liang]</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Map集合的实现类\"><a href=\"#Map集合的实现类\" class=\"headerlink\" title=\"Map集合的实现类\"></a>Map集合的实现类</h2><h2 id=\"HashMap-【重点】\"><a href=\"#HashMap-【重点】\" class=\"headerlink\" title=\"HashMap 【重点】\"></a>HashMap 【重点】</h2><ul>\n<li>JDK1.2版本，线程不安全，运行效率快；允许用null作为key或是value。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 学生类</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>  \t<span class=\"hljs-keyword\">private</span> String name;<br>  \t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;\t<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> id)</span> &#123;<br>  \t\t<span class=\"hljs-built_in\">super</span>();<br>  \t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>  \t\t<span class=\"hljs-built_in\">this</span>.id = id;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>  \t\t<span class=\"hljs-keyword\">return</span> name;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>  \t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getId</span><span class=\"hljs-params\">()</span> &#123;<br>  \t\t<span class=\"hljs-keyword\">return</span> id;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span> &#123;<br>  \t\t<span class=\"hljs-built_in\">this</span>.id = id;<br>  \t&#125;<br>  \t<span class=\"hljs-meta\">@Override</span><br>  \t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>  \t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student [name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, age=&quot;</span> + id + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>  \t&#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * HashMap的使用</span><br><span class=\"hljs-comment\">   * 存储结构：哈希表（数组+链表+红黑树）</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo2</span> &#123;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>  \t\tHashMap&lt;Student, String&gt; hashMap=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;Student, String&gt;();<br>  \t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;tang&quot;</span>, <span class=\"hljs-number\">36</span>);<br>  \t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">101</span>);<br>  \t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>);<br>  \t\t<span class=\"hljs-comment\">//1.添加元素</span><br>  \t\thashMap.put(s1, <span class=\"hljs-string\">&quot;成都&quot;</span>);<br>  \t\thashMap.put(s2, <span class=\"hljs-string\">&quot;杭州&quot;</span>);<br>  \t\thashMap.put(s3, <span class=\"hljs-string\">&quot;郑州&quot;</span>);<br>  \t\t<span class=\"hljs-comment\">//添加失败，但会更新值</span><br>  \t\thashMap.put(s3,<span class=\"hljs-string\">&quot;上海&quot;</span>);<br>  \t\t<span class=\"hljs-comment\">//添加成功，不过两个属性一模一样；</span><br>  \t\t<span class=\"hljs-comment\">//注：假如相同属性便认为是同一个对象，怎么修改？</span><br>  \t\thashMap.put(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>),<span class=\"hljs-string\">&quot;上海&quot;</span>);<br>  \t\tSystem.out.println(hashMap.toString());<br>  \t\t<span class=\"hljs-comment\">//2.删除元素</span><br>  \t\thashMap.remove(s3);<br>  \t\tSystem.out.println(hashMap.toString());<br>  \t\t<span class=\"hljs-comment\">//3.遍历</span><br>  \t\t<span class=\"hljs-comment\">//3.1 使用keySet()遍历</span><br>  \t\t<span class=\"hljs-keyword\">for</span> (Student key : hashMap.keySet()) &#123;<br>  \t\t\tSystem.out.println(key+<span class=\"hljs-string\">&quot; &quot;</span>+hashMap.get(key));<br>  \t\t&#125;<br>  \t\t<span class=\"hljs-comment\">//3.2 使用entrySet()遍历</span><br>  \t\t<span class=\"hljs-keyword\">for</span> (Entry&lt;Student, String&gt; entry : hashMap.entrySet()) &#123;<br>  \t\t\tSystem.out.println(entry.getKey()+<span class=\"hljs-string\">&quot; &quot;</span>+entry.getValue());<br>  \t\t&#125;<br>  \t\t<span class=\"hljs-comment\">//4.判断</span><br>  \t\t<span class=\"hljs-comment\">//注：同上</span><br>  \t\tSystem.out.println(hashMap.containsKey(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>)));<br>  \t\tSystem.out.println(hashMap.containsValue(<span class=\"hljs-string\">&quot;成都&quot;</span>));<br>  \t&#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>注：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">prime</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">31</span>;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>      result = prime * result + id;<br>      result = prime * result + ((name == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : name.hashCode());<br>      <span class=\"hljs-keyword\">return</span> result;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> == obj)<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-literal\">null</span>)<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-keyword\">if</span> (getClass() != obj.getClass())<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">other</span> <span class=\"hljs-operator\">=</span> (Student) obj;<br>      <span class=\"hljs-keyword\">if</span> (id != other.id)<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-keyword\">if</span> (name == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">if</span> (other.name != <span class=\"hljs-literal\">null</span>)<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!name.equals(other.name))<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"HashMap-源码分析\"><a href=\"#HashMap-源码分析\" class=\"headerlink\" title=\"HashMap 源码分析\"></a>HashMap 源码分析</h2><ul>\n<li>默认初始化容量：<code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</code></li>\n</ul>\n<ul>\n<li>数组最大容量：<code>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</code></li>\n</ul>\n<ul>\n<li><p>默认加载因子：<code>static final float DEFAULT_LOAD_FACTOR = 0.75f;</code></p>\n</li>\n<li><p>链表调整为红黑树的链表长度阈值（JDK1.8）：<code>static final int TREEIFY_THRESHOLD = 8;</code></p>\n</li>\n<li><p>红黑树调整为链表的链表长度阈值（JDK1.8）：<code>static final int UNTREEIFY_THRESHOLD = 6;</code></p>\n</li>\n<li><p>链表调整为红黑树的数组最小阈值（JDK1.8）：<code>static final int MIN_TREEIFY_CAPACITY = 64;</code></p>\n</li>\n<li><p>HashMap存储的数组：<code>transient Node&lt;K,V&gt;[] table;</code></p>\n</li>\n<li><p>HashMap存储的元素个数：<code>transient int size;</code></p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>默认加载因子是什么？<ul>\n<li>就是判断数组是否扩容的一个因子。假如数组容量为100，如果HashMap的存储元素个数超过了100*0.75=75，那么就会进行扩容。</li>\n</ul>\n</li>\n<li>链表调整为红黑树的链表长度阈值是什么？<ul>\n<li>假设在数组中下标为3的位置已经存储了数据，当新增数据时通过哈希码得到的存储位置又是3，那么就会在该位置形成一个链表，当链表过长时就会转换成红黑树以提高执行效率，这个阈值就是链表转换成红黑树的最短链表长度；</li>\n</ul>\n</li>\n<li>红黑树调整为链表的链表长度阈值是什么？<ul>\n<li>当红黑树的元素个数小于该阈值时就会转换成链表。</li>\n</ul>\n</li>\n<li>链表调整为红黑树的数组最小阈值是什么？<ul>\n<li>并不是只要链表长度大于8就可以转换成红黑树，在前者条件成立的情况下，数组的容量必须大于等于64才会进行转换。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>HashMap的数组table存储的就是一个个的Node&lt;K,V&gt;类型，很清晰地看到有一对键值，还有一个指向next的指针（以下只截取了部分源码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;K,V&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Map</span>.Entry&lt;K,V&gt; &#123;<br>      <span class=\"hljs-keyword\">final</span> K key;<br>      V value;<br>      Node&lt;K,V&gt; next;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>之前的代码中在new对象时调用的是HashMap的无参构造方法，进入到该构造方法的源码查看一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashMap</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"hljs-comment\">// all other fields defaulted</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>发现没什么内容，只是赋值了一个默认加载因子；而在上文我们观察到源码中table和size都没有赋予初始值，说明刚创建的HashMap对象没有分配容量，并不拥有默认的16个空间大小，这样做的目的是为了节约空间，此时table为null，size为0。</p>\n<p>当我们往对象里添加元素时调用put方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K key, V value)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> putVal(hash(key), key, value, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>);<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>put方法把key和value传给了putVal，同时还传入了一个hash(Key)所返回的值，这是一个产生哈希值的方法，再进入到putVal方法（部分源码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> V <span class=\"hljs-title function_\">putVal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hash, K key, V value, <span class=\"hljs-type\">boolean</span> onlyIfAbsent,</span><br><span class=\"hljs-params\">                    <span class=\"hljs-type\">boolean</span> evict)</span> &#123;<br>      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"hljs-type\">int</span> n, i;<br>      <span class=\"hljs-keyword\">if</span> ((tab = table) == <span class=\"hljs-literal\">null</span> || (n = tab.length) == <span class=\"hljs-number\">0</span>)<br>          n = (tab = resize()).length;<br>      <span class=\"hljs-keyword\">if</span> ((p = tab[i = (n - <span class=\"hljs-number\">1</span>) &amp; hash]) == <span class=\"hljs-literal\">null</span>)<br>          tab[i] = newNode(hash, key, value, <span class=\"hljs-literal\">null</span>);<br>      <span class=\"hljs-keyword\">else</span>&#123;<br>          <span class=\"hljs-comment\">//略</span><br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里面创建了一个tab数组和一个Node变量p，第一个if实际是判断table是否为空，而我们现在只关注刚创建HashMap对象时的状态，此时tab和table都为空，满足条件，执行内部代码，这条代码其实就是把resize()所返回的结果赋给tab，n就是tab的长度，resize顾名思义就是重新调整大小。查看resize()源码（部分）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>      Node&lt;K,V&gt;[] oldTab = table;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldCap</span> <span class=\"hljs-operator\">=</span> (oldTab == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : oldTab.length;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldThr</span> <span class=\"hljs-operator\">=</span> threshold;<br>      <span class=\"hljs-keyword\">if</span> (oldCap &gt; <span class=\"hljs-number\">0</span>);<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (oldThr &gt; <span class=\"hljs-number\">0</span>);<br>      <span class=\"hljs-keyword\">else</span> &#123;               <span class=\"hljs-comment\">// zero initial threshold signifies using defaults</span><br>          newCap = DEFAULT_INITIAL_CAPACITY;<br>          newThr = (<span class=\"hljs-type\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>      &#125; <br>      <span class=\"hljs-meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>      Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>[newCap];<br>      table = newTab;<br>      <span class=\"hljs-keyword\">return</span> newTab;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>该方法首先把table及其长度赋值给oldTab和oldCap；threshold是阈值的意思，此时为0，所以前两个if先不管，最后else里newCap的值为默认初始化容量16；往下创建了一个newCap大小的数组并将其赋给了table，刚创建的HashMap对象就在这里获得了初始容量。然后我们再回到putVal方法，第二个if就是根据哈希码得到的tab中的一个位置是否为空，为空便直接添加元素，此时数组中无元素所以直接添加。至此HashMap对象就完成了第一个元素的添加。当添加的元素超过16*0.75=12时，就会进行扩容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> V <span class=\"hljs-title function_\">putVal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hash, K key, V value, <span class=\"hljs-type\">boolean</span> onlyIfAbsent,<span class=\"hljs-type\">boolean</span> evict)</span>&#123;<br>      <span class=\"hljs-keyword\">if</span> (++size &gt; threshold)<br>          resize();<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>扩容的代码如下（部分）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldCap</span> <span class=\"hljs-operator\">=</span> (oldTab == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : oldTab.length;<br>      <span class=\"hljs-type\">int</span> newCap;<br>      <span class=\"hljs-keyword\">if</span> (oldCap &gt; <span class=\"hljs-number\">0</span>) &#123;<br>          <span class=\"hljs-keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class=\"hljs-comment\">//略&#125;</span><br>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"hljs-number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                   oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>核心部分是else if里的移位操作，<strong>也就是说每次扩容都是原来大小的两倍</strong>。</p>\n<ul>\n<li>注**：额外说明的一点是在JDK1.8以前链表是头插入，JDK1.8以后链表是尾插入。</li>\n</ul>\n<hr>\n<h4 id=\"HashSet源码分析\"><a href=\"#HashSet源码分析\" class=\"headerlink\" title=\"HashSet源码分析\"></a><strong>HashSet源码分析</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashSet</span>&lt;E&gt;<br>      <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractSet</span>&lt;E&gt;<br>      <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable<br>  &#123;<br>      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> HashMap&lt;E,Object&gt; map;<br>      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">PRESENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>      <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashSet</span><span class=\"hljs-params\">()</span> &#123;<br>          map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>HashSet的存储结构就是HashMap，那它的存储方式是怎样的呢？可以看一下add方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> map.put(e, PRESENT)==<span class=\"hljs-literal\">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>很明了地发现它的add方法调用的就是map的put方法，把元素作为map的key传进去的。。</p>\n<h2 id=\"Hashtable\"><a href=\"#Hashtable\" class=\"headerlink\" title=\"Hashtable\"></a>Hashtable</h2><ul>\n<li><p>JDK1.0版本，线程安全，运行效率慢；不允许null作为key或是value。</p>\n</li>\n<li><p>初始容量11，加载因子0.75。</p>\n<p>这个集合在开发过程中已经不用了，稍微了解即可。</p>\n</li>\n</ul>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a><strong>Properties</strong></h3><ul>\n<li>Hashtable的子类，要求key和value都是String。通常用于配置文件的读取。</li>\n</ul>\n<p>它继承了Hashtable的方法，与流关系密切，此处不详解。</p>\n<h3 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h3><ul>\n<li>实现了SortedMap接口（是Map的子接口），可以对key自动排序。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * TreeMap的使用</span><br><span class=\"hljs-comment\"> * 存储结构：红黑树</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo3</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeMap&lt;Student, Integer&gt; treeMap=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;Student, Integer&gt;();<br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;tang&quot;</span>, <span class=\"hljs-number\">36</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">101</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\ttreeMap.put(s1, <span class=\"hljs-number\">21</span>);<br>\t\ttreeMap.put(s2, <span class=\"hljs-number\">22</span>);<br>\t\ttreeMap.put(s3, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小</span><br>\t\tSystem.out.println(treeMap.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\ttreeMap.remove(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>));<br>\t\tSystem.out.println(treeMap.toString());<br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用keySet()</span><br>\t\t<span class=\"hljs-keyword\">for</span> (Student key : treeMap.keySet()) &#123;<br>\t\t\tSystem.out.println(key+<span class=\"hljs-string\">&quot; &quot;</span>+treeMap.get(key));<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用entrySet()</span><br>\t\t<span class=\"hljs-keyword\">for</span> (Entry&lt;Student, Integer&gt; entry : treeMap.entrySet()) &#123;<br>\t\t\tSystem.out.println(entry.getKey()+<span class=\"hljs-string\">&quot; &quot;</span>+entry.getValue());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(treeMap.containsKey(s1));<br>\t\tSystem.out.println(treeMap.isEmpty());\t\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在学生类中实现Comparable接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Student&gt;&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Student o)</span> &#123;<br>        <span class=\"hljs-type\">int</span> n1=<span class=\"hljs-built_in\">this</span>.id-o.id;<br>        <span class=\"hljs-keyword\">return</span> n1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>除此之外还可以使用比较器来定制比较：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">TreeMap&lt;Student, Integer&gt; treeMap2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;Student, Integer&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Student o1, Student o2)</span> &#123;<br>        <span class=\"hljs-comment\">// 略</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;\t\t\t<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"TreeSet源码\"><a href=\"#TreeSet源码\" class=\"headerlink\" title=\"TreeSet源码\"></a>TreeSet源码</h3><p>与HashSet类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;E&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractSet</span>&lt;E&gt;<br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable<br>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> NavigableMap&lt;E,Object&gt; m;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">PRESENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;<br>        <span class=\"hljs-built_in\">this</span>.m = m;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TreeSet</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;E,Object&gt;());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>TreeSet的存储结构实际上就是TreeMap，再来看其存储方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> m.put(e, PRESENT)==<span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>它的add方法调用的就是TreeMap的put方法，将元素作为key传入到存储结构中。</p>\n<hr>\n<h2 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a><strong>Collections工具类</strong></h2><p><strong>概念</strong>：集合工具类，定义了除了存取以外的集合常用方法。</p>\n<p><strong>方法</strong>：</p>\n<ul>\n<li><code>public static void reverse(List&lt;?&gt; list)</code>//反转集合中元素的顺序</li>\n<li><code>public static void shuffle(List&lt;?&gt; list)</code>//随机重置集合元素的顺序</li>\n<li><code>public static void sort(List&lt;T&gt; list)</code>//升序排序（元素类型必须实现Comparable接口）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 演示Collections工具类的使用</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo4</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tList&lt;Integer&gt; list=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();<br>\t\tlist.add(<span class=\"hljs-number\">20</span>);<br>\t\tlist.add(<span class=\"hljs-number\">10</span>);<br>\t\tlist.add(<span class=\"hljs-number\">30</span>);<br>\t\tlist.add(<span class=\"hljs-number\">90</span>);<br>\t\tlist.add(<span class=\"hljs-number\">70</span>);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//sort排序</span><br>\t\tSystem.out.println(list.toString());<br>\t\tCollections.sort(list);<br>\t\tSystem.out.println(list.toString());<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;---------&quot;</span>);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//binarySearch二分查找</span><br>\t\t<span class=\"hljs-type\">int</span> i=Collections.binarySearch(list, <span class=\"hljs-number\">10</span>);<br>\t\tSystem.out.println(i);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//copy复制</span><br>\t\tList&lt;Integer&gt; list2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i1=<span class=\"hljs-number\">0</span>;i1&lt;<span class=\"hljs-number\">5</span>;++i1) &#123;<br>\t\t\tlist2.add(<span class=\"hljs-number\">0</span>);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//该方法要求目标元素容量大于等于源目标</span><br>\t\tCollections.copy(list2, list);<br>\t\tSystem.out.println(list2.toString());<br>\t\t<br>\t\t<span class=\"hljs-comment\">//reserve反转</span><br>\t\tCollections.reverse(list2);<br>\t\tSystem.out.println(list2.toString());<br>\t\t<br>\t\t<span class=\"hljs-comment\">//shuffle 打乱</span><br>\t\tCollections.shuffle(list2);<br>\t\tSystem.out.println(list2.toString());<br>\t\t<br>\t\t<span class=\"hljs-comment\">//补充：list转成数组</span><br>\t\tInteger[] arr=list.toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[<span class=\"hljs-number\">0</span>]);<br>\t\tSystem.out.println(arr.length);<br>\t\t<span class=\"hljs-comment\">//补充：数组转成集合 </span><br>\t\tString[] nameStrings= &#123;<span class=\"hljs-string\">&quot;tang&quot;</span>,<span class=\"hljs-string\">&quot;he&quot;</span>,<span class=\"hljs-string\">&quot;yu&quot;</span>&#125;;<br>\t\t<span class=\"hljs-comment\">//受限集合，不能添加和删除</span><br>\t\tList&lt;String&gt; list3=Arrays.asList(nameStrings);<br>\t\tSystem.out.println(list3);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//注：基本类型转成集合时需要修改为包装类</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>本文已完结</p>\n<ul>\n<li>本文源于:<a href=\"https://lazydog036.gitee.io/2020/10/29/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/\">https://lazydog036.gitee.io/2020/10/29/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</a></li>\n</ul>\n","site":{"data":{}},"wordcount":29526,"excerpt":"","more":"<h1 id=\"Java集合\"><a href=\"#Java集合\" class=\"headerlink\" title=\"Java集合\"></a>Java集合</h1><hr>\n<h3 id=\"集合概述\"><a href=\"#集合概述\" class=\"headerlink\" title=\"集合概述\"></a>集合概述</h3><ul>\n<li><p>概念：对象的容器，定义了多个对象进行操作的常用方法。可实现  数组的功能。</p>\n</li>\n<li><p>和数组的区别：</p>\n<p>1.数组长度固定，集合长度不固定。</p>\n<p>2.数组可以存储基本类型和引用类型，集合只能存储引用类型。</p>\n</li>\n<li><p>Java引用包：java.util.*;</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Collection体系集合\"><a href=\"#Collection体系集合\" class=\"headerlink\" title=\"Collection体系集合\"></a>Collection体系集合</h2><p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE1.PNG\"></p>\n<hr>\n<h2 id=\"Collection父接口\"><a href=\"#Collection父接口\" class=\"headerlink\" title=\"Collection父接口\"></a>Collection父接口</h2><ul>\n<li><p>特点：代表一组任意类型的对象，无序、无下标、不能重复。</p>\n</li>\n<li><p>方法：</p>\n<ul>\n<li><code>boolean add(Object obj) //添加一个对象。</code></li>\n<li><code>boolean addAll(Collection c) //讲一个集合中的所有对象添加到此集合中。</code></li>\n<li><code>void clear() //清空此集合中的所有对象。</code></li>\n<li><code>boolean contains(Object o) //检查此集合中是否包含o对象。</code></li>\n<li><code>boolean equals(Object o) //比较此集合是否与指定对象相等。</code></li>\n<li><code>boolean isEmpty() //判断此集合是否为空。</code></li>\n<li><code>boolean remove(Object o) //在此集合中移除o对象。</code></li>\n<li><code>int size() //返回此集合中的元素个数。</code></li>\n<li><code>Object[] toArray() //姜此集合转换成数组。</code></li>\n</ul>\n</li>\n</ul>\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Collection接口的使用（一）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span>&#123;<br>    pubic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>        <span class=\"hljs-comment\">//创建集合</span><br>        Collection collection=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();        <br><span class=\"hljs-comment\">//      * 1.添加元素</span><br>        Collection.add(<span class=\"hljs-string\">&quot;苹果&quot;</span>);<br>        Collection.add(<span class=\"hljs-string\">&quot;西瓜&quot;</span>);<br>        Collection.add(<span class=\"hljs-string\">&quot;榴莲&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+collection.size());<br>        System.out.println(collection);<br><span class=\"hljs-comment\">//      * 2.删除元素</span><br>        collection.remove(<span class=\"hljs-string\">&quot;榴莲&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;删除之后：&quot;</span>+collection.size());<br><span class=\"hljs-comment\">//      * 3.遍历元素</span><br>        <span class=\"hljs-comment\">//3.1 使用增强for </span><br>        <span class=\"hljs-keyword\">for</span>(Object object : collection)&#123;<br>            System.out.println(object);<br>        &#125;<br>        <span class=\"hljs-comment\">//3.2 使用迭代器（迭代器专门用来遍历集合的一种方式）</span><br>        <span class=\"hljs-comment\">//hasnext();判断是否有下一个元素</span><br>        <span class=\"hljs-comment\">//next();获取下一个元素</span><br>        <span class=\"hljs-comment\">//remove();删除当前元素</span><br>        Iterator iterator=collection.Itertor();<br>        <span class=\"hljs-keyword\">while</span>(iterator.hasnext())&#123;<br>            String object=(String)iterator.next();<br>            System.out.println(s);<br>            <span class=\"hljs-comment\">//删除操作</span><br>            <span class=\"hljs-comment\">//collection.remove(s);引发错误：并发修改异常</span><br>            <span class=\"hljs-comment\">//iterator.remove();应使用迭代器的方法</span><br><span class=\"hljs-comment\">//      * 4.判断</span><br>        System.out.println(collection.contains(<span class=\"hljs-string\">&quot;西瓜&quot;</span>));<span class=\"hljs-comment\">//true</span><br>        System.out.println(collection.isEmpty());<span class=\"hljs-comment\">//false</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Collection接口的使用（二）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo2</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tCollection collection=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();<br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;张三&quot;</span>,<span class=\"hljs-number\">18</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-number\">20</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-number\">19</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加数据</span><br>\t\tcollection.add(s1);<br>\t\tcollection.add(s2);<br>\t\tcollection.add(s3);<br>\t\t<span class=\"hljs-comment\">//collection.add(s3);可重复添加相同对象</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+collection.size());<br>\t\tSystem.out.println(collection.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除数据</span><br>\t\tcollection.remove(s1);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;删除之后：&quot;</span>+collection.size());<br>\t\t<span class=\"hljs-comment\">//3.遍历数据</span><br>\t\t<span class=\"hljs-comment\">//3.1 增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(Object object:collection) &#123;<br>\t\t\tStudent student=(Student) object;<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2迭代器</span><br>\t\t<span class=\"hljs-comment\">//迭代过程中不能使用collection的删除方法</span><br>\t\tIterator iterator=collection.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tStudent student=(Student) iterator.next();<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断和上一块代码类似。</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 学生类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> String name;<br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">super</span>();<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student [name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<span class=\"hljs-string\">&quot;]&quot;</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"Collection子接口\"><a href=\"#Collection子接口\" class=\"headerlink\" title=\"Collection子接口\"></a>Collection子接口</h2><h2 id=\"List-集合\"><a href=\"#List-集合\" class=\"headerlink\" title=\"List 集合\"></a>List 集合</h2><ul>\n<li>特点：有序、有下标、元素可以重复。</li>\n<li>方法:<ul>\n<li><code>void add(int index,Object o) //在index位置插入对象o。</code></li>\n<li><code>boolean addAll(index,Collection c) //将一个集合中的元素添加到此集合中的index位置。</code></li>\n<li><code>Object get(int index) //返回集合中指定位置的元素。</code></li>\n<li><code>List subList(int fromIndex,int toIndex) //返回fromIndex和toIndex之间的集合元素。 </code> </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * List子接口的使用（一）</span><br><span class=\"hljs-comment\"> * 特点：1.有序有下标 2.可以重复</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> * 5.获取位置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo3</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tList list=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tlist.add(<span class=\"hljs-string\">&quot;杨&quot;</span>);<br>\t\tlist.add(<span class=\"hljs-string\">&quot;李&quot;</span>);<br>\t\tlist.add(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;陈&quot;</span>);<span class=\"hljs-comment\">//插入操作</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tlist.remove(<span class=\"hljs-number\">0</span>);<br>\t\t<span class=\"hljs-comment\">//list.remove(&quot;李&quot;);结果同上</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;删除之后：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//3.遍历元素</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用for遍历</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;list.size();++i) &#123;<br>\t\t\tSystem.out.println(list.get(i));<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(Object object:list) &#123;<br>\t\t\tSystem.out.println(object);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.3 使用迭代器</span><br>\t\tIterator iterator=list.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.4使用列表迭代器，listIterator可以双向遍历，添加、删除及修改元素。</span><br>\t\tListIterator listIterator=list.listIterator();<br>\t\t<span class=\"hljs-comment\">//从前往后</span><br>\t\t<span class=\"hljs-keyword\">while</span> (listIterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(listIterator.next());\t\t<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//从后往前（此时“遍历指针”已经指向末尾）</span><br>\t\t<span class=\"hljs-keyword\">while</span>(listIterator.hasPrevious()) &#123;<br>\t\t\tSystem.out.println(listIterator.previous());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(list.isEmpty());<br>\t\tSystem.out.println(list.contains(<span class=\"hljs-string\">&quot;杨&quot;</span>));<br>\t\t<span class=\"hljs-comment\">//5.获取位置</span><br>\t\tSystem.out.println(list.indexOf(<span class=\"hljs-string\">&quot;杨&quot;</span>));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * List子接口的使用（二）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> * 5.获取位置</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo4</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tList list=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();<br>\t\t<span class=\"hljs-comment\">//1.添加数字数据（自动装箱）</span><br>\t\tlist.add(<span class=\"hljs-number\">20</span>);<br>\t\tlist.add(<span class=\"hljs-number\">30</span>);<br>\t\tlist.add(<span class=\"hljs-number\">40</span>);<br>\t\tlist.add(<span class=\"hljs-number\">50</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tlist.remove(<span class=\"hljs-number\">0</span>);<br>\t\t<span class=\"hljs-comment\">//list.remove(20);很明显数组越界错误，改成如下</span><br>\t\t<span class=\"hljs-comment\">//list.remove(Object(20));</span><br>\t\t<span class=\"hljs-comment\">//list.remove(new Integer(20));</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+list.size());<br>\t\tSystem.out.println(list.toString());<br>\t\t<span class=\"hljs-comment\">//3-5不再演示，与之前类似</span><br>\t\t<span class=\"hljs-comment\">//6.补充方法subList，返回子集合，含头不含尾</span><br>\t\tList list2=list.subList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);<br>\t\tSystem.out.println(list2.toString());\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"List实现类\"><a href=\"#List实现类\" class=\"headerlink\" title=\"List实现类\"></a>List实现类</h2><p>ArrayList 【重点】</p>\n<ul>\n<li><p>数组结构实现，查询快、增删慢；</p>\n</li>\n<li><p>JDK1.2版本，运行效率快、线程不安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * ArrayList的使用</span><br><span class=\"hljs-comment\"> * 存储结构：数组；</span><br><span class=\"hljs-comment\"> * 特点：查找遍历速度快，增删慢。</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历元素</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> * 5.查找</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo5</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tArrayList arrayList=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;刘德华&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;梁朝伟&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tarrayList.add(s1);<br>\t\tarrayList.add(s2);<br>\t\tarrayList.add(s3);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+arrayList.size());<br>\t\tSystem.out.println(arrayList.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tarrayList.remove(s1);<br>\t\t<span class=\"hljs-comment\">//arrayList.remove(new Student(&quot;梁朝伟&quot;, 21));</span><br>\t\t<span class=\"hljs-comment\">//注：这样可以删除吗（不可以）？显然这是两个不同的对象。</span><br>\t\t<span class=\"hljs-comment\">//假如两个对象属性相同便认为其是同一对象，那么如何修改代码？</span><br>\t\t<span class=\"hljs-comment\">//3.遍历元素</span><br>\t\t<span class=\"hljs-comment\">//3.1使用迭代器</span><br>\t\tIterator iterator=arrayList.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span>(iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2使用列表迭代器</span><br>\t\tListIterator listIterator=arrayList.listIterator();<br>\t\t<span class=\"hljs-comment\">//从前往后遍历</span><br>\t\t<span class=\"hljs-keyword\">while</span>(listIterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(listIterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//从后往前遍历</span><br>\t\t<span class=\"hljs-keyword\">while</span>(listIterator.hasPrevious()) &#123;<br>\t\t\tSystem.out.println(listIterator.previous());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(arrayList.isEmpty());<br>\t\t<span class=\"hljs-comment\">//System.out.println(arrayList.contains(new Student(&quot;何&quot;, 22)));</span><br>\t\t<span class=\"hljs-comment\">//注：与上文相同的问题。</span><br>\t\t<span class=\"hljs-comment\">//5.查找</span><br>\t\tSystem.out.println(arrayList.indexOf(s1));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>注</strong>：Object里的equals(this==obj)用地址和当前对象比较，如果想实现代码中的问题，可以在学生类中重写equals方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> &#123;<br>\t<span class=\"hljs-comment\">//1.是否为同一对象</span><br>\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>==obj) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//2.判断是否为空</span><br>\t<span class=\"hljs-keyword\">if</span> (obj==<span class=\"hljs-literal\">null</span>) &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//3.判断是否是Student类型</span><br>\t<span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">instanceof</span> Student) &#123;<br>\t\tStudent student=(Student) obj;<br>\t\t<span class=\"hljs-comment\">//4.比较属性</span><br>\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.name.equals(student.getName())&amp;&amp;<span class=\"hljs-built_in\">this</span>.age==student.age) &#123;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//不满足，返回false</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayList源码分析\"><a href=\"#ArrayList源码分析\" class=\"headerlink\" title=\"ArrayList源码分析\"></a>ArrayList源码分析</h2><ul>\n<li><p>默认容量大小：<code>private static final int DEFAULT_CAPACITY = 10;</code></p>\n</li>\n<li><p>存放元素的数组：<code>transient Object[] elementData;</code></p>\n</li>\n<li><p>实际元素个数：<code>private int size;</code></p>\n</li>\n<li><p>创建对象时调用的无参构造函数：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//这是一个空的数组</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ArrayList</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段源码说明当你没有向集合中添加任何元素时，集合容量为0。那么默认的10个容量怎么来的呢？</p>\n<p>这就得看看add方法的源码了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>假设你new了一个数组，当前容量为0，size当然也为0。这时调用add方法进入到<code>ensureCapacityInternal(size + 1);</code>该方法源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">ensureCapacityInternal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>该方法中的参数minCapacity传入的值为size+1也就是 1，接着我们再进入到<code>calculateCapacity(elementData, minCapacity)</code>里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calculateCapacity</span><span class=\"hljs-params\">(Object[] elementData, <span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> minCapacity;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上文说过，elementData就是存放元素的数组，当前容量为0，if条件成立，返回默认容量<code>DEFAULT_CAPACITY</code>也就是10。这个值作为参数又传入<code>ensureExplicitCapacity()</code>方法中，进入该方法查看源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">ensureExplicitCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    modCount++;<br>    <span class=\"hljs-comment\">// overflow-conscious code</span><br>    <span class=\"hljs-keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"hljs-number\">0</span>)<br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>因为elementData数组长度为0，所以if条件成立，调用grow方法，<strong>重要的部分来了</strong>，我们再次进入到grow方法的源码中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">grow</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> minCapacity)</span> &#123;<br>    <span class=\"hljs-comment\">// overflow-conscious code</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldCapacity</span> <span class=\"hljs-operator\">=</span> elementData.length;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">newCapacity</span> <span class=\"hljs-operator\">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"hljs-number\">0</span>)<br>        newCapacity = minCapacity;<br>    <span class=\"hljs-keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"hljs-number\">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class=\"hljs-comment\">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个方法先声明了一个oldCapacity变量将数组长度赋给它，其值为0；又声明了一个newCapacity变量其值为<code>oldCapacity+一个增量</code>，可以发现这个增量是和原数组长度有关的量，当然在这里也为0。第一个if条件满足，newCapacity的值为10（这就是默认的容量，不理解的话再看看前面）。第二个if条件不成立，也可以不用注意，因为MAX_ARRAY_SIZE的定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">MAX_ARRAY_SIZE</span> <span class=\"hljs-operator\">=</span> Integer.MAX_VALUE - <span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n<p>最后一句话就是为elementData数组赋予了新的长度，<code>Arrays.copyOf()</code>方法返回的数组是新的数组对象，原数组对象不会改变，该拷贝不会影响原来的数组。<code>copyOf()</code>的第二个自变量指定要建立的新数组长度，如果新数组的长度超过原数组的长度，则保留数组默认值。</p>\n<p>这时候再回到add的方法中，接着就向下执行<code>elementData[size++] = e;</code>ArrayList当数组长度为10每次的增量每次扩容为原来的1.5倍。</p>\n<hr>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>数组结构实现，查询快、增删慢；</li>\n<li>JDK1.0版本，运行效率慢、线程安全。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Vector的演示使用</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> *1.添加数据</span><br><span class=\"hljs-comment\"> *2.删除数据</span><br><span class=\"hljs-comment\"> *3.遍历</span><br><span class=\"hljs-comment\"> *4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tVector vector=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>&lt;&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加数据</span><br>\t\tvector.add(<span class=\"hljs-string\">&quot;tang&quot;</span>);<br>\t\tvector.add(<span class=\"hljs-string\">&quot;he&quot;</span>);<br>\t\tvector.add(<span class=\"hljs-string\">&quot;yu&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+vector.size());<br>\t\t<span class=\"hljs-comment\">//2.删除数据</span><br>\t\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t * vector.remove(0); vector.remove(&quot;tang&quot;);</span><br><span class=\"hljs-comment\">\t\t */</span><br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//使用枚举器</span><br>\t\tEnumeration enumeration=vector.elements();<br>\t\t<span class=\"hljs-keyword\">while</span> (enumeration.hasMoreElements()) &#123;<br>\t\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> (String) enumeration.nextElement();<br>\t\t\tSystem.out.println(s);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(vector.isEmpty());<br>\t\tSystem.out.println(vector.contains(<span class=\"hljs-string\">&quot;he&quot;</span>));<br>\t\t<span class=\"hljs-comment\">//5. Vector其他方法</span><br>\t\t<span class=\"hljs-comment\">//firstElement()  lastElement()  ElementAt();</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><ul>\n<li><p>链表结构实现，增删快，查询慢。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * LinkedList的用法</span><br><span class=\"hljs-comment\"> * 存储结构：双向链表</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo2</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tLinkedList linkedList=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();<br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;梁朝伟&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;刘德华&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tlinkedList.add(s1);<br>\t\tlinkedList.add(s2);<br>\t\tlinkedList.add(s3);<br>\t\tlinkedList.add(s3);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;元素个数：&quot;</span>+linkedList.size());<br>\t\tSystem.out.println(linkedList.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t * linkedList.remove(new Student(&quot;唐&quot;, 21));</span><br><span class=\"hljs-comment\">\t\t * System.out.println(linkedList.toString());</span><br><span class=\"hljs-comment\">\t\t */</span><br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;linkedList.size();++i) &#123;<br>\t\t\tSystem.out.println(linkedList.get(i));<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span>(Object object:linkedList) &#123;<br>\t\t\tStudent student=(Student) object;<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.3 使用迭代器</span><br>\t\t<span class=\"hljs-type\">Iterator</span> <span class=\"hljs-variable\">iterator</span> <span class=\"hljs-operator\">=</span>linkedList.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\t<span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> (Student) iterator.next();<br>\t\t\tSystem.out.println(student.toString());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.4 使用列表迭代器（略）</span><br>\t\t<span class=\"hljs-comment\">//4. 判断</span><br>\t\tSystem.out.println(linkedList.contains(s1));<br>\t\tSystem.out.println(linkedList.isEmpty());<br>\t\tSystem.out.println(linkedList.indexOf(s3));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"LinkedList源码分析\"><a href=\"#LinkedList源码分析\" class=\"headerlink\" title=\"LinkedList源码分析\"></a>LinkedList源码分析</h2><p>​    LinkedList首先有三个属性：</p>\n<ul>\n<li>链表大小：<code>transient int size = 0;</code></li>\n<li>（指向）第一个结点/头结点：<code>transient Nod&lt;E&gt; first;</code></li>\n<li>（指向）最后一个结点/尾结点：<code>transient Node&lt;E&gt; last;</code></li>\n</ul>\n<p>关于Node类型我们再进入到类里看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class=\"hljs-built_in\">this</span>.item = element;<br>        <span class=\"hljs-built_in\">this</span>.next = next;<br>        <span class=\"hljs-built_in\">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>首先item存放的是实际数据；next指向下一个结点而prev指向上一个结点。</p>\n<p>Node带参构造方法的三个参数分别是前一个结点、存储的数据、后一个结点，调用这个构造方法时将它们赋值给当前对象。</p>\n<p>LinkedList是如何添加元素的呢？先看看add方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    linkLast(e);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>进入到linkLast方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">linkLast</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> Node&lt;E&gt; l = last;<br>    <span class=\"hljs-keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>&lt;&gt;(l, e, <span class=\"hljs-literal\">null</span>);<br>    last = newNode;<br>    <span class=\"hljs-keyword\">if</span> (l == <span class=\"hljs-literal\">null</span>)<br>        first = newNode;<br>    <span class=\"hljs-keyword\">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>假设刚开始new了一个LinkedList对象，first和last属性都为空，调用add进入到linkLast方法。</p>\n<p>首先创建一个Node变量 l 将last（此时为空）赋给它，然后new一个newNode变量存储数据，并且它的前驱指向l，后继指向null；再把last指向newNode。如下图所示：</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE2.PNG\"></p>\n<p>如果满足if条件，说明这是添加的第一个结点，将first指向newNode：</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE3.PNG\"></p>\n<p>至此，LinkedList对象的第一个数据添加完毕。假设需要再添加一个数据，我们可以再来走一遍，过程同上不再赘述，图示如下：</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/Java%E9%9B%86%E5%90%88%E5%9B%BE4.PNG\"></p>\n<hr>\n<h2 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h2><ul>\n<li><p>ArrayList：必须开辟连续空间，查询快，增删慢。</p>\n</li>\n<li><p>LinkedList：无需开辟连续空间，查询慢，增删快。</p>\n<p><img src=\"/img/java%E9%9B%86%E5%90%88/java%E9%9B%86%E5%90%88%E5%9B%BE5.PNG\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"泛型概述\"><a href=\"#泛型概述\" class=\"headerlink\" title=\"泛型概述\"></a>泛型概述</h2><ul>\n<li><p>Java泛型式JDK1.5中引入的一个新特性，其本质式参数化类型，把类型作为参数传递。</p>\n</li>\n<li><p>常见形式又泛型类、泛型接口、泛型方法。</p>\n</li>\n<li><p>语法:</p>\n<p>​    <code>&lt;T,…&gt; T称为类型占位符，表示一种引用类型。</code></p>\n</li>\n<li><p>好处：</p>\n<p> <code>提高代码的重用性。</code></p>\n<p><code>防止类型转换异常，提高代码的安全性。</code></p>\n</li>\n</ul>\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 泛型类</span><br><span class=\"hljs-comment\"> * 语法：类名&lt;T&gt;</span><br><span class=\"hljs-comment\"> * T是类型占位符，表示一种引用类型，编写多个使用逗号隔开</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">myGeneric</span>&lt;T&gt;&#123;<br>\t\t<span class=\"hljs-comment\">//1.创建泛型变量</span><br>\t\t<span class=\"hljs-comment\">//不能使用new来创建，因为泛型式不确定的类型，野可能拥有私密的构造方法。</span><br>\t\tT t<br>\t\t<span class=\"hljs-comment\">//2.泛型作为方法的参数</span><br>\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">(T t)</span>&#123;<br>     \tSystem.out.println(t);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//泛型作为方法的返回值</span><br>\t\t<span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">getT</span><span class=\"hljs-params\">()</span>&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> t;<br>\t\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 注意：</span><br><span class=\"hljs-comment\"> * 1.泛型只能使用引用类型</span><br><span class=\"hljs-comment\"> * 2.不同泛型类型的对象不能相互赋值</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">testGeneric</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> void main(<span class=\"hljs-keyword\">String</span>[] args) &#123;<br>\t\t<span class=\"hljs-comment\">//使用泛型类创建对象</span><br>\t\tmyGeneric&lt;<span class=\"hljs-keyword\">String</span>&gt; myGeneric1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">myGeneric</span>&lt;<span class=\"hljs-keyword\">String</span>&gt;();<br>\t\tmyGeneric1.t=<span class=\"hljs-string\">&quot;tang&quot;</span>;<br>\t\tmyGeneric1.show(<span class=\"hljs-string\">&quot;he&quot;</span>);<br>\t\t<br>\t\tmyGeneric&lt;Integer&gt; myGeneric2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">myGeneric</span>&lt;Integer&gt;();<br>\t\tmyGeneric2.t=<span class=\"hljs-number\">10</span>;<br>\t\tmyGeneric2.show(<span class=\"hljs-number\">20</span>);<br>\t\tInteger integer=myGeneric2.getT();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>泛型接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 泛型接口</span><br><span class=\"hljs-comment\"> * 语法：接口名&lt;T&gt;</span><br><span class=\"hljs-comment\"> * 注意：不能创建泛型静态常量</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">MyInterface</span>&lt;T&gt;&#123;<br>    <span class=\"hljs-comment\">//创建常量</span><br>    \tString nameString=<span class=\"hljs-string\">&quot;tang&quot;</span>;<br>    \t<br>    \tT <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(T t)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 实现接口时确定泛型类</span><br><span class=\"hljs-comment\"> */</span><br> <span class=\"hljs-keyword\">public</span> clas MyInterfaceImpl <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">MyInterface</span>&lt;String&gt;&#123;<br> \t\t<span class=\"hljs-meta\">@Override</span><br>\t\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(String t)</span> &#123;<br>\t\t\t\tSystem.out.println(t);<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> t; <br>\t&#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试</span><br>MyInterfaceImpl myInterfaceImpl=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyInterfaceImpl</span>();<br>myInterfaceImpl.server(<span class=\"hljs-string\">&quot;xxx&quot;</span>);<br><span class=\"hljs-comment\">//xxx</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 实现接口时不确定泛型类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyInterfaceImpl2</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">MyInterface</span>&lt;T&gt;&#123;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(T t)</span> &#123;<br>\t\tSystem.out.println(t);<br>\t\t<span class=\"hljs-keyword\">return</span> t;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试</span><br>MyInterfaceImpl2&lt;Integer&gt; myInterfaceImpl2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyInterfaceImpl2</span>&lt;Integer&gt;();<br>myInterfaceImpl2.server(<span class=\"hljs-number\">2000</span>);<br><span class=\"hljs-comment\">//2000</span><br></code></pre></td></tr></table></figure>\n\n<p>泛型方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 泛型方法</span><br><span class=\"hljs-comment\"> * 语法：&lt;T&gt; 返回类型</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyGenericMethod</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">(T t)</span> &#123;<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;泛型方法&quot;</span>+t);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试</span><br>MyGenericMethod myGenericMethod=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyGenericMethod</span>();<br>myGenericMethod.show(<span class=\"hljs-string\">&quot;tang&quot;</span>);<br>myGenericMethod.show(<span class=\"hljs-number\">200</span>);<br>myGenericMethod.show(<span class=\"hljs-number\">3.14</span>);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"泛型集合\"><a href=\"#泛型集合\" class=\"headerlink\" title=\"泛型集合\"></a><strong>泛型集合</strong></h5><ul>\n<li><p><strong>概念</strong>：参数化类型、类型安全的集合，强制集合元素的类型必须一致。</p>\n</li>\n<li><p>特点</p>\n<p>：</p>\n<ul>\n<li>编译时即可检查，而非运行时抛出异常。</li>\n<li>访问时，不必类型转换（拆箱）。</li>\n<li>不同泛型指尖引用不能相互赋值，泛型不存在多态。</li>\n</ul>\n</li>\n</ul>\n<p>之前我们在创建LinkedList类型对象的时候并没有使用泛型，但是进到它的源码中会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;E&gt;<br>    <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractSequentialList</span>&lt;E&gt;<br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable&#123;<span class=\"hljs-comment\">//略&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>它是一个泛型类，而我之前使用的时候并没有传递，说明java语法是允许的，这个时候传递的类型是Object类，虽然它是所有类的父类，可以存储任意的类型，但是在遍历、获取元素时需要原来的类型就要进行强制转换。这个时候就会出现一些问题，假如往链表里存储了许多不同类型的数据，在强转的时候就要判断每一个原来的类型，这样就很容易出现错误。</p>\n<hr>\n<h2 id=\"Set集合概述\"><a href=\"#Set集合概述\" class=\"headerlink\" title=\"Set集合概述\"></a>Set集合概述</h2><h3 id=\"Set子接口\"><a href=\"#Set子接口\" class=\"headerlink\" title=\"Set子接口\"></a>Set子接口</h3><ul>\n<li><p>特点：无序、无下标、元素不可重复。</p>\n</li>\n<li><p>方法：全部继承自Collection中的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 测试Set接口的使用</span><br><span class=\"hljs-comment\"> * 特点：1.无序，没有下标；2.重复</span><br><span class=\"hljs-comment\"> * 1.添加数据</span><br><span class=\"hljs-comment\"> * 2.删除数据</span><br><span class=\"hljs-comment\"> * 3.遍历【重点】</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tSet&lt;String&gt; set=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;String&gt;();<br>\t\t<span class=\"hljs-comment\">//1.添加数据</span><br>\t\tset.add(<span class=\"hljs-string\">&quot;tang&quot;</span>);<br>\t\tset.add(<span class=\"hljs-string\">&quot;he&quot;</span>);<br>\t\tset.add(<span class=\"hljs-string\">&quot;yu&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;数据个数：&quot;</span>+set.size());<br>\t\tSystem.out.println(set.toString());<span class=\"hljs-comment\">//无序输出</span><br>\t\t<span class=\"hljs-comment\">//2.删除数据</span><br>\t\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t * set.remove(&quot;tang&quot;); System.out.println(set.toString());</span><br><span class=\"hljs-comment\">\t\t */</span><br>\t\t<span class=\"hljs-comment\">//3.遍历【重点】</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span> (String string : set) &#123;<br>\t\t\tSystem.out.println(string);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用迭代器</span><br>\t\tIterator&lt;String&gt; iterator=set.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(set.contains(<span class=\"hljs-string\">&quot;tang&quot;</span>));<br>\t\tSystem.out.println(set.isEmpty());<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Set实现类\"><a href=\"#Set实现类\" class=\"headerlink\" title=\"Set实现类\"></a>Set实现类</h2><h3 id=\"HashSet【重点】\"><a href=\"#HashSet【重点】\" class=\"headerlink\" title=\"HashSet【重点】\"></a>HashSet【重点】</h3><ul>\n<li>基于HashCode计算元素存放位置。</li>\n<li>当存入元素的哈希码相同时，会调用equals进行确认，如结果为true，则拒绝后者存入。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 人类</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>\t<span class=\"hljs-keyword\">private</span> String name;<br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Person</span><span class=\"hljs-params\">(String name,<span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> age;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.age = age;<br>\t&#125;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Peerson [name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, age=&quot;</span> + age + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * HashSet集合的使用</span><br><span class=\"hljs-comment\"> * 存储结构：哈希表（数组+链表+红黑树）</span><br><span class=\"hljs-comment\"> * 1.添加元素</span><br><span class=\"hljs-comment\"> * 2.删除元素</span><br><span class=\"hljs-comment\"> * 3.遍历</span><br><span class=\"hljs-comment\"> * 4.判断</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo3</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tHashSet&lt;Person&gt; hashSet=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>\t\tPerson p1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>,<span class=\"hljs-number\">21</span>);<br>\t\tPerson p2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;刘德华&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tPerson p3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\thashSet.add(p1);<br>\t\thashSet.add(p2);<br>\t\thashSet.add(p3);<br>        <span class=\"hljs-comment\">//重复，添加失败</span><br>        hashSet.add(p3);<br>        <span class=\"hljs-comment\">//直接new一个相同属性的对象，依然会被添加，不难理解。</span><br>        <span class=\"hljs-comment\">//假如相同属性便认为是同一个对象，怎么修改？</span><br>        hashSet.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">21</span>));<br>\t\tSystem.out.println(hashSet.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\thashSet.remove(p2);<br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//3.1 增强for</span><br>\t\t<span class=\"hljs-keyword\">for</span> (Person person : hashSet) &#123;<br>\t\t\tSystem.out.println(person);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 迭代器</span><br>\t\tIterator&lt;Person&gt; iterator=hashSet.iterator();<br>\t\t<span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>\t\t\tSystem.out.println(iterator.next());\t\t<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(hashSet.isEmpty());<br>        <span class=\"hljs-comment\">//直接new一个相同属性的对象结果输出是false，不难理解。</span><br>        <span class=\"hljs-comment\">//注：假如相同属性便认为是同一个对象，该怎么做？</span><br>\t\tSystem.out.println(hashSet.contains(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">21</span>)));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>注</strong>：hashSet存储过程：</p>\n<ol>\n<li>根据hashCode计算保存的位置，如果位置为空，则直接保存，否则执行第二步。</li>\n<li>执行equals方法，如果方法返回true，则认为是重复，拒绝存储，否则形成链表。</li>\n</ol>\n<p>存储过程实际上就是重复依据，要实现“注”里的问题，可以重写hashCode和equals代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">prime</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">31</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    result = prime * result + age;<br>    result = prime * result + ((name == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : name.hashCode());<br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> == obj)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-literal\">null</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">if</span> (getClass() != obj.getClass())<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">other</span> <span class=\"hljs-operator\">=</span> (Person) obj;<br>    <span class=\"hljs-keyword\">if</span> (age != other.age)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">if</span> (name == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (other.name != <span class=\"hljs-literal\">null</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!name.equals(other.name))<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>hashCode方法里为什么要使用31这个数字大概有两个原因：</p>\n<ol>\n<li><p>31是一个质数，这样的数字在计算时可以尽量减少散列冲突。</p>\n</li>\n<li><p>可以提高执行效率，因为31*i=(i&lt;&lt;5)-i，31乘以一个数可以转换成移位操作，这样能快一点；但是也有网上一些人对这两点提出质疑。</p>\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><ul>\n<li>基于排序顺序实现不重复。</li>\n<li>实现了SortedSet接口，对集合元素自动排序。</li>\n<li>元素对象的类型必须实现Comparable接口，指定排序规则。</li>\n<li>通过CompareTo方法确定是否为重复元素。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 使用TreeSet保存数据</span><br><span class=\"hljs-comment\"> * 存储结构：红黑树</span><br><span class=\"hljs-comment\"> * 要求：元素类必须实现Comparable接口，compareTo方法返回0，认为是重复元素 </span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo4</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeSet&lt;Person&gt; persons=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;Person&gt;();<br>\t\tPerson p1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;tang&quot;</span>,<span class=\"hljs-number\">21</span>);<br>\t\tPerson p2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tPerson p3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\tpersons.add(p1);<br>\t\tpersons.add(p2);<br>\t\tpersons.add(p3);<br>\t\t<span class=\"hljs-comment\">//注：直接添加会报类型转换错误，需要实现Comparable接口</span><br>\t\tSystem.out.println(persons.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\tpersons.remove(p1);<br>\t\tpersons.remove(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">22</span>));<br>\t\tSystem.out.println(persons.toString());<br>\t\t<span class=\"hljs-comment\">//3.遍历（略）</span><br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(persons.contains(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">21</span>)));<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>查看Comparable接口的源码，发现只有一个compareTo抽象方法，在人类中实现它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Person&gt;&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-comment\">//1.先按姓名比</span><br>\t<span class=\"hljs-comment\">//2.再按年龄比</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Person o)</span> &#123;<br>\t\t<span class=\"hljs-type\">int</span> n1=<span class=\"hljs-built_in\">this</span>.getName().compareTo(o.getName());<br>\t\t<span class=\"hljs-type\">int</span> n2=<span class=\"hljs-built_in\">this</span>.age-o.getAge();<br>\t\t<span class=\"hljs-keyword\">return</span> n1==<span class=\"hljs-number\">0</span>?n2:n1;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>除了实现Comparable接口里的比较方法，TreeSet也提供了一个带比较器Comparator的构造方法，使用匿名内部类来实现它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * TreeSet的使用</span><br><span class=\"hljs-comment\"> * Comparator：实现定制比较（比较器）</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo5</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeSet&lt;Person&gt; persons=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;Person&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Person&gt;() &#123;<br>\t\t\t<span class=\"hljs-meta\">@Override</span><br>\t\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Person o1, Person o2)</span> &#123;<br>\t\t\t\t<span class=\"hljs-comment\">// 先按年龄比较</span><br>\t\t\t\t<span class=\"hljs-comment\">// 再按姓名比较</span><br>\t\t\t\t<span class=\"hljs-type\">int</span> n1=o1.getAge()-o2.getAge();<br>\t\t\t\t<span class=\"hljs-type\">int</span> n2=o1.getName().compareTo(o2.getName());<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> n1==<span class=\"hljs-number\">0</span>?n2:n1;<br>\t\t\t&#125;\t\t\t<br>\t\t&#125;);<br>\t\tPerson p1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;陈冠希&quot;</span>,<span class=\"hljs-number\">21</span>);<br>\t\tPerson p2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;吴彦祖&quot;</span>, <span class=\"hljs-number\">22</span>);<br>\t\tPerson p3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;彭于晏&quot;</span>, <span class=\"hljs-number\">21</span>);<br>\t\tpersons.add(p1);<br>\t\tpersons.add(p2);<br>\t\tpersons.add(p3);<br>\t\tSystem.out.println(persons.toString());<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来我们来做一个小案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 要求：使用TreeSet集合实现字符串按照长度进行排序</span><br><span class=\"hljs-comment\"> * helloworld tangrui hechengyang wangzixu yuguoming</span><br><span class=\"hljs-comment\"> * Comparator接口实现定制比较</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo6</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeSet&lt;String&gt; treeSet=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;String&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;String&gt;() &#123;<br>\t\t\t<span class=\"hljs-meta\">@Override</span><br>\t\t\t<span class=\"hljs-comment\">//先比较字符串长度</span><br>\t\t\t<span class=\"hljs-comment\">//再比较字符串</span><br>\t\t\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(String o1, String o2)</span> &#123;<br>\t\t\t\t<span class=\"hljs-type\">int</span> n1=o1.length()-o2.length();<br>\t\t\t\t<span class=\"hljs-type\">int</span> n2=o1.compareTo(o2);<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> n1==<span class=\"hljs-number\">0</span>?n2:n1;<br>\t\t\t&#125;\t\t\t<br>\t\t&#125;);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;chen&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;liu&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;peng&quot;</span>);<br>\t\ttreeSet.add(<span class=\"hljs-string\">&quot;liang&quot;</span>);<br>\t\tSystem.out.println(treeSet.toString());<br>        <span class=\"hljs-comment\">//输出[liu, chen, peng, hello, liang]</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Map集合的实现类\"><a href=\"#Map集合的实现类\" class=\"headerlink\" title=\"Map集合的实现类\"></a>Map集合的实现类</h2><h2 id=\"HashMap-【重点】\"><a href=\"#HashMap-【重点】\" class=\"headerlink\" title=\"HashMap 【重点】\"></a>HashMap 【重点】</h2><ul>\n<li>JDK1.2版本，线程不安全，运行效率快；允许用null作为key或是value。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 学生类</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>  \t<span class=\"hljs-keyword\">private</span> String name;<br>  \t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;\t<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> id)</span> &#123;<br>  \t\t<span class=\"hljs-built_in\">super</span>();<br>  \t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>  \t\t<span class=\"hljs-built_in\">this</span>.id = id;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>  \t\t<span class=\"hljs-keyword\">return</span> name;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>  \t\t<span class=\"hljs-built_in\">this</span>.name = name;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getId</span><span class=\"hljs-params\">()</span> &#123;<br>  \t\t<span class=\"hljs-keyword\">return</span> id;<br>  \t&#125;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span> &#123;<br>  \t\t<span class=\"hljs-built_in\">this</span>.id = id;<br>  \t&#125;<br>  \t<span class=\"hljs-meta\">@Override</span><br>  \t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>  \t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student [name=&quot;</span> + name + <span class=\"hljs-string\">&quot;, age=&quot;</span> + id + <span class=\"hljs-string\">&quot;]&quot;</span>;<br>  \t&#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * HashMap的使用</span><br><span class=\"hljs-comment\">   * 存储结构：哈希表（数组+链表+红黑树）</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo2</span> &#123;<br>  \t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>  \t\tHashMap&lt;Student, String&gt; hashMap=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;Student, String&gt;();<br>  \t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;tang&quot;</span>, <span class=\"hljs-number\">36</span>);<br>  \t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">101</span>);<br>  \t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>);<br>  \t\t<span class=\"hljs-comment\">//1.添加元素</span><br>  \t\thashMap.put(s1, <span class=\"hljs-string\">&quot;成都&quot;</span>);<br>  \t\thashMap.put(s2, <span class=\"hljs-string\">&quot;杭州&quot;</span>);<br>  \t\thashMap.put(s3, <span class=\"hljs-string\">&quot;郑州&quot;</span>);<br>  \t\t<span class=\"hljs-comment\">//添加失败，但会更新值</span><br>  \t\thashMap.put(s3,<span class=\"hljs-string\">&quot;上海&quot;</span>);<br>  \t\t<span class=\"hljs-comment\">//添加成功，不过两个属性一模一样；</span><br>  \t\t<span class=\"hljs-comment\">//注：假如相同属性便认为是同一个对象，怎么修改？</span><br>  \t\thashMap.put(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>),<span class=\"hljs-string\">&quot;上海&quot;</span>);<br>  \t\tSystem.out.println(hashMap.toString());<br>  \t\t<span class=\"hljs-comment\">//2.删除元素</span><br>  \t\thashMap.remove(s3);<br>  \t\tSystem.out.println(hashMap.toString());<br>  \t\t<span class=\"hljs-comment\">//3.遍历</span><br>  \t\t<span class=\"hljs-comment\">//3.1 使用keySet()遍历</span><br>  \t\t<span class=\"hljs-keyword\">for</span> (Student key : hashMap.keySet()) &#123;<br>  \t\t\tSystem.out.println(key+<span class=\"hljs-string\">&quot; &quot;</span>+hashMap.get(key));<br>  \t\t&#125;<br>  \t\t<span class=\"hljs-comment\">//3.2 使用entrySet()遍历</span><br>  \t\t<span class=\"hljs-keyword\">for</span> (Entry&lt;Student, String&gt; entry : hashMap.entrySet()) &#123;<br>  \t\t\tSystem.out.println(entry.getKey()+<span class=\"hljs-string\">&quot; &quot;</span>+entry.getValue());<br>  \t\t&#125;<br>  \t\t<span class=\"hljs-comment\">//4.判断</span><br>  \t\t<span class=\"hljs-comment\">//注：同上</span><br>  \t\tSystem.out.println(hashMap.containsKey(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>)));<br>  \t\tSystem.out.println(hashMap.containsValue(<span class=\"hljs-string\">&quot;成都&quot;</span>));<br>  \t&#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>注：和之前说过的HashSet类似，重复依据是hashCode和equals方法，重写即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">prime</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">31</span>;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>      result = prime * result + id;<br>      result = prime * result + ((name == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : name.hashCode());<br>      <span class=\"hljs-keyword\">return</span> result;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object obj)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> == obj)<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-keyword\">if</span> (obj == <span class=\"hljs-literal\">null</span>)<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-keyword\">if</span> (getClass() != obj.getClass())<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">other</span> <span class=\"hljs-operator\">=</span> (Student) obj;<br>      <span class=\"hljs-keyword\">if</span> (id != other.id)<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-keyword\">if</span> (name == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">if</span> (other.name != <span class=\"hljs-literal\">null</span>)<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!name.equals(other.name))<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"HashMap-源码分析\"><a href=\"#HashMap-源码分析\" class=\"headerlink\" title=\"HashMap 源码分析\"></a>HashMap 源码分析</h2><ul>\n<li>默认初始化容量：<code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</code></li>\n</ul>\n<ul>\n<li>数组最大容量：<code>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</code></li>\n</ul>\n<ul>\n<li><p>默认加载因子：<code>static final float DEFAULT_LOAD_FACTOR = 0.75f;</code></p>\n</li>\n<li><p>链表调整为红黑树的链表长度阈值（JDK1.8）：<code>static final int TREEIFY_THRESHOLD = 8;</code></p>\n</li>\n<li><p>红黑树调整为链表的链表长度阈值（JDK1.8）：<code>static final int UNTREEIFY_THRESHOLD = 6;</code></p>\n</li>\n<li><p>链表调整为红黑树的数组最小阈值（JDK1.8）：<code>static final int MIN_TREEIFY_CAPACITY = 64;</code></p>\n</li>\n<li><p>HashMap存储的数组：<code>transient Node&lt;K,V&gt;[] table;</code></p>\n</li>\n<li><p>HashMap存储的元素个数：<code>transient int size;</code></p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>默认加载因子是什么？<ul>\n<li>就是判断数组是否扩容的一个因子。假如数组容量为100，如果HashMap的存储元素个数超过了100*0.75=75，那么就会进行扩容。</li>\n</ul>\n</li>\n<li>链表调整为红黑树的链表长度阈值是什么？<ul>\n<li>假设在数组中下标为3的位置已经存储了数据，当新增数据时通过哈希码得到的存储位置又是3，那么就会在该位置形成一个链表，当链表过长时就会转换成红黑树以提高执行效率，这个阈值就是链表转换成红黑树的最短链表长度；</li>\n</ul>\n</li>\n<li>红黑树调整为链表的链表长度阈值是什么？<ul>\n<li>当红黑树的元素个数小于该阈值时就会转换成链表。</li>\n</ul>\n</li>\n<li>链表调整为红黑树的数组最小阈值是什么？<ul>\n<li>并不是只要链表长度大于8就可以转换成红黑树，在前者条件成立的情况下，数组的容量必须大于等于64才会进行转换。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>HashMap的数组table存储的就是一个个的Node&lt;K,V&gt;类型，很清晰地看到有一对键值，还有一个指向next的指针（以下只截取了部分源码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;K,V&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Map</span>.Entry&lt;K,V&gt; &#123;<br>      <span class=\"hljs-keyword\">final</span> K key;<br>      V value;<br>      Node&lt;K,V&gt; next;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>之前的代码中在new对象时调用的是HashMap的无参构造方法，进入到该构造方法的源码查看一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashMap</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"hljs-comment\">// all other fields defaulted</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>发现没什么内容，只是赋值了一个默认加载因子；而在上文我们观察到源码中table和size都没有赋予初始值，说明刚创建的HashMap对象没有分配容量，并不拥有默认的16个空间大小，这样做的目的是为了节约空间，此时table为null，size为0。</p>\n<p>当我们往对象里添加元素时调用put方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K key, V value)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> putVal(hash(key), key, value, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>);<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>put方法把key和value传给了putVal，同时还传入了一个hash(Key)所返回的值，这是一个产生哈希值的方法，再进入到putVal方法（部分源码）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> V <span class=\"hljs-title function_\">putVal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hash, K key, V value, <span class=\"hljs-type\">boolean</span> onlyIfAbsent,</span><br><span class=\"hljs-params\">                    <span class=\"hljs-type\">boolean</span> evict)</span> &#123;<br>      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"hljs-type\">int</span> n, i;<br>      <span class=\"hljs-keyword\">if</span> ((tab = table) == <span class=\"hljs-literal\">null</span> || (n = tab.length) == <span class=\"hljs-number\">0</span>)<br>          n = (tab = resize()).length;<br>      <span class=\"hljs-keyword\">if</span> ((p = tab[i = (n - <span class=\"hljs-number\">1</span>) &amp; hash]) == <span class=\"hljs-literal\">null</span>)<br>          tab[i] = newNode(hash, key, value, <span class=\"hljs-literal\">null</span>);<br>      <span class=\"hljs-keyword\">else</span>&#123;<br>          <span class=\"hljs-comment\">//略</span><br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里面创建了一个tab数组和一个Node变量p，第一个if实际是判断table是否为空，而我们现在只关注刚创建HashMap对象时的状态，此时tab和table都为空，满足条件，执行内部代码，这条代码其实就是把resize()所返回的结果赋给tab，n就是tab的长度，resize顾名思义就是重新调整大小。查看resize()源码（部分）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>      Node&lt;K,V&gt;[] oldTab = table;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldCap</span> <span class=\"hljs-operator\">=</span> (oldTab == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : oldTab.length;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldThr</span> <span class=\"hljs-operator\">=</span> threshold;<br>      <span class=\"hljs-keyword\">if</span> (oldCap &gt; <span class=\"hljs-number\">0</span>);<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (oldThr &gt; <span class=\"hljs-number\">0</span>);<br>      <span class=\"hljs-keyword\">else</span> &#123;               <span class=\"hljs-comment\">// zero initial threshold signifies using defaults</span><br>          newCap = DEFAULT_INITIAL_CAPACITY;<br>          newThr = (<span class=\"hljs-type\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>      &#125; <br>      <span class=\"hljs-meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>      Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>[newCap];<br>      table = newTab;<br>      <span class=\"hljs-keyword\">return</span> newTab;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>该方法首先把table及其长度赋值给oldTab和oldCap；threshold是阈值的意思，此时为0，所以前两个if先不管，最后else里newCap的值为默认初始化容量16；往下创建了一个newCap大小的数组并将其赋给了table，刚创建的HashMap对象就在这里获得了初始容量。然后我们再回到putVal方法，第二个if就是根据哈希码得到的tab中的一个位置是否为空，为空便直接添加元素，此时数组中无元素所以直接添加。至此HashMap对象就完成了第一个元素的添加。当添加的元素超过16*0.75=12时，就会进行扩容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> V <span class=\"hljs-title function_\">putVal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hash, K key, V value, <span class=\"hljs-type\">boolean</span> onlyIfAbsent,<span class=\"hljs-type\">boolean</span> evict)</span>&#123;<br>      <span class=\"hljs-keyword\">if</span> (++size &gt; threshold)<br>          resize();<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>扩容的代码如下（部分）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldCap</span> <span class=\"hljs-operator\">=</span> (oldTab == <span class=\"hljs-literal\">null</span>) ? <span class=\"hljs-number\">0</span> : oldTab.length;<br>      <span class=\"hljs-type\">int</span> newCap;<br>      <span class=\"hljs-keyword\">if</span> (oldCap &gt; <span class=\"hljs-number\">0</span>) &#123;<br>          <span class=\"hljs-keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class=\"hljs-comment\">//略&#125;</span><br>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"hljs-number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                   oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>核心部分是else if里的移位操作，<strong>也就是说每次扩容都是原来大小的两倍</strong>。</p>\n<ul>\n<li>注**：额外说明的一点是在JDK1.8以前链表是头插入，JDK1.8以后链表是尾插入。</li>\n</ul>\n<hr>\n<h4 id=\"HashSet源码分析\"><a href=\"#HashSet源码分析\" class=\"headerlink\" title=\"HashSet源码分析\"></a><strong>HashSet源码分析</strong></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashSet</span>&lt;E&gt;<br>      <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractSet</span>&lt;E&gt;<br>      <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable<br>  &#123;<br>      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> HashMap&lt;E,Object&gt; map;<br>      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">PRESENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>      <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashSet</span><span class=\"hljs-params\">()</span> &#123;<br>          map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>HashSet的存储结构就是HashMap，那它的存储方式是怎样的呢？可以看一下add方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> map.put(e, PRESENT)==<span class=\"hljs-literal\">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>很明了地发现它的add方法调用的就是map的put方法，把元素作为map的key传进去的。。</p>\n<h2 id=\"Hashtable\"><a href=\"#Hashtable\" class=\"headerlink\" title=\"Hashtable\"></a>Hashtable</h2><ul>\n<li><p>JDK1.0版本，线程安全，运行效率慢；不允许null作为key或是value。</p>\n</li>\n<li><p>初始容量11，加载因子0.75。</p>\n<p>这个集合在开发过程中已经不用了，稍微了解即可。</p>\n</li>\n</ul>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a><strong>Properties</strong></h3><ul>\n<li>Hashtable的子类，要求key和value都是String。通常用于配置文件的读取。</li>\n</ul>\n<p>它继承了Hashtable的方法，与流关系密切，此处不详解。</p>\n<h3 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h3><ul>\n<li>实现了SortedMap接口（是Map的子接口），可以对key自动排序。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * TreeMap的使用</span><br><span class=\"hljs-comment\"> * 存储结构：红黑树</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo3</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tTreeMap&lt;Student, Integer&gt; treeMap=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;Student, Integer&gt;();<br>\t\tStudent s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;tang&quot;</span>, <span class=\"hljs-number\">36</span>);<br>\t\tStudent s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;yu&quot;</span>, <span class=\"hljs-number\">101</span>);<br>\t\tStudent s3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>);<br>\t\t<span class=\"hljs-comment\">//1.添加元素</span><br>\t\ttreeMap.put(s1, <span class=\"hljs-number\">21</span>);<br>\t\ttreeMap.put(s2, <span class=\"hljs-number\">22</span>);<br>\t\ttreeMap.put(s3, <span class=\"hljs-number\">21</span>);<br>\t\t<span class=\"hljs-comment\">//不能直接打印，需要实现Comparable接口，因为红黑树需要比较大小</span><br>\t\tSystem.out.println(treeMap.toString());<br>\t\t<span class=\"hljs-comment\">//2.删除元素</span><br>\t\ttreeMap.remove(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;he&quot;</span>, <span class=\"hljs-number\">10</span>));<br>\t\tSystem.out.println(treeMap.toString());<br>\t\t<span class=\"hljs-comment\">//3.遍历</span><br>\t\t<span class=\"hljs-comment\">//3.1 使用keySet()</span><br>\t\t<span class=\"hljs-keyword\">for</span> (Student key : treeMap.keySet()) &#123;<br>\t\t\tSystem.out.println(key+<span class=\"hljs-string\">&quot; &quot;</span>+treeMap.get(key));<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//3.2 使用entrySet()</span><br>\t\t<span class=\"hljs-keyword\">for</span> (Entry&lt;Student, Integer&gt; entry : treeMap.entrySet()) &#123;<br>\t\t\tSystem.out.println(entry.getKey()+<span class=\"hljs-string\">&quot; &quot;</span>+entry.getValue());<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//4.判断</span><br>\t\tSystem.out.println(treeMap.containsKey(s1));<br>\t\tSystem.out.println(treeMap.isEmpty());\t\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在学生类中实现Comparable接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Student&gt;&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Student o)</span> &#123;<br>        <span class=\"hljs-type\">int</span> n1=<span class=\"hljs-built_in\">this</span>.id-o.id;<br>        <span class=\"hljs-keyword\">return</span> n1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>除此之外还可以使用比较器来定制比较：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">TreeMap&lt;Student, Integer&gt; treeMap2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;Student, Integer&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Student o1, Student o2)</span> &#123;<br>        <span class=\"hljs-comment\">// 略</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;\t\t\t<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"TreeSet源码\"><a href=\"#TreeSet源码\" class=\"headerlink\" title=\"TreeSet源码\"></a>TreeSet源码</h3><p>与HashSet类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;E&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractSet</span>&lt;E&gt;<br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable<br>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> NavigableMap&lt;E,Object&gt; m;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">PRESENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;<br>        <span class=\"hljs-built_in\">this</span>.m = m;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TreeSet</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;E,Object&gt;());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>TreeSet的存储结构实际上就是TreeMap，再来看其存储方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> m.put(e, PRESENT)==<span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>它的add方法调用的就是TreeMap的put方法，将元素作为key传入到存储结构中。</p>\n<hr>\n<h2 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a><strong>Collections工具类</strong></h2><p><strong>概念</strong>：集合工具类，定义了除了存取以外的集合常用方法。</p>\n<p><strong>方法</strong>：</p>\n<ul>\n<li><code>public static void reverse(List&lt;?&gt; list)</code>//反转集合中元素的顺序</li>\n<li><code>public static void shuffle(List&lt;?&gt; list)</code>//随机重置集合元素的顺序</li>\n<li><code>public static void sort(List&lt;T&gt; list)</code>//升序排序（元素类型必须实现Comparable接口）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 演示Collections工具类的使用</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo4</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tList&lt;Integer&gt; list=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();<br>\t\tlist.add(<span class=\"hljs-number\">20</span>);<br>\t\tlist.add(<span class=\"hljs-number\">10</span>);<br>\t\tlist.add(<span class=\"hljs-number\">30</span>);<br>\t\tlist.add(<span class=\"hljs-number\">90</span>);<br>\t\tlist.add(<span class=\"hljs-number\">70</span>);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//sort排序</span><br>\t\tSystem.out.println(list.toString());<br>\t\tCollections.sort(list);<br>\t\tSystem.out.println(list.toString());<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;---------&quot;</span>);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//binarySearch二分查找</span><br>\t\t<span class=\"hljs-type\">int</span> i=Collections.binarySearch(list, <span class=\"hljs-number\">10</span>);<br>\t\tSystem.out.println(i);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//copy复制</span><br>\t\tList&lt;Integer&gt; list2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i1=<span class=\"hljs-number\">0</span>;i1&lt;<span class=\"hljs-number\">5</span>;++i1) &#123;<br>\t\t\tlist2.add(<span class=\"hljs-number\">0</span>);<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//该方法要求目标元素容量大于等于源目标</span><br>\t\tCollections.copy(list2, list);<br>\t\tSystem.out.println(list2.toString());<br>\t\t<br>\t\t<span class=\"hljs-comment\">//reserve反转</span><br>\t\tCollections.reverse(list2);<br>\t\tSystem.out.println(list2.toString());<br>\t\t<br>\t\t<span class=\"hljs-comment\">//shuffle 打乱</span><br>\t\tCollections.shuffle(list2);<br>\t\tSystem.out.println(list2.toString());<br>\t\t<br>\t\t<span class=\"hljs-comment\">//补充：list转成数组</span><br>\t\tInteger[] arr=list.toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[<span class=\"hljs-number\">0</span>]);<br>\t\tSystem.out.println(arr.length);<br>\t\t<span class=\"hljs-comment\">//补充：数组转成集合 </span><br>\t\tString[] nameStrings= &#123;<span class=\"hljs-string\">&quot;tang&quot;</span>,<span class=\"hljs-string\">&quot;he&quot;</span>,<span class=\"hljs-string\">&quot;yu&quot;</span>&#125;;<br>\t\t<span class=\"hljs-comment\">//受限集合，不能添加和删除</span><br>\t\tList&lt;String&gt; list3=Arrays.asList(nameStrings);<br>\t\tSystem.out.println(list3);<br>\t\t<br>\t\t<span class=\"hljs-comment\">//注：基本类型转成集合时需要修改为包装类</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>本文已完结</p>\n<ul>\n<li>本文源于:<a href=\"https://lazydog036.gitee.io/2020/10/29/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/\">https://lazydog036.gitee.io/2020/10/29/JAVA%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</a></li>\n</ul>\n"},{"title":"WhiteJotter","date":"2022-03-25T01:11:24.000Z","author":"Evan","index_img":"/img/bg7.jpg","_content":"\n\n\n# 引言\n\n在csdn上看到一个vue+springboot的项目实战教程很不错：https://learner.blog.csdn.net/article/details/88925013，\n\n跟着做一下，锻炼一下自己。本文旨在记录下开发过程中遇到的问题和解决方法。\n\n\n\n \n\n## 1.\n\n如果前端打包之后dist文件夹下面的文件copy到后端static目录下 ，访问` http://localhost:8080/index.html` 这个地址，没有出现作者说的获取到一个空白页面而是出现了404报错，可以在idea中，找到项目结构（快捷键：ctrl+alt+shift+s），选择工件，添加一个空的JAR类型的工件，再重新运行项目，访问`http://localhost:8080/index.html`这个地址会正常出现作者说的空白页面，`http://localhost:8080/login`，如果没有设置后端ErrorConfig,会出现作者说的错误页，设置后则会正常出现登录界面。\n\n## 2.\n\n### 报错\n\n```\n//引入vuex的时候报错\nD:\\study\\ey-vue>npm install vuex --save\nnpm ERR! code ERESOLVE\nnpm ERR! ERESOLVE unable to resolve dependency tree\nnpm ERR!\nnpm ERR! While resolving: my-project@1.0.0\nnpm ERR! Found: vue@2.6.14\nnpm ERR! node_modules/vue\nnpm ERR!   vue@\"^2.5.2\" from the root project\nnpm ERR!\nnpm ERR! Could not resolve dependency:\nnpm ERR! peer vue@\"^3.0.2\" from vuex@4.0.2\nnpm ERR! node_modules/vuex\nnpm ERR!   vuex@\"*\" from the root project\nnpm ERR!\nnpm ERR! Fix the upstream dependency conflict, or retry\nnpm ERR! this command with --force, or --legacy-peer-deps\nnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.\nnpm ERR!\nnpm ERR! See C:\\Users\\Evan\\AppData\\Local\\npm-cache\\eresolve-report.txt for a full report.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\2022-03-24T09_36_10_865Z-debug-0.log\n\n```\n\n解决方法：\n\n```\nnpm install vuex@3.6.2 -S\n```\n\n## 3.\n\n**报错:**\n\n添加修改图书时，选择分类，只有第一次点击才有图书分类,并且console报错。\n\n**错误原因**\n\neditForm里面的clear()有问题，执行之后会造成category的属性丢失，从而导致连续添加图书的时候，第二次会出现无法选择图书分类，而且console报错\n\n```javascript\nclear () {\n      this.form = {\n        id: '',\n        title: '',\n        author: '',\n        date: '',\n        press: '',\n        cover: '',\n        abs: '',\n       //原因：\n          category: ''\n      }\n   },\n```\n\n**解决方法**\n\n```js\n   //可以将clear中category属性赋空，而不是将category赋值为空\n   category: {\n                id: '',\n                name: ''\n              }\n```\n\n## 4.\n\n**出错：**\n\n 教程添加“文件上传”的模块后，没有“点击上传”按钮，\n\n**解决方法**\n\n```js\nimport ImgUpload from './ImgUpload'\n      export default {\n        name: 'EditForm',\n        components: {ImgUpload},//导入时还要加入这一行代码\n```\n\n","source":"_posts/WhiteJotter.md","raw":"---\ntitle: WhiteJotter\ndate: 2022-03-25 09:11:24\nauthor: Evan\nindex_img: /img/bg7.jpg\ncategories: 笔记\ntags:\n- vue\n- springboot\n---\n\n\n\n# 引言\n\n在csdn上看到一个vue+springboot的项目实战教程很不错：https://learner.blog.csdn.net/article/details/88925013，\n\n跟着做一下，锻炼一下自己。本文旨在记录下开发过程中遇到的问题和解决方法。\n\n\n\n \n\n## 1.\n\n如果前端打包之后dist文件夹下面的文件copy到后端static目录下 ，访问` http://localhost:8080/index.html` 这个地址，没有出现作者说的获取到一个空白页面而是出现了404报错，可以在idea中，找到项目结构（快捷键：ctrl+alt+shift+s），选择工件，添加一个空的JAR类型的工件，再重新运行项目，访问`http://localhost:8080/index.html`这个地址会正常出现作者说的空白页面，`http://localhost:8080/login`，如果没有设置后端ErrorConfig,会出现作者说的错误页，设置后则会正常出现登录界面。\n\n## 2.\n\n### 报错\n\n```\n//引入vuex的时候报错\nD:\\study\\ey-vue>npm install vuex --save\nnpm ERR! code ERESOLVE\nnpm ERR! ERESOLVE unable to resolve dependency tree\nnpm ERR!\nnpm ERR! While resolving: my-project@1.0.0\nnpm ERR! Found: vue@2.6.14\nnpm ERR! node_modules/vue\nnpm ERR!   vue@\"^2.5.2\" from the root project\nnpm ERR!\nnpm ERR! Could not resolve dependency:\nnpm ERR! peer vue@\"^3.0.2\" from vuex@4.0.2\nnpm ERR! node_modules/vuex\nnpm ERR!   vuex@\"*\" from the root project\nnpm ERR!\nnpm ERR! Fix the upstream dependency conflict, or retry\nnpm ERR! this command with --force, or --legacy-peer-deps\nnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.\nnpm ERR!\nnpm ERR! See C:\\Users\\Evan\\AppData\\Local\\npm-cache\\eresolve-report.txt for a full report.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\2022-03-24T09_36_10_865Z-debug-0.log\n\n```\n\n解决方法：\n\n```\nnpm install vuex@3.6.2 -S\n```\n\n## 3.\n\n**报错:**\n\n添加修改图书时，选择分类，只有第一次点击才有图书分类,并且console报错。\n\n**错误原因**\n\neditForm里面的clear()有问题，执行之后会造成category的属性丢失，从而导致连续添加图书的时候，第二次会出现无法选择图书分类，而且console报错\n\n```javascript\nclear () {\n      this.form = {\n        id: '',\n        title: '',\n        author: '',\n        date: '',\n        press: '',\n        cover: '',\n        abs: '',\n       //原因：\n          category: ''\n      }\n   },\n```\n\n**解决方法**\n\n```js\n   //可以将clear中category属性赋空，而不是将category赋值为空\n   category: {\n                id: '',\n                name: ''\n              }\n```\n\n## 4.\n\n**出错：**\n\n 教程添加“文件上传”的模块后，没有“点击上传”按钮，\n\n**解决方法**\n\n```js\nimport ImgUpload from './ImgUpload'\n      export default {\n        name: 'EditForm',\n        components: {ImgUpload},//导入时还要加入这一行代码\n```\n\n","slug":"WhiteJotter","published":1,"updated":"2022-05-23T06:49:28.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3kwbmx600025cu3ai7w2ppi","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在csdn上看到一个vue+springboot的项目实战教程很不错：<a href=\"https://learner.blog.csdn.net/article/details/88925013%EF%BC%8C\">https://learner.blog.csdn.net/article/details/88925013，</a></p>\n<p>跟着做一下，锻炼一下自己。本文旨在记录下开发过程中遇到的问题和解决方法。</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p>如果前端打包之后dist文件夹下面的文件copy到后端static目录下 ，访问<code> http://localhost:8080/index.html</code> 这个地址，没有出现作者说的获取到一个空白页面而是出现了404报错，可以在idea中，找到项目结构（快捷键：ctrl+alt+shift+s），选择工件，添加一个空的JAR类型的工件，再重新运行项目，访问<code>http://localhost:8080/index.html</code>这个地址会正常出现作者说的空白页面，<code>http://localhost:8080/login</code>，如果没有设置后端ErrorConfig,会出现作者说的错误页，设置后则会正常出现登录界面。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs erlang-repl\">//引入vuex的时候报错<br>D:\\study\\ey-vue&gt;npm install vuex --save<br>npm ERR! code ERESOLVE<br>npm ERR! ERESOLVE unable to resolve dependency tree<br>npm ERR!<br>npm ERR! While resolving: my-project@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><br>npm ERR! Found: vue@<span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">14</span><br>npm ERR! node_modules/vue<br>npm ERR!   vue@<span class=\"hljs-string\">&quot;^2.5.2&quot;</span> from the root project<br>npm ERR!<br>npm ERR! Could not resolve dependency:<br>npm ERR! peer vue@<span class=\"hljs-string\">&quot;^3.0.2&quot;</span> from vuex@<span class=\"hljs-number\">4.0</span>.<span class=\"hljs-number\">2</span><br>npm ERR! node_modules/vuex<br>npm ERR!   vuex@<span class=\"hljs-string\">&quot;*&quot;</span> from the root project<br>npm ERR!<br>npm ERR! Fix the upstream dependency conflict, or retry<br>npm ERR! this command with --force, or --legacy-peer-deps<br>npm ERR! to accept an incorrect (and potentially broken) dependency resolution.<br>npm ERR!<br>npm ERR! See C:\\Users\\Evan\\AppData\\Local\\npm-cache\\eresolve-report.txt for a full report.<br><br>npm ERR! A complete log of this run can be found in:<br>npm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">24</span>T09_36_10_865Z-debug-<span class=\"hljs-number\">0</span>.log<br><br></code></pre></td></tr></table></figure>\n\n<p>解决方法：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">npm</span> install vuex@<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">2</span> -S<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><p><strong>报错:</strong></p>\n<p>添加修改图书时，选择分类，只有第一次点击才有图书分类,并且console报错。</p>\n<p><strong>错误原因</strong></p>\n<p>editForm里面的clear()有问题，执行之后会造成category的属性丢失，从而导致连续添加图书的时候，第二次会出现无法选择图书分类，而且console报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">clear () &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">form</span> = &#123;<br>        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">author</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">press</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">cover</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">abs</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>       <span class=\"hljs-comment\">//原因：</span><br>          <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>      &#125;<br>   &#125;,<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//可以将clear中category属性赋空，而不是将category赋值为空</span><br><span class=\"hljs-attr\">category</span>: &#123;<br>             <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>             <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>           &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><p><strong>出错：</strong></p>\n<p> 教程添加“文件上传”的模块后，没有“点击上传”按钮，</p>\n<p><strong>解决方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ImgUpload</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ImgUpload&#x27;</span><br>      <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;EditForm&#x27;</span>,<br>        <span class=\"hljs-attr\">components</span>: &#123;<span class=\"hljs-title class_\">ImgUpload</span>&#125;,<span class=\"hljs-comment\">//导入时还要加入这一行代码</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1913,"excerpt":"","more":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在csdn上看到一个vue+springboot的项目实战教程很不错：<a href=\"https://learner.blog.csdn.net/article/details/88925013%EF%BC%8C\">https://learner.blog.csdn.net/article/details/88925013，</a></p>\n<p>跟着做一下，锻炼一下自己。本文旨在记录下开发过程中遇到的问题和解决方法。</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p>如果前端打包之后dist文件夹下面的文件copy到后端static目录下 ，访问<code> http://localhost:8080/index.html</code> 这个地址，没有出现作者说的获取到一个空白页面而是出现了404报错，可以在idea中，找到项目结构（快捷键：ctrl+alt+shift+s），选择工件，添加一个空的JAR类型的工件，再重新运行项目，访问<code>http://localhost:8080/index.html</code>这个地址会正常出现作者说的空白页面，<code>http://localhost:8080/login</code>，如果没有设置后端ErrorConfig,会出现作者说的错误页，设置后则会正常出现登录界面。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs erlang-repl\">//引入vuex的时候报错<br>D:\\study\\ey-vue&gt;npm install vuex --save<br>npm ERR! code ERESOLVE<br>npm ERR! ERESOLVE unable to resolve dependency tree<br>npm ERR!<br>npm ERR! While resolving: my-project@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span><br>npm ERR! Found: vue@<span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">14</span><br>npm ERR! node_modules/vue<br>npm ERR!   vue@<span class=\"hljs-string\">&quot;^2.5.2&quot;</span> from the root project<br>npm ERR!<br>npm ERR! Could not resolve dependency:<br>npm ERR! peer vue@<span class=\"hljs-string\">&quot;^3.0.2&quot;</span> from vuex@<span class=\"hljs-number\">4.0</span>.<span class=\"hljs-number\">2</span><br>npm ERR! node_modules/vuex<br>npm ERR!   vuex@<span class=\"hljs-string\">&quot;*&quot;</span> from the root project<br>npm ERR!<br>npm ERR! Fix the upstream dependency conflict, or retry<br>npm ERR! this command with --force, or --legacy-peer-deps<br>npm ERR! to accept an incorrect (and potentially broken) dependency resolution.<br>npm ERR!<br>npm ERR! See C:\\Users\\Evan\\AppData\\Local\\npm-cache\\eresolve-report.txt for a full report.<br><br>npm ERR! A complete log of this run can be found in:<br>npm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">24</span>T09_36_10_865Z-debug-<span class=\"hljs-number\">0</span>.log<br><br></code></pre></td></tr></table></figure>\n\n<p>解决方法：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">npm</span> install vuex@<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">6</span>.<span class=\"hljs-number\">2</span> -S<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><p><strong>报错:</strong></p>\n<p>添加修改图书时，选择分类，只有第一次点击才有图书分类,并且console报错。</p>\n<p><strong>错误原因</strong></p>\n<p>editForm里面的clear()有问题，执行之后会造成category的属性丢失，从而导致连续添加图书的时候，第二次会出现无法选择图书分类，而且console报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">clear () &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">form</span> = &#123;<br>        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">author</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">press</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">cover</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>        <span class=\"hljs-attr\">abs</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>       <span class=\"hljs-comment\">//原因：</span><br>          <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>      &#125;<br>   &#125;,<br></code></pre></td></tr></table></figure>\n\n<p><strong>解决方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//可以将clear中category属性赋空，而不是将category赋值为空</span><br><span class=\"hljs-attr\">category</span>: &#123;<br>             <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>             <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>           &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><p><strong>出错：</strong></p>\n<p> 教程添加“文件上传”的模块后，没有“点击上传”按钮，</p>\n<p><strong>解决方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ImgUpload</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ImgUpload&#x27;</span><br>      <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;EditForm&#x27;</span>,<br>        <span class=\"hljs-attr\">components</span>: &#123;<span class=\"hljs-title class_\">ImgUpload</span>&#125;,<span class=\"hljs-comment\">//导入时还要加入这一行代码</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Mybatis笔记","date":"2022-03-21T01:11:27.000Z","author":"Evan","index_img":"/img/bg6.jpg","_content":"\n# Mybatis笔记\n\n\n\n## 第一章\n\n### 1.三层架构\n界面层： 和用户打交道的， 接收用户的请求参数， 显示处理结果的。（jsp ，html ，servlet）\n业务逻辑层： 接收了界面层传递的数据，计算逻辑，调用数据库，获取数据\n数据访问层： 就是访问数据库， 执行对数据的查询，修改，删除等等的。\n\n\n     三层对应的包\n       界面层： controller包 （servlet）\n       业务逻辑层： service 包（XXXService类）\n       数据访问层： dao包（XXXDao类）\n\n\n     三层中类的交互\n       用户使用界面层--> 业务逻辑层--->数据访问层（持久层）-->数据库（mysql） \n    \n     三层对应的处理框架\n       界面层---servlet---springmvc（框架）\n       业务逻辑层---service类--spring（框架）\n       数据访问层---dao类--mybatis（框架）\n\n  \n\n\n\n\n\n\n\n ### 2.框架\n* 框架是一个舞台， 一个模版\n\n* 模版：\n  * 规定了好一些条款，内容。\n  * 加入自己的东西\n\n* 框架是一个模块\n      1.框架中定义好了一些功能。这些功能是可用的。\n      2.可以加入项目中自己的功能， 这些功能可以利用框架中写好的功能。\n\n* 框架是一个软件，半成品的软件，定义好了一些基础功能， 需要加入你的功能就是完整的。\n     基础功能是可重复使用的，可升级的。\n\n* 框架特点：\n\n  * 框架一般不是全能的， 不能做所有事情\n\n  * 框架是针对某一个领域有效。 特长在某一个方面，比如mybatis做数据库操作强，但是他不能做其它的。\n\n  * 框架是一个软件\n\n\n\n **mybatis框架**\n   一个框架，早期叫做ibatis,  代码在github。\n   mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）\n\n* 1）sql mapper :sql映射\n           可以把数据库表中的一行数据  映射为 一个java对象。\n        \t 一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据\n\n* 2） Data Access Objects（DAOs） : 数据访问 ， 对数据库执行增删改查。\n\n**mybatis提供了哪些功能：**\n\n* 1.提供了创建Connection ,Statement, ResultSet的能力 ，不用开发人员创建这些对象\n\n* 2.提供了执行sql语句的能力， 不用你执行sql\n\n* 3.提供了循环sql， 把sql的结果转为java对象， List集合的能力\n\n  ```java\n  while (rs.next()) {\n  \tStudent stu = new Student();\n  \tstu.setId(rs.getInt(\"id\"));\n  \tstu.setName(rs.getString(\"name\"));\n  \tstu.setAge(rs.getInt(\"age\"));\n  \t//从数据库取出数据转为 Student 对象，封装到 List 集合\n  \tstuList.add(stu);\n    }\n  ```\n\n* 4.提供了关闭资源的能力，不用你关闭Connection, Statement, ResultSet\n\n####  开发人员做的是： 提供sql语句\n\n 最后是： 开发人员提供sql语句--mybatis处理sql---开发人员得到List集合或java对象（表中的数据）\n\n**总结：**\n  mybatis是一个sql映射框架，提供的数据库的操作能力。增强的JDBC,\n  使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection,Statement,ResultSet\n  的创建，销毁，sql的执行。 \n\n***\n\n\n\n## 第二章\n  ### 主要类的介绍\n\n* 1. Resources： mybatis中的一个类， 负责读取主配置文件\n     \t `InputStream in = Resources.getResourceAsStream(\"mybatis.xml\");`\n\n* 2. SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，\n\n```java\n    SqlSessionFactoryBuilder builder  = new SqlSessionFactoryBuilder();\n    //创建SqlSessionFactory对象\n    SqlSessionFactory factory = builder.build(in);\n```\n\n* 3. `SqlSessionFactory `： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。在整个项目中，有一个就够用了。\n\n```java\n SqlSessionFactory:接口  ， 接口实现类： DefaultSqlSessionFactory\n  SqlSessionFactory作用： 获取SqlSession对象。SqlSession sqlSession = factory.openSession();\n\n  openSession()方法说明：\n   1. openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象\n   2. openSession(boolean): openSession(true)  获取自动提交事务的SqlSession. \n\t                         openSession(false)  非自动提交事务的SqlSession对象\n```\n\n* 4. `SqlSession`: \n        SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback().\n        SqlSession接口的实现类DefaultSqlSession。\n\n```tex\n使用要求：\nSqlSession对象不是线程安全的，需要在方法内部使用。\n在执行sql语句之前，使用openSession()获取SqlSession对象。\n在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。\n```\n\n***\n\n\n\n## 第三章 \n\n### 传参\n\n* 动态代理： 使用`SqlSession.getMapper(dao接口.class)` 获取这个dao接口的对象\n\n* 传入参数： 从java代码中把数据传入到mapper文件的sql语句中。\n\n  * parameterType ： 写在mapper文件中的一个属性。 表示dao接口中方法的参数的数据类型。\n    例如：StudentDao接口\n\n    ```java\n     public Student  selectStudentById(Integer id) \n    ```\n\n  * 一个简单类型的参数：\n    简单类型： mybatis把java的基本数据类型和String都叫简单类型。\n    在mapper文件获取简单类型的一个参数的值，使用 #{任意字符}\n\n  接口：\n\n  ```java\n  public Student  selectStudentById(Integer id) \n  ```\n\n  mapper:\n\n  ```sql\n  select id,name, email,age from student where id=#{studentId}\n  ```\n\n* 参数，使用@Param命名参数\n\n  接口 :\n\n  ```java\n  public List<Student> selectMulitParam(@Param(\"myname\") String name, @Param(\"myage\") Integer age)\n    使用  @Param(\"参数名\")  String name \n  ```\n\n  mapper:\n\n  ```sql\n  <select>\n      select * from student where name=#{myname} or age=#{myage}\n    </select>\n  ```\n\n* 多个参数，使用java对象\n  语法 #{属性名}\n\n  ```\n  vo: value object , 放一些存储数据的类。比如说 提交请求参数， name ,age \n  \t     现在想把name ,age 传给一个service 类。\n  vo: view object , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。\n  \n  pojo: 普通的有set， get方法的java类。普通的java对象\n  \n  Servlet: StudentService( addStudent( MyParam  param)  )\n  \n  entity（domain域）: 实体类， 和数据库中的表对应的类。\n  ```\n\n#### **#和$**:[重点]\n\n```sql\nselect id,name, email,age from student where id=#{studentId}\n  // # 的结果： \nselect id,name, email,age from student where id=? \n\nselect id,name, email,age from student where id=${studentId}\n  // $ 的结果：\nselect id,name, email,age from student where id=1001\n```\n\n*   $:可以替换表名或者列名， 你能确定数据是安全的。可以使用$\n\n```tex\n#和$ 区别\n        #{} 是 占位符 ：动态解析 -> 预编译 -> 执行\n        ${} 是 拼接符 ：动态解析 -> 编译 -> 执行\n1. #使用?在sql语句中做占位的， 使用PreparedStatement执行sql，效率高\n2. #能够避免sql注入，更安全。\n3. $不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低\n4. $有sql注入的风险，缺乏安全性。\n5. $:可以替换表名或者列名\n6. Mybatis默认值不同\n  #{} 默认值 arg0、arg1、arg2  或 0、 1\n\t这里用Mybatis默认的 0 和 1 来代替传参，根据版本不同，也可能是用arg0、arg1、arg2，\n\t或者 param1 、param2 ，可以根据报错信息进行修改。\n  ${} 默认值param1、param2、param3\n\t${} 时，用 0 和 1虽然不会报错，但是会直接当成参数执行。一般默认参数是param1、param2\n```\n\n什么是SQL注入？\n\n通过传参就能改变SQL语句原本规则的操作就是SQL注入\n\n```sql\n 如果用$传参 name = \"jack or name = lisa\"，\n select * from `role` where name = ${name}\n 因为${}是拼接符，会直接替换，所以实际是：\n select * from `role` where name = 'jack' or name = 'lisa'\n```\n\n#### mybatis的输出结果\n\nmybatis执行了sql语句，得到java对象。\n\n* `resultType`结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。\n   resultType结果类型的它值 \n   * 类型的全限定名称  \n   * 类型的别名， 例如 java.lang.Integer别名是int\n\n\n```tex\n处理方式：\n 1. mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。\n 2. mybatis把ResultSet指定列值赋给同名的属性。\n```\n\n\n```sql\n<select id=\"selectMultiPosition\" resultType=\"com.bjpowernode.domain.Student\">\n\t select id,name, email,age from student\n</select>\n```\n\n​\t对等的jdbc:\n\n```\nResultSet rs = executeQuery(\" select id,name, email,age from student\" )\n\t  while(rs.next()){\n        Student student = new Student();\n\t\tstudent.setId(rs.getInt(\"id\"));\n\t\tstudent.setName(rs.getString(\"name\"))\n\t  }\n```\n\n* 定义自定义类型的别名\n  * 在mybatis主配置文件中定义，使`<typeAlias>`定义别名\n  * 可以在resultType中使用自定义别名\n\n* resultMap:结果映射， 指定列名和java对象的属性对应关系。\n  * 你自定义列值赋值给哪个属性\n  * 当你的列名和属性名不一样时，一定使用resultMap\n\n**resultMap和resultType不要一起用，二选一**\n\n***\n\n\n\n## 第四章 \n\n### 动态sql\n\n**sql的内容是变化的，可以根据条件获取到不同的sql语句。**\n    主要是where部分发生变化。\n\n 动态sql的实现，使用的是mybatis提供的标签， `<if> `,`<where>`,`<foreach>`\n\n* `<if>`是判断条件的，\n\n ```sql\n  语法\n  <if test=\"判断java对象的属性值\">\n             部分sql语句\n  </if>\n ```\n\n* `<where>` 用来包含 多个`<if>`的， 当多个if有一个成立的， `<where>`会自动增加一个where关键字，\n              并去掉 if中多余的 and ，or等。\n\n* `<foreach>` 循环java中的数组，list集合的。 主要用在sql的in语句中。\n      学生id是 1001,1002,1003的三个学生\n\n```sql\n select * from student where id in (1001,1002,1003)\n\n public List<Student> selectFor(List<Integer> idlist)\n\n List<Integer> list = new ...\n list.add(1001);\n list.add(1002);\n list.add(1003);\n\n dao.selectFor(list)\n```\n\n\n```sql\n <foreach collection=\"\" item=\"\" open=\"\" close=\"\" separator=\"\">\n         #{xxx}\n</foreach>\n\ncollection:表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list\nitem:自定义的，表示数组和集合成员的变量\nopen:循环开始是的字符\nclose:循环结束时的字符\nseparator:集合成员之间的分隔符\n```\n\n* sql代码片段， 就是复用一些语法\n  步骤\n  1.先定义\n\n  ```sql\n   `<sql id=\"自定义名称唯一\">`  sql语句， 表名，字段等 `</sql>`\n  ```\n\n*  2.再使用， \n\n  ```sql\n  `<include refid=\"id的值\" />`\n  ```\n\n  \n\n***\n\n\n\n## 第五章\n\n### 配置\n\n* 数据库的属性配置文件： 把数据库连接信息放到一个单独的文件中。 和mybatis主配置文件分开。\n  目的是便于修改，保存，处理多个数据库的信息。\n\n  * 在resources目录中定义一个属性配置文件， xxxx.properties ,例如 jdbc.properties\n    在属性配置文件中， 定义数据，格式是 key=value \n    key： 一般使用 . 做多级目录的。\n    例如:\n\n    ```\n     jdbc.mysql.driver, jdbc.driver, mydriver\n    \t  jdbc.driver=com.mysql.jdbc.Driver\n    \t  jdbc.url=jdbc:mysql//.....\n    \t  jdbc.username=root\n    \t  jdbc.password=123456\n    在mybatis的主配置文件，使用`<property> `指定文件的位置\n     在需要使用值的地方， ${key}\n    ```\n\n* mapper文件，使用package指定路径\n\n```sql\n<mappers>\n     <!--\n     name: xml文件（mapper文件）所在的包名, 这个包中所有xml文件一次都能加载给mybatis\n     使用package的要求：\n       1. mapper文件名称需要和接口名称一样， 区分大小写的一样\n       2. mapper文件和dao接口需要在同一目录 -->\n    <package name=\"com.bjpowernode.dao\"/>\n</mappers>\n```\n\n***\n\n完\n\n本文源于:http://www.bjpowernode.com/","source":"_posts/Mybatis笔记-1.md","raw":"---\ntitle: Mybatis笔记\ndate: 2022-03-21 09:11:27\nauthor: Evan\ncategories: JAVA框架\n\nindex_img: /img/bg6.jpg\ntags:\n\n- Java框架\n- mybatis\n\n---\n\n# Mybatis笔记\n\n\n\n## 第一章\n\n### 1.三层架构\n界面层： 和用户打交道的， 接收用户的请求参数， 显示处理结果的。（jsp ，html ，servlet）\n业务逻辑层： 接收了界面层传递的数据，计算逻辑，调用数据库，获取数据\n数据访问层： 就是访问数据库， 执行对数据的查询，修改，删除等等的。\n\n\n     三层对应的包\n       界面层： controller包 （servlet）\n       业务逻辑层： service 包（XXXService类）\n       数据访问层： dao包（XXXDao类）\n\n\n     三层中类的交互\n       用户使用界面层--> 业务逻辑层--->数据访问层（持久层）-->数据库（mysql） \n    \n     三层对应的处理框架\n       界面层---servlet---springmvc（框架）\n       业务逻辑层---service类--spring（框架）\n       数据访问层---dao类--mybatis（框架）\n\n  \n\n\n\n\n\n\n\n ### 2.框架\n* 框架是一个舞台， 一个模版\n\n* 模版：\n  * 规定了好一些条款，内容。\n  * 加入自己的东西\n\n* 框架是一个模块\n      1.框架中定义好了一些功能。这些功能是可用的。\n      2.可以加入项目中自己的功能， 这些功能可以利用框架中写好的功能。\n\n* 框架是一个软件，半成品的软件，定义好了一些基础功能， 需要加入你的功能就是完整的。\n     基础功能是可重复使用的，可升级的。\n\n* 框架特点：\n\n  * 框架一般不是全能的， 不能做所有事情\n\n  * 框架是针对某一个领域有效。 特长在某一个方面，比如mybatis做数据库操作强，但是他不能做其它的。\n\n  * 框架是一个软件\n\n\n\n **mybatis框架**\n   一个框架，早期叫做ibatis,  代码在github。\n   mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）\n\n* 1）sql mapper :sql映射\n           可以把数据库表中的一行数据  映射为 一个java对象。\n        \t 一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据\n\n* 2） Data Access Objects（DAOs） : 数据访问 ， 对数据库执行增删改查。\n\n**mybatis提供了哪些功能：**\n\n* 1.提供了创建Connection ,Statement, ResultSet的能力 ，不用开发人员创建这些对象\n\n* 2.提供了执行sql语句的能力， 不用你执行sql\n\n* 3.提供了循环sql， 把sql的结果转为java对象， List集合的能力\n\n  ```java\n  while (rs.next()) {\n  \tStudent stu = new Student();\n  \tstu.setId(rs.getInt(\"id\"));\n  \tstu.setName(rs.getString(\"name\"));\n  \tstu.setAge(rs.getInt(\"age\"));\n  \t//从数据库取出数据转为 Student 对象，封装到 List 集合\n  \tstuList.add(stu);\n    }\n  ```\n\n* 4.提供了关闭资源的能力，不用你关闭Connection, Statement, ResultSet\n\n####  开发人员做的是： 提供sql语句\n\n 最后是： 开发人员提供sql语句--mybatis处理sql---开发人员得到List集合或java对象（表中的数据）\n\n**总结：**\n  mybatis是一个sql映射框架，提供的数据库的操作能力。增强的JDBC,\n  使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection,Statement,ResultSet\n  的创建，销毁，sql的执行。 \n\n***\n\n\n\n## 第二章\n  ### 主要类的介绍\n\n* 1. Resources： mybatis中的一个类， 负责读取主配置文件\n     \t `InputStream in = Resources.getResourceAsStream(\"mybatis.xml\");`\n\n* 2. SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，\n\n```java\n    SqlSessionFactoryBuilder builder  = new SqlSessionFactoryBuilder();\n    //创建SqlSessionFactory对象\n    SqlSessionFactory factory = builder.build(in);\n```\n\n* 3. `SqlSessionFactory `： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。在整个项目中，有一个就够用了。\n\n```java\n SqlSessionFactory:接口  ， 接口实现类： DefaultSqlSessionFactory\n  SqlSessionFactory作用： 获取SqlSession对象。SqlSession sqlSession = factory.openSession();\n\n  openSession()方法说明：\n   1. openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象\n   2. openSession(boolean): openSession(true)  获取自动提交事务的SqlSession. \n\t                         openSession(false)  非自动提交事务的SqlSession对象\n```\n\n* 4. `SqlSession`: \n        SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback().\n        SqlSession接口的实现类DefaultSqlSession。\n\n```tex\n使用要求：\nSqlSession对象不是线程安全的，需要在方法内部使用。\n在执行sql语句之前，使用openSession()获取SqlSession对象。\n在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。\n```\n\n***\n\n\n\n## 第三章 \n\n### 传参\n\n* 动态代理： 使用`SqlSession.getMapper(dao接口.class)` 获取这个dao接口的对象\n\n* 传入参数： 从java代码中把数据传入到mapper文件的sql语句中。\n\n  * parameterType ： 写在mapper文件中的一个属性。 表示dao接口中方法的参数的数据类型。\n    例如：StudentDao接口\n\n    ```java\n     public Student  selectStudentById(Integer id) \n    ```\n\n  * 一个简单类型的参数：\n    简单类型： mybatis把java的基本数据类型和String都叫简单类型。\n    在mapper文件获取简单类型的一个参数的值，使用 #{任意字符}\n\n  接口：\n\n  ```java\n  public Student  selectStudentById(Integer id) \n  ```\n\n  mapper:\n\n  ```sql\n  select id,name, email,age from student where id=#{studentId}\n  ```\n\n* 参数，使用@Param命名参数\n\n  接口 :\n\n  ```java\n  public List<Student> selectMulitParam(@Param(\"myname\") String name, @Param(\"myage\") Integer age)\n    使用  @Param(\"参数名\")  String name \n  ```\n\n  mapper:\n\n  ```sql\n  <select>\n      select * from student where name=#{myname} or age=#{myage}\n    </select>\n  ```\n\n* 多个参数，使用java对象\n  语法 #{属性名}\n\n  ```\n  vo: value object , 放一些存储数据的类。比如说 提交请求参数， name ,age \n  \t     现在想把name ,age 传给一个service 类。\n  vo: view object , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。\n  \n  pojo: 普通的有set， get方法的java类。普通的java对象\n  \n  Servlet: StudentService( addStudent( MyParam  param)  )\n  \n  entity（domain域）: 实体类， 和数据库中的表对应的类。\n  ```\n\n#### **#和$**:[重点]\n\n```sql\nselect id,name, email,age from student where id=#{studentId}\n  // # 的结果： \nselect id,name, email,age from student where id=? \n\nselect id,name, email,age from student where id=${studentId}\n  // $ 的结果：\nselect id,name, email,age from student where id=1001\n```\n\n*   $:可以替换表名或者列名， 你能确定数据是安全的。可以使用$\n\n```tex\n#和$ 区别\n        #{} 是 占位符 ：动态解析 -> 预编译 -> 执行\n        ${} 是 拼接符 ：动态解析 -> 编译 -> 执行\n1. #使用?在sql语句中做占位的， 使用PreparedStatement执行sql，效率高\n2. #能够避免sql注入，更安全。\n3. $不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低\n4. $有sql注入的风险，缺乏安全性。\n5. $:可以替换表名或者列名\n6. Mybatis默认值不同\n  #{} 默认值 arg0、arg1、arg2  或 0、 1\n\t这里用Mybatis默认的 0 和 1 来代替传参，根据版本不同，也可能是用arg0、arg1、arg2，\n\t或者 param1 、param2 ，可以根据报错信息进行修改。\n  ${} 默认值param1、param2、param3\n\t${} 时，用 0 和 1虽然不会报错，但是会直接当成参数执行。一般默认参数是param1、param2\n```\n\n什么是SQL注入？\n\n通过传参就能改变SQL语句原本规则的操作就是SQL注入\n\n```sql\n 如果用$传参 name = \"jack or name = lisa\"，\n select * from `role` where name = ${name}\n 因为${}是拼接符，会直接替换，所以实际是：\n select * from `role` where name = 'jack' or name = 'lisa'\n```\n\n#### mybatis的输出结果\n\nmybatis执行了sql语句，得到java对象。\n\n* `resultType`结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。\n   resultType结果类型的它值 \n   * 类型的全限定名称  \n   * 类型的别名， 例如 java.lang.Integer别名是int\n\n\n```tex\n处理方式：\n 1. mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。\n 2. mybatis把ResultSet指定列值赋给同名的属性。\n```\n\n\n```sql\n<select id=\"selectMultiPosition\" resultType=\"com.bjpowernode.domain.Student\">\n\t select id,name, email,age from student\n</select>\n```\n\n​\t对等的jdbc:\n\n```\nResultSet rs = executeQuery(\" select id,name, email,age from student\" )\n\t  while(rs.next()){\n        Student student = new Student();\n\t\tstudent.setId(rs.getInt(\"id\"));\n\t\tstudent.setName(rs.getString(\"name\"))\n\t  }\n```\n\n* 定义自定义类型的别名\n  * 在mybatis主配置文件中定义，使`<typeAlias>`定义别名\n  * 可以在resultType中使用自定义别名\n\n* resultMap:结果映射， 指定列名和java对象的属性对应关系。\n  * 你自定义列值赋值给哪个属性\n  * 当你的列名和属性名不一样时，一定使用resultMap\n\n**resultMap和resultType不要一起用，二选一**\n\n***\n\n\n\n## 第四章 \n\n### 动态sql\n\n**sql的内容是变化的，可以根据条件获取到不同的sql语句。**\n    主要是where部分发生变化。\n\n 动态sql的实现，使用的是mybatis提供的标签， `<if> `,`<where>`,`<foreach>`\n\n* `<if>`是判断条件的，\n\n ```sql\n  语法\n  <if test=\"判断java对象的属性值\">\n             部分sql语句\n  </if>\n ```\n\n* `<where>` 用来包含 多个`<if>`的， 当多个if有一个成立的， `<where>`会自动增加一个where关键字，\n              并去掉 if中多余的 and ，or等。\n\n* `<foreach>` 循环java中的数组，list集合的。 主要用在sql的in语句中。\n      学生id是 1001,1002,1003的三个学生\n\n```sql\n select * from student where id in (1001,1002,1003)\n\n public List<Student> selectFor(List<Integer> idlist)\n\n List<Integer> list = new ...\n list.add(1001);\n list.add(1002);\n list.add(1003);\n\n dao.selectFor(list)\n```\n\n\n```sql\n <foreach collection=\"\" item=\"\" open=\"\" close=\"\" separator=\"\">\n         #{xxx}\n</foreach>\n\ncollection:表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list\nitem:自定义的，表示数组和集合成员的变量\nopen:循环开始是的字符\nclose:循环结束时的字符\nseparator:集合成员之间的分隔符\n```\n\n* sql代码片段， 就是复用一些语法\n  步骤\n  1.先定义\n\n  ```sql\n   `<sql id=\"自定义名称唯一\">`  sql语句， 表名，字段等 `</sql>`\n  ```\n\n*  2.再使用， \n\n  ```sql\n  `<include refid=\"id的值\" />`\n  ```\n\n  \n\n***\n\n\n\n## 第五章\n\n### 配置\n\n* 数据库的属性配置文件： 把数据库连接信息放到一个单独的文件中。 和mybatis主配置文件分开。\n  目的是便于修改，保存，处理多个数据库的信息。\n\n  * 在resources目录中定义一个属性配置文件， xxxx.properties ,例如 jdbc.properties\n    在属性配置文件中， 定义数据，格式是 key=value \n    key： 一般使用 . 做多级目录的。\n    例如:\n\n    ```\n     jdbc.mysql.driver, jdbc.driver, mydriver\n    \t  jdbc.driver=com.mysql.jdbc.Driver\n    \t  jdbc.url=jdbc:mysql//.....\n    \t  jdbc.username=root\n    \t  jdbc.password=123456\n    在mybatis的主配置文件，使用`<property> `指定文件的位置\n     在需要使用值的地方， ${key}\n    ```\n\n* mapper文件，使用package指定路径\n\n```sql\n<mappers>\n     <!--\n     name: xml文件（mapper文件）所在的包名, 这个包中所有xml文件一次都能加载给mybatis\n     使用package的要求：\n       1. mapper文件名称需要和接口名称一样， 区分大小写的一样\n       2. mapper文件和dao接口需要在同一目录 -->\n    <package name=\"com.bjpowernode.dao\"/>\n</mappers>\n```\n\n***\n\n完\n\n本文源于:http://www.bjpowernode.com/","slug":"Mybatis笔记-1","published":1,"updated":"2022-05-23T06:49:15.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3kwbmxc00055cu377hhg40j","content":"<h1 id=\"Mybatis笔记\"><a href=\"#Mybatis笔记\" class=\"headerlink\" title=\"Mybatis笔记\"></a>Mybatis笔记</h1><h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><h3 id=\"1-三层架构\"><a href=\"#1-三层架构\" class=\"headerlink\" title=\"1.三层架构\"></a>1.三层架构</h3><p>界面层： 和用户打交道的， 接收用户的请求参数， 显示处理结果的。（jsp ，html ，servlet）<br>业务逻辑层： 接收了界面层传递的数据，计算逻辑，调用数据库，获取数据<br>数据访问层： 就是访问数据库， 执行对数据的查询，修改，删除等等的。</p>\n<pre><code class=\"hljs\"> 三层对应的包\n   界面层： controller包 （servlet）\n   业务逻辑层： service 包（XXXService类）\n   数据访问层： dao包（XXXDao类）\n\n\n 三层中类的交互\n   用户使用界面层--&gt; 业务逻辑层---&gt;数据访问层（持久层）--&gt;数据库（mysql） \n\n 三层对应的处理框架\n   界面层---servlet---springmvc（框架）\n   业务逻辑层---service类--spring（框架）\n   数据访问层---dao类--mybatis（框架）\n</code></pre>\n<h3 id=\"2-框架\"><a href=\"#2-框架\" class=\"headerlink\" title=\"2.框架\"></a>2.框架</h3><ul>\n<li><p>框架是一个舞台， 一个模版</p>\n</li>\n<li><p>模版：</p>\n<ul>\n<li>规定了好一些条款，内容。</li>\n<li>加入自己的东西</li>\n</ul>\n</li>\n<li><p>框架是一个模块</p>\n<pre><code class=\"hljs\">1.框架中定义好了一些功能。这些功能是可用的。\n2.可以加入项目中自己的功能， 这些功能可以利用框架中写好的功能。\n</code></pre>\n</li>\n<li><p>框架是一个软件，半成品的软件，定义好了一些基础功能， 需要加入你的功能就是完整的。<br>   基础功能是可重复使用的，可升级的。</p>\n</li>\n<li><p>框架特点：</p>\n<ul>\n<li><p>框架一般不是全能的， 不能做所有事情</p>\n</li>\n<li><p>框架是针对某一个领域有效。 特长在某一个方面，比如mybatis做数据库操作强，但是他不能做其它的。</p>\n</li>\n<li><p>框架是一个软件</p>\n</li>\n</ul>\n</li>\n</ul>\n<p> <strong>mybatis框架</strong><br>   一个框架，早期叫做ibatis,  代码在github。<br>   mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）</p>\n<ul>\n<li><p>1）sql mapper :sql映射</p>\n<pre><code class=\"hljs\">     可以把数据库表中的一行数据  映射为 一个java对象。\n       一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据\n</code></pre>\n</li>\n<li><p>2） Data Access Objects（DAOs） : 数据访问 ， 对数据库执行增删改查。</p>\n</li>\n</ul>\n<p><strong>mybatis提供了哪些功能：</strong></p>\n<ul>\n<li><p>1.提供了创建Connection ,Statement, ResultSet的能力 ，不用开发人员创建这些对象</p>\n</li>\n<li><p>2.提供了执行sql语句的能力， 不用你执行sql</p>\n</li>\n<li><p>3.提供了循环sql， 把sql的结果转为java对象， List集合的能力</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span> (rs.next()) &#123;<br>\t<span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">stu</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>();<br>\tstu.setId(rs.getInt(<span class=\"hljs-string\">&quot;id&quot;</span>));<br>\tstu.setName(rs.getString(<span class=\"hljs-string\">&quot;name&quot;</span>));<br>\tstu.setAge(rs.getInt(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>\t<span class=\"hljs-comment\">//从数据库取出数据转为 Student 对象，封装到 List 集合</span><br>\tstuList.add(stu);<br>  &#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>4.提供了关闭资源的能力，不用你关闭Connection, Statement, ResultSet</p>\n</li>\n</ul>\n<h4 id=\"开发人员做的是：-提供sql语句\"><a href=\"#开发人员做的是：-提供sql语句\" class=\"headerlink\" title=\"开发人员做的是： 提供sql语句\"></a>开发人员做的是： 提供sql语句</h4><p> 最后是： 开发人员提供sql语句–mybatis处理sql—开发人员得到List集合或java对象（表中的数据）</p>\n<p><strong>总结：</strong><br>  mybatis是一个sql映射框架，提供的数据库的操作能力。增强的JDBC,<br>  使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection,Statement,ResultSet<br>  的创建，销毁，sql的执行。 </p>\n<hr>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><h3 id=\"主要类的介绍\"><a href=\"#主要类的介绍\" class=\"headerlink\" title=\"主要类的介绍\"></a>主要类的介绍</h3><ul>\n<li><ol>\n<li>Resources： mybatis中的一个类， 负责读取主配置文件<pre><code class=\"hljs\"> `InputStream in = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);`\n</code></pre>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">SqlSessionFactoryBuilder</span> <span class=\"hljs-variable\">builder</span>  <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SqlSessionFactoryBuilder</span>();<br><span class=\"hljs-comment\">//创建SqlSessionFactory对象</span><br><span class=\"hljs-type\">SqlSessionFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> builder.build(in);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"3\">\n<li><code>SqlSessionFactory </code>： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。在整个项目中，有一个就够用了。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">SqlSessionFactory:接口  ， 接口实现类： DefaultSqlSessionFactory<br> SqlSessionFactory作用： 获取SqlSession对象。<span class=\"hljs-type\">SqlSession</span> <span class=\"hljs-variable\">sqlSession</span> <span class=\"hljs-operator\">=</span> factory.openSession();<br><br> openSession()方法说明：<br>  <span class=\"hljs-number\">1.</span> openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象<br>  <span class=\"hljs-number\">2.</span> openSession(<span class=\"hljs-type\">boolean</span>): openSession(<span class=\"hljs-literal\">true</span>)  获取自动提交事务的SqlSession. <br>                         openSession(<span class=\"hljs-literal\">false</span>)  非自动提交事务的SqlSession对象<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"4\">\n<li><code>SqlSession</code>:<br>   SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback().<br>   SqlSession接口的实现类DefaultSqlSession。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">使用要求：<br>SqlSession对象不是线程安全的，需要在方法内部使用。<br>在执行sql语句之前，使用openSession()获取SqlSession对象。<br>在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h2><h3 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h3><ul>\n<li><p>动态代理： 使用<code>SqlSession.getMapper(dao接口.class)</code> 获取这个dao接口的对象</p>\n</li>\n<li><p>传入参数： 从java代码中把数据传入到mapper文件的sql语句中。</p>\n<ul>\n<li><p>parameterType ： 写在mapper文件中的一个属性。 表示dao接口中方法的参数的数据类型。<br>例如：StudentDao接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Student  <span class=\"hljs-title function_\">selectStudentById</span><span class=\"hljs-params\">(Integer id)</span> <br></code></pre></td></tr></table></figure></li>\n<li><p>一个简单类型的参数：<br>简单类型： mybatis把java的基本数据类型和String都叫简单类型。<br>在mapper文件获取简单类型的一个参数的值，使用 #{任意字符}</p>\n</li>\n</ul>\n<p>接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Student  <span class=\"hljs-title function_\">selectStudentById</span><span class=\"hljs-params\">(Integer id)</span> <br></code></pre></td></tr></table></figure>\n\n<p>mapper:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>#&#123;studentId&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>参数，使用@Param命名参数</p>\n<p>接口 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> List&lt;Student&gt; <span class=\"hljs-title function_\">selectMulitParam</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Param(&quot;myname&quot;)</span> String name, <span class=\"hljs-meta\">@Param(&quot;myage&quot;)</span> Integer age)</span><br>  使用  <span class=\"hljs-meta\">@Param(&quot;参数名&quot;)</span>  String name <br></code></pre></td></tr></table></figure>\n\n<p>mapper:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">select</span><span class=\"hljs-operator\">&gt;</span><br>    <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span>#&#123;myname&#125; <span class=\"hljs-keyword\">or</span> age<span class=\"hljs-operator\">=</span>#&#123;myage&#125;<br>  <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">select</span><span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>多个参数，使用java对象<br>语法 #{属性名}</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">vo: <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">object</span> , 放一些存储数据的类。比如说 提交请求参数， <span class=\"hljs-type\">name</span> ,age <br>\t     现在想把<span class=\"hljs-type\">name</span> ,age 传给一个service 类。<br>vo: <span class=\"hljs-keyword\">view</span> <span class=\"hljs-keyword\">object</span> , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。<br><br>pojo: 普通的有<span class=\"hljs-keyword\">set</span>， <span class=\"hljs-keyword\">get</span>方法的java类。普通的java对象<br><br>Servlet: StudentService( addStudent( MyParam  param)  )<br><br>entity（<span class=\"hljs-keyword\">domain</span>域）: 实体类， 和数据库中的表对应的类。<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"和-重点\"><a href=\"#和-重点\" class=\"headerlink\" title=\"#和$:[重点]\"></a><strong>#和$</strong>:[重点]</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>#&#123;studentId&#125;<br>  <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> # 的结果： <br><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>? <br><br><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>$&#123;studentId&#125;<br>  <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> $ 的结果：<br><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1001</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>  $:可以替换表名或者列名， 你能确定数据是安全的。可以使用$</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-params\">#</span>和<span class=\"hljs-built_in\">$</span> 区别<br>        <span class=\"hljs-params\">#</span>&#123;&#125; 是 占位符 ：动态解析 -&gt; 预编译 -&gt; 执行<br>        <span class=\"hljs-built_in\">$</span>&#123;&#125; 是 拼接符 ：动态解析 -&gt; 编译 -&gt; 执行<br>1. <span class=\"hljs-params\">#</span>使用?在sql语句中做占位的， 使用PreparedStatement执行sql，效率高<br>2. <span class=\"hljs-params\">#</span>能够避免sql注入，更安全。<br>3. <span class=\"hljs-built_in\">$</span>不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低<br>4. <span class=\"hljs-built_in\">$</span>有sql注入的风险，缺乏安全性。<br>5. <span class=\"hljs-built_in\">$</span>:可以替换表名或者列名<br>6. Mybatis默认值不同<br>  <span class=\"hljs-params\">#</span>&#123;&#125; 默认值 arg0、arg1、arg2  或 0、 1<br>\t这里用Mybatis默认的 0 和 1 来代替传参，根据版本不同，也可能是用arg0、arg1、arg2，<br>\t或者 param1 、param2 ，可以根据报错信息进行修改。<br>  <span class=\"hljs-built_in\">$</span>&#123;&#125; 默认值param1、param2、param3<br>\t<span class=\"hljs-built_in\">$</span>&#123;&#125; 时，用 0 和 1虽然不会报错，但是会直接当成参数执行。一般默认参数是param1、param2<br></code></pre></td></tr></table></figure>\n\n<p>什么是SQL注入？</p>\n<p>通过传参就能改变SQL语句原本规则的操作就是SQL注入</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">如果用$传参 name <span class=\"hljs-operator\">=</span> &quot;jack or name = lisa&quot;，<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `role` <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-operator\">=</span> $&#123;name&#125;<br>因为$&#123;&#125;是拼接符，会直接替换，所以实际是：<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `role` <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;jack&#x27;</span> <span class=\"hljs-keyword\">or</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;lisa&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"mybatis的输出结果\"><a href=\"#mybatis的输出结果\" class=\"headerlink\" title=\"mybatis的输出结果\"></a>mybatis的输出结果</h4><p>mybatis执行了sql语句，得到java对象。</p>\n<ul>\n<li><code>resultType</code>结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。<br> resultType结果类型的它值 <ul>\n<li>类型的全限定名称  </li>\n<li>类型的别名， 例如 java.lang.Integer别名是int</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">处理方式：<br> 1. mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。<br> 2. mybatis把ResultSet指定列值赋给同名的属性。<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">select</span> id<span class=\"hljs-operator\">=</span>&quot;selectMultiPosition&quot; resultType<span class=\"hljs-operator\">=</span>&quot;com.bjpowernode.domain.Student&quot;<span class=\"hljs-operator\">&gt;</span><br>\t <span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student<br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">select</span><span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    对等的jdbc:</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">ResultSet rs = execute<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">&quot; select id,name, email,age from student&quot;</span> )</span><br>\t  <span class=\"hljs-keyword\">while</span>(rs.next<span class=\"hljs-literal\">()</span>)&#123;<br>        Student student = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Student()</span>;<br>\t\tstudent.set<span class=\"hljs-constructor\">Id(<span class=\"hljs-params\">rs</span>.<span class=\"hljs-params\">getInt</span>(<span class=\"hljs-string\">&quot;id&quot;</span>)</span>);<br>\t\tstudent.set<span class=\"hljs-constructor\">Name(<span class=\"hljs-params\">rs</span>.<span class=\"hljs-params\">getString</span>(<span class=\"hljs-string\">&quot;name&quot;</span>)</span>)<br>\t  &#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>定义自定义类型的别名</p>\n<ul>\n<li>在mybatis主配置文件中定义，使<code>&lt;typeAlias&gt;</code>定义别名</li>\n<li>可以在resultType中使用自定义别名</li>\n</ul>\n</li>\n<li><p>resultMap:结果映射， 指定列名和java对象的属性对应关系。</p>\n<ul>\n<li>你自定义列值赋值给哪个属性</li>\n<li>当你的列名和属性名不一样时，一定使用resultMap</li>\n</ul>\n</li>\n</ul>\n<p><strong>resultMap和resultType不要一起用，二选一</strong></p>\n<hr>\n<h2 id=\"第四章\"><a href=\"#第四章\" class=\"headerlink\" title=\"第四章\"></a>第四章</h2><h3 id=\"动态sql\"><a href=\"#动态sql\" class=\"headerlink\" title=\"动态sql\"></a>动态sql</h3><p><strong>sql的内容是变化的，可以根据条件获取到不同的sql语句。</strong><br>    主要是where部分发生变化。</p>\n<p> 动态sql的实现，使用的是mybatis提供的标签， <code>&lt;if&gt; </code>,<code>&lt;where&gt;</code>,<code>&lt;foreach&gt;</code></p>\n<ul>\n<li><code>&lt;if&gt;</code>是判断条件的，</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">语法<br><span class=\"hljs-operator\">&lt;</span>if test<span class=\"hljs-operator\">=</span>&quot;判断java对象的属性值&quot;<span class=\"hljs-operator\">&gt;</span><br>           部分<span class=\"hljs-keyword\">sql</span>语句<br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>if<span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>&lt;where&gt;</code> 用来包含 多个<code>&lt;if&gt;</code>的， 当多个if有一个成立的， <code>&lt;where&gt;</code>会自动增加一个where关键字，</p>\n<pre><code class=\"hljs\">        并去掉 if中多余的 and ，or等。\n</code></pre>\n</li>\n<li><p><code>&lt;foreach&gt;</code> 循环java中的数组，list集合的。 主要用在sql的in语句中。</p>\n<pre><code class=\"hljs\">学生id是 1001,1002,1003的三个学生\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1001</span>,<span class=\"hljs-number\">1002</span>,<span class=\"hljs-number\">1003</span>)<br><br>public List<span class=\"hljs-operator\">&lt;</span>Student<span class=\"hljs-operator\">&gt;</span> selectFor(List<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">Integer</span><span class=\"hljs-operator\">&gt;</span> idlist)<br><br>List<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">Integer</span><span class=\"hljs-operator\">&gt;</span> list <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> ...<br>list.add(<span class=\"hljs-number\">1001</span>);<br>list.add(<span class=\"hljs-number\">1002</span>);<br>list.add(<span class=\"hljs-number\">1003</span>);<br><br>dao.selectFor(list)<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"> <span class=\"hljs-operator\">&lt;</span>foreach collection<span class=\"hljs-operator\">=</span>&quot;&quot; item<span class=\"hljs-operator\">=</span>&quot;&quot; <span class=\"hljs-keyword\">open</span><span class=\"hljs-operator\">=</span>&quot;&quot; <span class=\"hljs-keyword\">close</span><span class=\"hljs-operator\">=</span>&quot;&quot; separator<span class=\"hljs-operator\">=</span>&quot;&quot;<span class=\"hljs-operator\">&gt;</span><br>         #&#123;xxx&#125;<br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>foreach<span class=\"hljs-operator\">&gt;</span><br><br>collection:表示接口中的方法参数的类型， 如果是数组使用<span class=\"hljs-keyword\">array</span> , 如果是list集合使用list<br>item:自定义的，表示数组和集合成员的变量<br><span class=\"hljs-keyword\">open</span>:循环开始是的字符<br><span class=\"hljs-keyword\">close</span>:循环结束时的字符<br>separator:集合成员之间的分隔符<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>sql代码片段， 就是复用一些语法<br>步骤<br>1.先定义</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">`<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">sql</span> id<span class=\"hljs-operator\">=</span>&quot;自定义名称唯一&quot;<span class=\"hljs-operator\">&gt;</span>`  <span class=\"hljs-keyword\">sql</span>语句， 表名，字段等 `<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">sql</span><span class=\"hljs-operator\">&gt;</span>`<br></code></pre></td></tr></table></figure></li>\n<li><p> 2.再使用， </p>\n</li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">`<span class=\"hljs-operator\">&lt;</span>include refid<span class=\"hljs-operator\">=</span>&quot;id的值&quot; <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span>`<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"第五章\"><a href=\"#第五章\" class=\"headerlink\" title=\"第五章\"></a>第五章</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p>数据库的属性配置文件： 把数据库连接信息放到一个单独的文件中。 和mybatis主配置文件分开。<br>目的是便于修改，保存，处理多个数据库的信息。</p>\n<ul>\n<li><p>在resources目录中定义一个属性配置文件， xxxx.properties ,例如 jdbc.properties<br>在属性配置文件中， 定义数据，格式是 key=value<br>key： 一般使用 . 做多级目录的。<br>例如:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"> jdbc.mysql.driver, jdbc.driver, mydriver<br>\t  jdbc.<span class=\"hljs-attribute\">driver</span>=com.mysql.jdbc.Driver<br>\t  jdbc.<span class=\"hljs-attribute\">url</span>=jdbc:mysql//.....<br>\t  jdbc.<span class=\"hljs-attribute\">username</span>=root<br>\t  jdbc.<span class=\"hljs-attribute\">password</span>=123456<br>在mybatis的主配置文件，使用`&lt;property&gt; `指定文件的位置<br> 在需要使用值的地方， <span class=\"hljs-variable\">$&#123;key&#125;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>mapper文件，使用package指定路径</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&lt;</span>mappers<span class=\"hljs-operator\">&gt;</span><br>     <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">!</span><span class=\"hljs-comment\">--</span><br>     name: xml文件（mapper文件）所在的包名, 这个包中所有xml文件一次都能加载给mybatis<br>     使用package的要求：<br>       <span class=\"hljs-number\">1.</span> mapper文件名称需要和接口名称一样， 区分大小写的一样<br>       <span class=\"hljs-number\">2.</span> mapper文件和dao接口需要在同一目录 <span class=\"hljs-comment\">--&gt;</span><br>    <span class=\"hljs-operator\">&lt;</span>package name<span class=\"hljs-operator\">=</span>&quot;com.bjpowernode.dao&quot;<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span><br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>mappers<span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>完</p>\n<p>本文源于:<a href=\"http://www.bjpowernode.com/\">http://www.bjpowernode.com/</a></p>\n","site":{"data":{}},"wordcount":6609,"excerpt":"","more":"<h1 id=\"Mybatis笔记\"><a href=\"#Mybatis笔记\" class=\"headerlink\" title=\"Mybatis笔记\"></a>Mybatis笔记</h1><h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><h3 id=\"1-三层架构\"><a href=\"#1-三层架构\" class=\"headerlink\" title=\"1.三层架构\"></a>1.三层架构</h3><p>界面层： 和用户打交道的， 接收用户的请求参数， 显示处理结果的。（jsp ，html ，servlet）<br>业务逻辑层： 接收了界面层传递的数据，计算逻辑，调用数据库，获取数据<br>数据访问层： 就是访问数据库， 执行对数据的查询，修改，删除等等的。</p>\n<pre><code> 三层对应的包\n   界面层： controller包 （servlet）\n   业务逻辑层： service 包（XXXService类）\n   数据访问层： dao包（XXXDao类）\n\n\n 三层中类的交互\n   用户使用界面层--&gt; 业务逻辑层---&gt;数据访问层（持久层）--&gt;数据库（mysql） \n\n 三层对应的处理框架\n   界面层---servlet---springmvc（框架）\n   业务逻辑层---service类--spring（框架）\n   数据访问层---dao类--mybatis（框架）\n</code></pre>\n<h3 id=\"2-框架\"><a href=\"#2-框架\" class=\"headerlink\" title=\"2.框架\"></a>2.框架</h3><ul>\n<li><p>框架是一个舞台， 一个模版</p>\n</li>\n<li><p>模版：</p>\n<ul>\n<li>规定了好一些条款，内容。</li>\n<li>加入自己的东西</li>\n</ul>\n</li>\n<li><p>框架是一个模块</p>\n<pre><code>1.框架中定义好了一些功能。这些功能是可用的。\n2.可以加入项目中自己的功能， 这些功能可以利用框架中写好的功能。\n</code></pre>\n</li>\n<li><p>框架是一个软件，半成品的软件，定义好了一些基础功能， 需要加入你的功能就是完整的。<br>   基础功能是可重复使用的，可升级的。</p>\n</li>\n<li><p>框架特点：</p>\n<ul>\n<li><p>框架一般不是全能的， 不能做所有事情</p>\n</li>\n<li><p>框架是针对某一个领域有效。 特长在某一个方面，比如mybatis做数据库操作强，但是他不能做其它的。</p>\n</li>\n<li><p>框架是一个软件</p>\n</li>\n</ul>\n</li>\n</ul>\n<p> <strong>mybatis框架</strong><br>   一个框架，早期叫做ibatis,  代码在github。<br>   mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）</p>\n<ul>\n<li><p>1）sql mapper :sql映射</p>\n<pre><code>     可以把数据库表中的一行数据  映射为 一个java对象。\n       一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据\n</code></pre>\n</li>\n<li><p>2） Data Access Objects（DAOs） : 数据访问 ， 对数据库执行增删改查。</p>\n</li>\n</ul>\n<p><strong>mybatis提供了哪些功能：</strong></p>\n<ul>\n<li><p>1.提供了创建Connection ,Statement, ResultSet的能力 ，不用开发人员创建这些对象</p>\n</li>\n<li><p>2.提供了执行sql语句的能力， 不用你执行sql</p>\n</li>\n<li><p>3.提供了循环sql， 把sql的结果转为java对象， List集合的能力</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span> (rs.next()) &#123;<br>\t<span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">stu</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>();<br>\tstu.setId(rs.getInt(<span class=\"hljs-string\">&quot;id&quot;</span>));<br>\tstu.setName(rs.getString(<span class=\"hljs-string\">&quot;name&quot;</span>));<br>\tstu.setAge(rs.getInt(<span class=\"hljs-string\">&quot;age&quot;</span>));<br>\t<span class=\"hljs-comment\">//从数据库取出数据转为 Student 对象，封装到 List 集合</span><br>\tstuList.add(stu);<br>  &#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>4.提供了关闭资源的能力，不用你关闭Connection, Statement, ResultSet</p>\n</li>\n</ul>\n<h4 id=\"开发人员做的是：-提供sql语句\"><a href=\"#开发人员做的是：-提供sql语句\" class=\"headerlink\" title=\"开发人员做的是： 提供sql语句\"></a>开发人员做的是： 提供sql语句</h4><p> 最后是： 开发人员提供sql语句–mybatis处理sql—开发人员得到List集合或java对象（表中的数据）</p>\n<p><strong>总结：</strong><br>  mybatis是一个sql映射框架，提供的数据库的操作能力。增强的JDBC,<br>  使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection,Statement,ResultSet<br>  的创建，销毁，sql的执行。 </p>\n<hr>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><h3 id=\"主要类的介绍\"><a href=\"#主要类的介绍\" class=\"headerlink\" title=\"主要类的介绍\"></a>主要类的介绍</h3><ul>\n<li><ol>\n<li>Resources： mybatis中的一个类， 负责读取主配置文件<pre><code> `InputStream in = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);`\n</code></pre>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">SqlSessionFactoryBuilder</span> <span class=\"hljs-variable\">builder</span>  <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SqlSessionFactoryBuilder</span>();<br><span class=\"hljs-comment\">//创建SqlSessionFactory对象</span><br><span class=\"hljs-type\">SqlSessionFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> builder.build(in);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"3\">\n<li><code>SqlSessionFactory </code>： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。在整个项目中，有一个就够用了。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">SqlSessionFactory:接口  ， 接口实现类： DefaultSqlSessionFactory<br> SqlSessionFactory作用： 获取SqlSession对象。<span class=\"hljs-type\">SqlSession</span> <span class=\"hljs-variable\">sqlSession</span> <span class=\"hljs-operator\">=</span> factory.openSession();<br><br> openSession()方法说明：<br>  <span class=\"hljs-number\">1.</span> openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象<br>  <span class=\"hljs-number\">2.</span> openSession(<span class=\"hljs-type\">boolean</span>): openSession(<span class=\"hljs-literal\">true</span>)  获取自动提交事务的SqlSession. <br>                         openSession(<span class=\"hljs-literal\">false</span>)  非自动提交事务的SqlSession对象<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"4\">\n<li><code>SqlSession</code>:<br>   SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback().<br>   SqlSession接口的实现类DefaultSqlSession。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">使用要求：<br>SqlSession对象不是线程安全的，需要在方法内部使用。<br>在执行sql语句之前，使用openSession()获取SqlSession对象。<br>在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h2><h3 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h3><ul>\n<li><p>动态代理： 使用<code>SqlSession.getMapper(dao接口.class)</code> 获取这个dao接口的对象</p>\n</li>\n<li><p>传入参数： 从java代码中把数据传入到mapper文件的sql语句中。</p>\n<ul>\n<li><p>parameterType ： 写在mapper文件中的一个属性。 表示dao接口中方法的参数的数据类型。<br>例如：StudentDao接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Student  <span class=\"hljs-title function_\">selectStudentById</span><span class=\"hljs-params\">(Integer id)</span> <br></code></pre></td></tr></table></figure></li>\n<li><p>一个简单类型的参数：<br>简单类型： mybatis把java的基本数据类型和String都叫简单类型。<br>在mapper文件获取简单类型的一个参数的值，使用 #{任意字符}</p>\n</li>\n</ul>\n<p>接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Student  <span class=\"hljs-title function_\">selectStudentById</span><span class=\"hljs-params\">(Integer id)</span> <br></code></pre></td></tr></table></figure>\n\n<p>mapper:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>#&#123;studentId&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>参数，使用@Param命名参数</p>\n<p>接口 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> List&lt;Student&gt; <span class=\"hljs-title function_\">selectMulitParam</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Param(&quot;myname&quot;)</span> String name, <span class=\"hljs-meta\">@Param(&quot;myage&quot;)</span> Integer age)</span><br>  使用  <span class=\"hljs-meta\">@Param(&quot;参数名&quot;)</span>  String name <br></code></pre></td></tr></table></figure>\n\n<p>mapper:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">select</span><span class=\"hljs-operator\">&gt;</span><br>    <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> name<span class=\"hljs-operator\">=</span>#&#123;myname&#125; <span class=\"hljs-keyword\">or</span> age<span class=\"hljs-operator\">=</span>#&#123;myage&#125;<br>  <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">select</span><span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>多个参数，使用java对象<br>语法 #{属性名}</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">vo: <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">object</span> , 放一些存储数据的类。比如说 提交请求参数， <span class=\"hljs-type\">name</span> ,age <br>\t     现在想把<span class=\"hljs-type\">name</span> ,age 传给一个service 类。<br>vo: <span class=\"hljs-keyword\">view</span> <span class=\"hljs-keyword\">object</span> , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。<br><br>pojo: 普通的有<span class=\"hljs-keyword\">set</span>， <span class=\"hljs-keyword\">get</span>方法的java类。普通的java对象<br><br>Servlet: StudentService( addStudent( MyParam  param)  )<br><br>entity（<span class=\"hljs-keyword\">domain</span>域）: 实体类， 和数据库中的表对应的类。<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"和-重点\"><a href=\"#和-重点\" class=\"headerlink\" title=\"#和$:[重点]\"></a><strong>#和$</strong>:[重点]</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>#&#123;studentId&#125;<br>  <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> # 的结果： <br><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>? <br><br><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span>$&#123;studentId&#125;<br>  <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span> $ 的结果：<br><span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1001</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>  $:可以替换表名或者列名， 你能确定数据是安全的。可以使用$</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-params\">#</span>和<span class=\"hljs-built_in\">$</span> 区别<br>        <span class=\"hljs-params\">#</span>&#123;&#125; 是 占位符 ：动态解析 -&gt; 预编译 -&gt; 执行<br>        <span class=\"hljs-built_in\">$</span>&#123;&#125; 是 拼接符 ：动态解析 -&gt; 编译 -&gt; 执行<br>1. <span class=\"hljs-params\">#</span>使用?在sql语句中做占位的， 使用PreparedStatement执行sql，效率高<br>2. <span class=\"hljs-params\">#</span>能够避免sql注入，更安全。<br>3. <span class=\"hljs-built_in\">$</span>不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低<br>4. <span class=\"hljs-built_in\">$</span>有sql注入的风险，缺乏安全性。<br>5. <span class=\"hljs-built_in\">$</span>:可以替换表名或者列名<br>6. Mybatis默认值不同<br>  <span class=\"hljs-params\">#</span>&#123;&#125; 默认值 arg0、arg1、arg2  或 0、 1<br>\t这里用Mybatis默认的 0 和 1 来代替传参，根据版本不同，也可能是用arg0、arg1、arg2，<br>\t或者 param1 、param2 ，可以根据报错信息进行修改。<br>  <span class=\"hljs-built_in\">$</span>&#123;&#125; 默认值param1、param2、param3<br>\t<span class=\"hljs-built_in\">$</span>&#123;&#125; 时，用 0 和 1虽然不会报错，但是会直接当成参数执行。一般默认参数是param1、param2<br></code></pre></td></tr></table></figure>\n\n<p>什么是SQL注入？</p>\n<p>通过传参就能改变SQL语句原本规则的操作就是SQL注入</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">如果用$传参 name <span class=\"hljs-operator\">=</span> &quot;jack or name = lisa&quot;，<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `role` <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-operator\">=</span> $&#123;name&#125;<br>因为$&#123;&#125;是拼接符，会直接替换，所以实际是：<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `role` <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;jack&#x27;</span> <span class=\"hljs-keyword\">or</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;lisa&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"mybatis的输出结果\"><a href=\"#mybatis的输出结果\" class=\"headerlink\" title=\"mybatis的输出结果\"></a>mybatis的输出结果</h4><p>mybatis执行了sql语句，得到java对象。</p>\n<ul>\n<li><code>resultType</code>结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。<br> resultType结果类型的它值 <ul>\n<li>类型的全限定名称  </li>\n<li>类型的别名， 例如 java.lang.Integer别名是int</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">处理方式：<br> 1. mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。<br> 2. mybatis把ResultSet指定列值赋给同名的属性。<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">select</span> id<span class=\"hljs-operator\">=</span>&quot;selectMultiPosition&quot; resultType<span class=\"hljs-operator\">=</span>&quot;com.bjpowernode.domain.Student&quot;<span class=\"hljs-operator\">&gt;</span><br>\t <span class=\"hljs-keyword\">select</span> id,name, email,age <span class=\"hljs-keyword\">from</span> student<br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">select</span><span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>​    对等的jdbc:</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">ResultSet rs = execute<span class=\"hljs-constructor\">Query(<span class=\"hljs-string\">&quot; select id,name, email,age from student&quot;</span> )</span><br>\t  <span class=\"hljs-keyword\">while</span>(rs.next<span class=\"hljs-literal\">()</span>)&#123;<br>        Student student = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Student()</span>;<br>\t\tstudent.set<span class=\"hljs-constructor\">Id(<span class=\"hljs-params\">rs</span>.<span class=\"hljs-params\">getInt</span>(<span class=\"hljs-string\">&quot;id&quot;</span>)</span>);<br>\t\tstudent.set<span class=\"hljs-constructor\">Name(<span class=\"hljs-params\">rs</span>.<span class=\"hljs-params\">getString</span>(<span class=\"hljs-string\">&quot;name&quot;</span>)</span>)<br>\t  &#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>定义自定义类型的别名</p>\n<ul>\n<li>在mybatis主配置文件中定义，使<code>&lt;typeAlias&gt;</code>定义别名</li>\n<li>可以在resultType中使用自定义别名</li>\n</ul>\n</li>\n<li><p>resultMap:结果映射， 指定列名和java对象的属性对应关系。</p>\n<ul>\n<li>你自定义列值赋值给哪个属性</li>\n<li>当你的列名和属性名不一样时，一定使用resultMap</li>\n</ul>\n</li>\n</ul>\n<p><strong>resultMap和resultType不要一起用，二选一</strong></p>\n<hr>\n<h2 id=\"第四章\"><a href=\"#第四章\" class=\"headerlink\" title=\"第四章\"></a>第四章</h2><h3 id=\"动态sql\"><a href=\"#动态sql\" class=\"headerlink\" title=\"动态sql\"></a>动态sql</h3><p><strong>sql的内容是变化的，可以根据条件获取到不同的sql语句。</strong><br>    主要是where部分发生变化。</p>\n<p> 动态sql的实现，使用的是mybatis提供的标签， <code>&lt;if&gt; </code>,<code>&lt;where&gt;</code>,<code>&lt;foreach&gt;</code></p>\n<ul>\n<li><code>&lt;if&gt;</code>是判断条件的，</li>\n</ul>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">语法<br><span class=\"hljs-operator\">&lt;</span>if test<span class=\"hljs-operator\">=</span>&quot;判断java对象的属性值&quot;<span class=\"hljs-operator\">&gt;</span><br>           部分<span class=\"hljs-keyword\">sql</span>语句<br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>if<span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>&lt;where&gt;</code> 用来包含 多个<code>&lt;if&gt;</code>的， 当多个if有一个成立的， <code>&lt;where&gt;</code>会自动增加一个where关键字，</p>\n<pre><code>        并去掉 if中多余的 and ，or等。\n</code></pre>\n</li>\n<li><p><code>&lt;foreach&gt;</code> 循环java中的数组，list集合的。 主要用在sql的in语句中。</p>\n<pre><code>学生id是 1001,1002,1003的三个学生\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> student <span class=\"hljs-keyword\">where</span> id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1001</span>,<span class=\"hljs-number\">1002</span>,<span class=\"hljs-number\">1003</span>)<br><br>public List<span class=\"hljs-operator\">&lt;</span>Student<span class=\"hljs-operator\">&gt;</span> selectFor(List<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">Integer</span><span class=\"hljs-operator\">&gt;</span> idlist)<br><br>List<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">Integer</span><span class=\"hljs-operator\">&gt;</span> list <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> ...<br>list.add(<span class=\"hljs-number\">1001</span>);<br>list.add(<span class=\"hljs-number\">1002</span>);<br>list.add(<span class=\"hljs-number\">1003</span>);<br><br>dao.selectFor(list)<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"> <span class=\"hljs-operator\">&lt;</span>foreach collection<span class=\"hljs-operator\">=</span>&quot;&quot; item<span class=\"hljs-operator\">=</span>&quot;&quot; <span class=\"hljs-keyword\">open</span><span class=\"hljs-operator\">=</span>&quot;&quot; <span class=\"hljs-keyword\">close</span><span class=\"hljs-operator\">=</span>&quot;&quot; separator<span class=\"hljs-operator\">=</span>&quot;&quot;<span class=\"hljs-operator\">&gt;</span><br>         #&#123;xxx&#125;<br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>foreach<span class=\"hljs-operator\">&gt;</span><br><br>collection:表示接口中的方法参数的类型， 如果是数组使用<span class=\"hljs-keyword\">array</span> , 如果是list集合使用list<br>item:自定义的，表示数组和集合成员的变量<br><span class=\"hljs-keyword\">open</span>:循环开始是的字符<br><span class=\"hljs-keyword\">close</span>:循环结束时的字符<br>separator:集合成员之间的分隔符<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>sql代码片段， 就是复用一些语法<br>步骤<br>1.先定义</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">`<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-keyword\">sql</span> id<span class=\"hljs-operator\">=</span>&quot;自定义名称唯一&quot;<span class=\"hljs-operator\">&gt;</span>`  <span class=\"hljs-keyword\">sql</span>语句， 表名，字段等 `<span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span><span class=\"hljs-keyword\">sql</span><span class=\"hljs-operator\">&gt;</span>`<br></code></pre></td></tr></table></figure></li>\n<li><p> 2.再使用， </p>\n</li>\n</ul>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">`<span class=\"hljs-operator\">&lt;</span>include refid<span class=\"hljs-operator\">=</span>&quot;id的值&quot; <span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span>`<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"第五章\"><a href=\"#第五章\" class=\"headerlink\" title=\"第五章\"></a>第五章</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p>数据库的属性配置文件： 把数据库连接信息放到一个单独的文件中。 和mybatis主配置文件分开。<br>目的是便于修改，保存，处理多个数据库的信息。</p>\n<ul>\n<li><p>在resources目录中定义一个属性配置文件， xxxx.properties ,例如 jdbc.properties<br>在属性配置文件中， 定义数据，格式是 key=value<br>key： 一般使用 . 做多级目录的。<br>例如:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"> jdbc.mysql.driver, jdbc.driver, mydriver<br>\t  jdbc.<span class=\"hljs-attribute\">driver</span>=com.mysql.jdbc.Driver<br>\t  jdbc.<span class=\"hljs-attribute\">url</span>=jdbc:mysql//.....<br>\t  jdbc.<span class=\"hljs-attribute\">username</span>=root<br>\t  jdbc.<span class=\"hljs-attribute\">password</span>=123456<br>在mybatis的主配置文件，使用`&lt;property&gt; `指定文件的位置<br> 在需要使用值的地方， <span class=\"hljs-variable\">$&#123;key&#125;</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>mapper文件，使用package指定路径</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-operator\">&lt;</span>mappers<span class=\"hljs-operator\">&gt;</span><br>     <span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">!</span><span class=\"hljs-comment\">--</span><br>     name: xml文件（mapper文件）所在的包名, 这个包中所有xml文件一次都能加载给mybatis<br>     使用package的要求：<br>       <span class=\"hljs-number\">1.</span> mapper文件名称需要和接口名称一样， 区分大小写的一样<br>       <span class=\"hljs-number\">2.</span> mapper文件和dao接口需要在同一目录 <span class=\"hljs-comment\">--&gt;</span><br>    <span class=\"hljs-operator\">&lt;</span>package name<span class=\"hljs-operator\">=</span>&quot;com.bjpowernode.dao&quot;<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">&gt;</span><br><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">/</span>mappers<span class=\"hljs-operator\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>完</p>\n<p>本文源于:<a href=\"http://www.bjpowernode.com/\">http://www.bjpowernode.com/</a></p>\n"},{"title":"Web","author":"Evan","date":"2022-03-15T02:22:20.000Z","index_img":"/img/bg5.jpg","_content":"# Web\n\n## 1.网络通讯部分\n\n### 1.1TCP与UDP区别？（了解）\n\n![](/img/web/图片28.png)\n\n    TCP(Transmission Control Protocol 传输控制协议)是一种面向连接(连接导向)的、可靠的、基于IP的传输层协议。\n    \n    UDP是User Datagram Protocol的简称，中文名是用户数据报协议，是OSI参考模型中的传输层协议，它是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。\n    \n    TCP和UDP都是来自于传输层的协议。传输层位于应用层和网络层之间，负责位于不同主机进程之间的通信。\n\nTCP与UDP的区别\n\n![](/img/web/图片29.png)\n\n    1.TCP基于连接UDP无连接\n    2.TCP要求系统资源较多,UDP较少 \n    3.TCP保证数据正确性，UDP可能丢包 \n    4.TCP保证数据顺序，UDP不保证 \n\n&nbsp;\n\n--------------------------\n\n### 1.2什么是HTTP协议？\n\n        客户端和服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”。 \n        是一个基于请求与响应模式的、无状态的、应用层的协议，基于 TCP 的连接方式\n\n\n&nbsp;\n\n-----------------------------\n\n### 1.3TCP的三次握手\n\n    为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。\n\n![image text](/img/web/图片30.png)\n\n\n```tex\n    为什么要三次握手？\n    三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。\n\n    SYN：同步序列编号（Synchronize Sequence Numbers）。是TCP/IP建立连接时使用的握手信号。\n    第一次握手：客户端给服务器发送一个SYN。客户端发送网络包，服务端收到了。服务器得出结论：客户端的发送能力，服务端的接收能力正常。\n    第二次握手：服务端收到SYN报文之后，会应答一个SYN+ACK报文。服务端发包，客户端收到了。\n    客户端得出结论：服务端的接收和发送能力，客户端的接收和发送能力正常。但是此时服务端不能确认客户端的接收能力是否正常。\n    第三次握手;客户端收到SYN+ACK报文之后，回应一个ACK报文。客户端发包，服务端收到了。服务器得出结论：客户端的接收和发送能力，自己的接收发送能力都正常。\n    通过三次握手，双方都确认对方的接收以及发送能力正常。\n```\n\n&nbsp;\n\n-----------------------------\n\n### 1.4HTTP中重定向和请求转发的区别？\n\n**实现**\n\n    转发：用request的getRequestDispatcher()方法得到ReuqestDispatcher对象，调用forward（）方法\n    \n    request.getRequestDispatcher(\"other.jsp\").forward(request, response);\n\n\n    重定向：调用response的sendRedirect(）方法\n    \n    response.sendRedirect(\"other.jsp\");\n\n**区别：**\n\n    1> 重定向2次请求，请求转发1次请求\n    2> 重定向地址栏会变，请求转发地址栏不变\n    3> 重定向是浏览器跳转，请求转发是服务器跳转\n    4> 重定向可以跳转到任意网址，请求转发只能跳转当前项目\n\n\n&nbsp;\n\n-----------------------------\n\n### 1.5Get和Post的区别？\n\n```tex\n1. Get是不安全的，因为在传输过程，数据被放在请求的URL中；Post的所有操作对用户来说都是不可见的。  \n2. Get传送的数据量较小，一般传输数据大小不超过2k-4k（根据浏览器不同，限制不一样，但相差不大这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制。   \n3. Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集。        \n4. Get执行效率却比Post方法好。Get是form提交的默认方法。\n```\n\n   ![image text](/img/web/20210325210742187.png)\n\n\n&nbsp;\n\n--------------------------\n\n## 2.cookie和session的区别？（必会）\n\n```tex\n1.存储位置不同cookie的数据信息存放在客户端浏览器上。 session的数据信息存放在服务器上。 \n2.存储容量不同单个cookie保存的数据<=4KB，一个站点最多保存20个Cookie。 对于session来说并没有上限，但出于对服务器端的性能考虑，session内不要存放过多的东西，并且设置session删除机制。\n3.存储方式不同cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。 session中能够存储任何类型的数据，包括且不限于string，integer，list，map等。\n4.隐私策略不同cookie对客户端是可见的，别有用心的人可以分析存放在本地的cookie并进行cookie欺骗，所以它是不安全的。 session存储在服务器上，不存在敏感信息泄漏的风险。\n5. 有效期上不同开发可以通过设置cookie的属性，达到使cookie长期有效的效果。 session依赖于名为JSESSIONID的cookie，而cookie JSESSIONID的过期时间默认为-1，只需关闭窗口该session就会失效，因而session不能达到长期有效的效果。\n6.服务器压力不同cookie保管在客户端，不占用服务器资源。对于并发用户十分多的网站，cookie是很好的选择。 session是保管在服务器端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的session，耗费大量的内存。 \n```\n\n\n&nbsp;\n\n--------------------------\n\n## 3.Jsp和Servlet（了解）\n\n1.Jsp和Servlet的区别？\n\n相同点\n\n    jsp经编译后就变成了servlet，jsp本质就是servlet，jvm只能识别java的类，不能识别jsp代码，web容器将jsp的代码编译成jvm能够识别的java类。其实就是当你通过 http 请求一个 JSP 页面是，首先 Tomcat 会调用 service（）方法将JSP编译成为 Servlet，然后执行 Servlet。\n\n不同点\n\n    JSP侧重视图，Sevlet主要用于控制逻辑。Servlet中没有内置对象 。JSP中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n\n\n2.Servlet的生命周期\n\n    // 1. servlet对象创建时，调用此方法public void init(ServletConfig servletConfig);// 2. 用户访问servlet时，调用此方法public void service(ServletRequest servletRequest, ServletResponse servletResponse);// 3. servlet对象销毁时，调用此方法public void destroy();\n\n3.JSP九大内置对象\n\n    out对象：用于向客户端、浏览器输出数据。\n    request对象：封装了来自客户端、浏览器的各种信息。\n    response对象：封装了服务器的响应信息。\n    exception对象：封装了jsp程序执行过程中发生的异常和错误信息。\n    config对象：封装了应用程序的配置信息。\n    page对象：指向了当前jsp程序本身。\n    session对象：用来保存会话信息。也就是说，可以实现在同一用户的不同请求之间共享数\n    application对象：代表了当前应用程序的上下文。可以在不同的用户之间共享信息。\n    pageContext对象：提供了对jsp页面所有对象以及命名空间的访问。\n\n&nbsp;\n\n----------------------------\n\n## 4.Ajax的介绍（必会）\n\nAjax 即\"Asynchronous JavaScript And XML\"（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。 \n\n        $.ajax({ \n        选项 \n        })\n        常见的选项有: \n        type:请求方式,常见的值有\"get\",\"post\"等,默认值:get \n        url:请求的路径,\"/ajax/hello\" \n        data:请求的参数,参数的常见写法有键值对或者json \n        方式1: name=tom&pwd=123 \n        方式2: {\"name\":\"tom\",\"pwd\":\"123\"} \n        success:请求成功后的回调函数 function(返回值的参数名){} \n        contentType:用来设置请求参数的mime类型,默认值:表单的enctype默认值 name=tom&pwd=123 \n        error:ajax请求时内部发生错误时执行的回调函数 function(){} \n        dataType:指定返回值的类型 常见值:text json \n        async:是否异步 默认值true \n\n\nAjax应用程序的优势在于：\n\n\n       1. 通过异步模式，提升了用户体验 \n       2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少    了带宽占用 \n       3. Ajax引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。","source":"_posts/Web.md","raw":"---\ntitle: Web\n\ncategories: Web\nauthor: Evan\ndate: 2022-03-15 10:22:20\n\nindex_img: /img/bg5.jpg\n\ntags:\n\n- Web\n\n\n\n---\n# Web\n\n## 1.网络通讯部分\n\n### 1.1TCP与UDP区别？（了解）\n\n![](/img/web/图片28.png)\n\n    TCP(Transmission Control Protocol 传输控制协议)是一种面向连接(连接导向)的、可靠的、基于IP的传输层协议。\n    \n    UDP是User Datagram Protocol的简称，中文名是用户数据报协议，是OSI参考模型中的传输层协议，它是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。\n    \n    TCP和UDP都是来自于传输层的协议。传输层位于应用层和网络层之间，负责位于不同主机进程之间的通信。\n\nTCP与UDP的区别\n\n![](/img/web/图片29.png)\n\n    1.TCP基于连接UDP无连接\n    2.TCP要求系统资源较多,UDP较少 \n    3.TCP保证数据正确性，UDP可能丢包 \n    4.TCP保证数据顺序，UDP不保证 \n\n&nbsp;\n\n--------------------------\n\n### 1.2什么是HTTP协议？\n\n        客户端和服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”。 \n        是一个基于请求与响应模式的、无状态的、应用层的协议，基于 TCP 的连接方式\n\n\n&nbsp;\n\n-----------------------------\n\n### 1.3TCP的三次握手\n\n    为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。\n\n![image text](/img/web/图片30.png)\n\n\n```tex\n    为什么要三次握手？\n    三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。\n\n    SYN：同步序列编号（Synchronize Sequence Numbers）。是TCP/IP建立连接时使用的握手信号。\n    第一次握手：客户端给服务器发送一个SYN。客户端发送网络包，服务端收到了。服务器得出结论：客户端的发送能力，服务端的接收能力正常。\n    第二次握手：服务端收到SYN报文之后，会应答一个SYN+ACK报文。服务端发包，客户端收到了。\n    客户端得出结论：服务端的接收和发送能力，客户端的接收和发送能力正常。但是此时服务端不能确认客户端的接收能力是否正常。\n    第三次握手;客户端收到SYN+ACK报文之后，回应一个ACK报文。客户端发包，服务端收到了。服务器得出结论：客户端的接收和发送能力，自己的接收发送能力都正常。\n    通过三次握手，双方都确认对方的接收以及发送能力正常。\n```\n\n&nbsp;\n\n-----------------------------\n\n### 1.4HTTP中重定向和请求转发的区别？\n\n**实现**\n\n    转发：用request的getRequestDispatcher()方法得到ReuqestDispatcher对象，调用forward（）方法\n    \n    request.getRequestDispatcher(\"other.jsp\").forward(request, response);\n\n\n    重定向：调用response的sendRedirect(）方法\n    \n    response.sendRedirect(\"other.jsp\");\n\n**区别：**\n\n    1> 重定向2次请求，请求转发1次请求\n    2> 重定向地址栏会变，请求转发地址栏不变\n    3> 重定向是浏览器跳转，请求转发是服务器跳转\n    4> 重定向可以跳转到任意网址，请求转发只能跳转当前项目\n\n\n&nbsp;\n\n-----------------------------\n\n### 1.5Get和Post的区别？\n\n```tex\n1. Get是不安全的，因为在传输过程，数据被放在请求的URL中；Post的所有操作对用户来说都是不可见的。  \n2. Get传送的数据量较小，一般传输数据大小不超过2k-4k（根据浏览器不同，限制不一样，但相差不大这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制。   \n3. Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集。        \n4. Get执行效率却比Post方法好。Get是form提交的默认方法。\n```\n\n   ![image text](/img/web/20210325210742187.png)\n\n\n&nbsp;\n\n--------------------------\n\n## 2.cookie和session的区别？（必会）\n\n```tex\n1.存储位置不同cookie的数据信息存放在客户端浏览器上。 session的数据信息存放在服务器上。 \n2.存储容量不同单个cookie保存的数据<=4KB，一个站点最多保存20个Cookie。 对于session来说并没有上限，但出于对服务器端的性能考虑，session内不要存放过多的东西，并且设置session删除机制。\n3.存储方式不同cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。 session中能够存储任何类型的数据，包括且不限于string，integer，list，map等。\n4.隐私策略不同cookie对客户端是可见的，别有用心的人可以分析存放在本地的cookie并进行cookie欺骗，所以它是不安全的。 session存储在服务器上，不存在敏感信息泄漏的风险。\n5. 有效期上不同开发可以通过设置cookie的属性，达到使cookie长期有效的效果。 session依赖于名为JSESSIONID的cookie，而cookie JSESSIONID的过期时间默认为-1，只需关闭窗口该session就会失效，因而session不能达到长期有效的效果。\n6.服务器压力不同cookie保管在客户端，不占用服务器资源。对于并发用户十分多的网站，cookie是很好的选择。 session是保管在服务器端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的session，耗费大量的内存。 \n```\n\n\n&nbsp;\n\n--------------------------\n\n## 3.Jsp和Servlet（了解）\n\n1.Jsp和Servlet的区别？\n\n相同点\n\n    jsp经编译后就变成了servlet，jsp本质就是servlet，jvm只能识别java的类，不能识别jsp代码，web容器将jsp的代码编译成jvm能够识别的java类。其实就是当你通过 http 请求一个 JSP 页面是，首先 Tomcat 会调用 service（）方法将JSP编译成为 Servlet，然后执行 Servlet。\n\n不同点\n\n    JSP侧重视图，Sevlet主要用于控制逻辑。Servlet中没有内置对象 。JSP中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n\n\n2.Servlet的生命周期\n\n    // 1. servlet对象创建时，调用此方法public void init(ServletConfig servletConfig);// 2. 用户访问servlet时，调用此方法public void service(ServletRequest servletRequest, ServletResponse servletResponse);// 3. servlet对象销毁时，调用此方法public void destroy();\n\n3.JSP九大内置对象\n\n    out对象：用于向客户端、浏览器输出数据。\n    request对象：封装了来自客户端、浏览器的各种信息。\n    response对象：封装了服务器的响应信息。\n    exception对象：封装了jsp程序执行过程中发生的异常和错误信息。\n    config对象：封装了应用程序的配置信息。\n    page对象：指向了当前jsp程序本身。\n    session对象：用来保存会话信息。也就是说，可以实现在同一用户的不同请求之间共享数\n    application对象：代表了当前应用程序的上下文。可以在不同的用户之间共享信息。\n    pageContext对象：提供了对jsp页面所有对象以及命名空间的访问。\n\n&nbsp;\n\n----------------------------\n\n## 4.Ajax的介绍（必会）\n\nAjax 即\"Asynchronous JavaScript And XML\"（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。 \n\n        $.ajax({ \n        选项 \n        })\n        常见的选项有: \n        type:请求方式,常见的值有\"get\",\"post\"等,默认值:get \n        url:请求的路径,\"/ajax/hello\" \n        data:请求的参数,参数的常见写法有键值对或者json \n        方式1: name=tom&pwd=123 \n        方式2: {\"name\":\"tom\",\"pwd\":\"123\"} \n        success:请求成功后的回调函数 function(返回值的参数名){} \n        contentType:用来设置请求参数的mime类型,默认值:表单的enctype默认值 name=tom&pwd=123 \n        error:ajax请求时内部发生错误时执行的回调函数 function(){} \n        dataType:指定返回值的类型 常见值:text json \n        async:是否异步 默认值true \n\n\nAjax应用程序的优势在于：\n\n\n       1. 通过异步模式，提升了用户体验 \n       2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少    了带宽占用 \n       3. Ajax引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。","slug":"Web","published":1,"updated":"2022-05-30T09:03:39.435Z","_id":"cl3kwbmxe00065cu3bt3qafnt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"1-网络通讯部分\"><a href=\"#1-网络通讯部分\" class=\"headerlink\" title=\"1.网络通讯部分\"></a>1.网络通讯部分</h2><h3 id=\"1-1TCP与UDP区别？（了解）\"><a href=\"#1-1TCP与UDP区别？（了解）\" class=\"headerlink\" title=\"1.1TCP与UDP区别？（了解）\"></a>1.1TCP与UDP区别？（了解）</h3><p><img src=\"/img/web/%E5%9B%BE%E7%89%8728.png\"></p>\n<pre><code class=\"hljs\">TCP(Transmission Control Protocol 传输控制协议)是一种面向连接(连接导向)的、可靠的、基于IP的传输层协议。\n\nUDP是User Datagram Protocol的简称，中文名是用户数据报协议，是OSI参考模型中的传输层协议，它是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。\n\nTCP和UDP都是来自于传输层的协议。传输层位于应用层和网络层之间，负责位于不同主机进程之间的通信。\n</code></pre>\n<p>TCP与UDP的区别</p>\n<p><img src=\"/img/web/%E5%9B%BE%E7%89%8729.png\"></p>\n<pre><code class=\"hljs\">1.TCP基于连接UDP无连接\n2.TCP要求系统资源较多,UDP较少 \n3.TCP保证数据正确性，UDP可能丢包 \n4.TCP保证数据顺序，UDP不保证 \n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-2什么是HTTP协议？\"><a href=\"#1-2什么是HTTP协议？\" class=\"headerlink\" title=\"1.2什么是HTTP协议？\"></a>1.2什么是HTTP协议？</h3><pre><code class=\"hljs\">    客户端和服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”。 \n    是一个基于请求与响应模式的、无状态的、应用层的协议，基于 TCP 的连接方式\n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-3TCP的三次握手\"><a href=\"#1-3TCP的三次握手\" class=\"headerlink\" title=\"1.3TCP的三次握手\"></a>1.3TCP的三次握手</h3><pre><code class=\"hljs\">为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。\n</code></pre>\n<p><img src=\"/img/web/%E5%9B%BE%E7%89%8730.png\" alt=\"image text\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">为什么要三次握手？<br>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。<br><br>SYN：同步序列编号（Synchronize Sequence Numbers）。是TCP/IP建立连接时使用的握手信号。<br>第一次握手：客户端给服务器发送一个SYN。客户端发送网络包，服务端收到了。服务器得出结论：客户端的发送能力，服务端的接收能力正常。<br>第二次握手：服务端收到SYN报文之后，会应答一个SYN+ACK报文。服务端发包，客户端收到了。<br>客户端得出结论：服务端的接收和发送能力，客户端的接收和发送能力正常。但是此时服务端不能确认客户端的接收能力是否正常。<br>第三次握手;客户端收到SYN+ACK报文之后，回应一个ACK报文。客户端发包，服务端收到了。服务器得出结论：客户端的接收和发送能力，自己的接收发送能力都正常。<br>通过三次握手，双方都确认对方的接收以及发送能力正常。<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-4HTTP中重定向和请求转发的区别？\"><a href=\"#1-4HTTP中重定向和请求转发的区别？\" class=\"headerlink\" title=\"1.4HTTP中重定向和请求转发的区别？\"></a>1.4HTTP中重定向和请求转发的区别？</h3><p><strong>实现</strong></p>\n<pre><code class=\"hljs\">转发：用request的getRequestDispatcher()方法得到ReuqestDispatcher对象，调用forward（）方法\n\nrequest.getRequestDispatcher(&quot;other.jsp&quot;).forward(request, response);\n\n\n重定向：调用response的sendRedirect(）方法\n\nresponse.sendRedirect(&quot;other.jsp&quot;);\n</code></pre>\n<p><strong>区别：</strong></p>\n<pre><code class=\"hljs\">1&gt; 重定向2次请求，请求转发1次请求\n2&gt; 重定向地址栏会变，请求转发地址栏不变\n3&gt; 重定向是浏览器跳转，请求转发是服务器跳转\n4&gt; 重定向可以跳转到任意网址，请求转发只能跳转当前项目\n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-5Get和Post的区别？\"><a href=\"#1-5Get和Post的区别？\" class=\"headerlink\" title=\"1.5Get和Post的区别？\"></a>1.5Get和Post的区别？</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">1. Get是不安全的，因为在传输过程，数据被放在请求的URL中；Post的所有操作对用户来说都是不可见的。  <br>2. Get传送的数据量较小，一般传输数据大小不超过2k-4k（根据浏览器不同，限制不一样，但相差不大这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制。   <br>3. Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集。        <br>4. Get执行效率却比Post方法好。Get是form提交的默认方法。<br></code></pre></td></tr></table></figure>\n\n<p>   <img src=\"/img/web/20210325210742187.png\" alt=\"image text\"></p>\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"2-cookie和session的区别？（必会）\"><a href=\"#2-cookie和session的区别？（必会）\" class=\"headerlink\" title=\"2.cookie和session的区别？（必会）\"></a>2.cookie和session的区别？（必会）</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">1.存储位置不同cookie的数据信息存放在客户端浏览器上。 session的数据信息存放在服务器上。 <br>2.存储容量不同单个cookie保存的数据&lt;=4KB，一个站点最多保存20个Cookie。 对于session来说并没有上限，但出于对服务器端的性能考虑，session内不要存放过多的东西，并且设置session删除机制。<br>3.存储方式不同cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。 session中能够存储任何类型的数据，包括且不限于string，integer，list，map等。<br>4.隐私策略不同cookie对客户端是可见的，别有用心的人可以分析存放在本地的cookie并进行cookie欺骗，所以它是不安全的。 session存储在服务器上，不存在敏感信息泄漏的风险。<br>5. 有效期上不同开发可以通过设置cookie的属性，达到使cookie长期有效的效果。 session依赖于名为JSESSIONID的cookie，而cookie JSESSIONID的过期时间默认为-1，只需关闭窗口该session就会失效，因而session不能达到长期有效的效果。<br>6.服务器压力不同cookie保管在客户端，不占用服务器资源。对于并发用户十分多的网站，cookie是很好的选择。 session是保管在服务器端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的session，耗费大量的内存。 <br></code></pre></td></tr></table></figure>\n\n\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"3-Jsp和Servlet（了解）\"><a href=\"#3-Jsp和Servlet（了解）\" class=\"headerlink\" title=\"3.Jsp和Servlet（了解）\"></a>3.Jsp和Servlet（了解）</h2><p>1.Jsp和Servlet的区别？</p>\n<p>相同点</p>\n<pre><code class=\"hljs\">jsp经编译后就变成了servlet，jsp本质就是servlet，jvm只能识别java的类，不能识别jsp代码，web容器将jsp的代码编译成jvm能够识别的java类。其实就是当你通过 http 请求一个 JSP 页面是，首先 Tomcat 会调用 service（）方法将JSP编译成为 Servlet，然后执行 Servlet。\n</code></pre>\n<p>不同点</p>\n<pre><code class=\"hljs\">JSP侧重视图，Sevlet主要用于控制逻辑。Servlet中没有内置对象 。JSP中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n</code></pre>\n<p>2.Servlet的生命周期</p>\n<pre><code class=\"hljs\">// 1. servlet对象创建时，调用此方法public void init(ServletConfig servletConfig);// 2. 用户访问servlet时，调用此方法public void service(ServletRequest servletRequest, ServletResponse servletResponse);// 3. servlet对象销毁时，调用此方法public void destroy();\n</code></pre>\n<p>3.JSP九大内置对象</p>\n<pre><code class=\"hljs\">out对象：用于向客户端、浏览器输出数据。\nrequest对象：封装了来自客户端、浏览器的各种信息。\nresponse对象：封装了服务器的响应信息。\nexception对象：封装了jsp程序执行过程中发生的异常和错误信息。\nconfig对象：封装了应用程序的配置信息。\npage对象：指向了当前jsp程序本身。\nsession对象：用来保存会话信息。也就是说，可以实现在同一用户的不同请求之间共享数\napplication对象：代表了当前应用程序的上下文。可以在不同的用户之间共享信息。\npageContext对象：提供了对jsp页面所有对象以及命名空间的访问。\n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"4-Ajax的介绍（必会）\"><a href=\"#4-Ajax的介绍（必会）\" class=\"headerlink\" title=\"4.Ajax的介绍（必会）\"></a>4.Ajax的介绍（必会）</h2><p>Ajax 即”Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。 </p>\n<pre><code class=\"hljs\">    $.ajax(&#123; \n    选项 \n    &#125;)\n    常见的选项有: \n    type:请求方式,常见的值有&quot;get&quot;,&quot;post&quot;等,默认值:get \n    url:请求的路径,&quot;/ajax/hello&quot; \n    data:请求的参数,参数的常见写法有键值对或者json \n    方式1: name=tom&amp;pwd=123 \n    方式2: &#123;&quot;name&quot;:&quot;tom&quot;,&quot;pwd&quot;:&quot;123&quot;&#125; \n    success:请求成功后的回调函数 function(返回值的参数名)&#123;&#125; \n    contentType:用来设置请求参数的mime类型,默认值:表单的enctype默认值 name=tom&amp;pwd=123 \n    error:ajax请求时内部发生错误时执行的回调函数 function()&#123;&#125; \n    dataType:指定返回值的类型 常见值:text json \n    async:是否异步 默认值true \n</code></pre>\n<p>Ajax应用程序的优势在于：</p>\n<pre><code class=\"hljs\">   1. 通过异步模式，提升了用户体验 \n   2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少    了带宽占用 \n   3. Ajax引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。\n</code></pre>\n","site":{"data":{}},"wordcount":3680,"excerpt":"","more":"<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"1-网络通讯部分\"><a href=\"#1-网络通讯部分\" class=\"headerlink\" title=\"1.网络通讯部分\"></a>1.网络通讯部分</h2><h3 id=\"1-1TCP与UDP区别？（了解）\"><a href=\"#1-1TCP与UDP区别？（了解）\" class=\"headerlink\" title=\"1.1TCP与UDP区别？（了解）\"></a>1.1TCP与UDP区别？（了解）</h3><p><img src=\"/img/web/%E5%9B%BE%E7%89%8728.png\"></p>\n<pre><code>TCP(Transmission Control Protocol 传输控制协议)是一种面向连接(连接导向)的、可靠的、基于IP的传输层协议。\n\nUDP是User Datagram Protocol的简称，中文名是用户数据报协议，是OSI参考模型中的传输层协议，它是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。\n\nTCP和UDP都是来自于传输层的协议。传输层位于应用层和网络层之间，负责位于不同主机进程之间的通信。\n</code></pre>\n<p>TCP与UDP的区别</p>\n<p><img src=\"/img/web/%E5%9B%BE%E7%89%8729.png\"></p>\n<pre><code>1.TCP基于连接UDP无连接\n2.TCP要求系统资源较多,UDP较少 \n3.TCP保证数据正确性，UDP可能丢包 \n4.TCP保证数据顺序，UDP不保证 \n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-2什么是HTTP协议？\"><a href=\"#1-2什么是HTTP协议？\" class=\"headerlink\" title=\"1.2什么是HTTP协议？\"></a>1.2什么是HTTP协议？</h3><pre><code>    客户端和服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”。 \n    是一个基于请求与响应模式的、无状态的、应用层的协议，基于 TCP 的连接方式\n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-3TCP的三次握手\"><a href=\"#1-3TCP的三次握手\" class=\"headerlink\" title=\"1.3TCP的三次握手\"></a>1.3TCP的三次握手</h3><pre><code>为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。\n</code></pre>\n<p><img src=\"/img/web/%E5%9B%BE%E7%89%8730.png\" alt=\"image text\"></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">为什么要三次握手？<br>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。<br><br>SYN：同步序列编号（Synchronize Sequence Numbers）。是TCP/IP建立连接时使用的握手信号。<br>第一次握手：客户端给服务器发送一个SYN。客户端发送网络包，服务端收到了。服务器得出结论：客户端的发送能力，服务端的接收能力正常。<br>第二次握手：服务端收到SYN报文之后，会应答一个SYN+ACK报文。服务端发包，客户端收到了。<br>客户端得出结论：服务端的接收和发送能力，客户端的接收和发送能力正常。但是此时服务端不能确认客户端的接收能力是否正常。<br>第三次握手;客户端收到SYN+ACK报文之后，回应一个ACK报文。客户端发包，服务端收到了。服务器得出结论：客户端的接收和发送能力，自己的接收发送能力都正常。<br>通过三次握手，双方都确认对方的接收以及发送能力正常。<br></code></pre></td></tr></table></figure>\n\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-4HTTP中重定向和请求转发的区别？\"><a href=\"#1-4HTTP中重定向和请求转发的区别？\" class=\"headerlink\" title=\"1.4HTTP中重定向和请求转发的区别？\"></a>1.4HTTP中重定向和请求转发的区别？</h3><p><strong>实现</strong></p>\n<pre><code>转发：用request的getRequestDispatcher()方法得到ReuqestDispatcher对象，调用forward（）方法\n\nrequest.getRequestDispatcher(&quot;other.jsp&quot;).forward(request, response);\n\n\n重定向：调用response的sendRedirect(）方法\n\nresponse.sendRedirect(&quot;other.jsp&quot;);\n</code></pre>\n<p><strong>区别：</strong></p>\n<pre><code>1&gt; 重定向2次请求，请求转发1次请求\n2&gt; 重定向地址栏会变，请求转发地址栏不变\n3&gt; 重定向是浏览器跳转，请求转发是服务器跳转\n4&gt; 重定向可以跳转到任意网址，请求转发只能跳转当前项目\n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h3 id=\"1-5Get和Post的区别？\"><a href=\"#1-5Get和Post的区别？\" class=\"headerlink\" title=\"1.5Get和Post的区别？\"></a>1.5Get和Post的区别？</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">1. Get是不安全的，因为在传输过程，数据被放在请求的URL中；Post的所有操作对用户来说都是不可见的。  <br>2. Get传送的数据量较小，一般传输数据大小不超过2k-4k（根据浏览器不同，限制不一样，但相差不大这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制。   <br>3. Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集。        <br>4. Get执行效率却比Post方法好。Get是form提交的默认方法。<br></code></pre></td></tr></table></figure>\n\n<p>   <img src=\"/img/web/20210325210742187.png\" alt=\"image text\"></p>\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"2-cookie和session的区别？（必会）\"><a href=\"#2-cookie和session的区别？（必会）\" class=\"headerlink\" title=\"2.cookie和session的区别？（必会）\"></a>2.cookie和session的区别？（必会）</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">1.存储位置不同cookie的数据信息存放在客户端浏览器上。 session的数据信息存放在服务器上。 <br>2.存储容量不同单个cookie保存的数据&lt;=4KB，一个站点最多保存20个Cookie。 对于session来说并没有上限，但出于对服务器端的性能考虑，session内不要存放过多的东西，并且设置session删除机制。<br>3.存储方式不同cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。 session中能够存储任何类型的数据，包括且不限于string，integer，list，map等。<br>4.隐私策略不同cookie对客户端是可见的，别有用心的人可以分析存放在本地的cookie并进行cookie欺骗，所以它是不安全的。 session存储在服务器上，不存在敏感信息泄漏的风险。<br>5. 有效期上不同开发可以通过设置cookie的属性，达到使cookie长期有效的效果。 session依赖于名为JSESSIONID的cookie，而cookie JSESSIONID的过期时间默认为-1，只需关闭窗口该session就会失效，因而session不能达到长期有效的效果。<br>6.服务器压力不同cookie保管在客户端，不占用服务器资源。对于并发用户十分多的网站，cookie是很好的选择。 session是保管在服务器端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的session，耗费大量的内存。 <br></code></pre></td></tr></table></figure>\n\n\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"3-Jsp和Servlet（了解）\"><a href=\"#3-Jsp和Servlet（了解）\" class=\"headerlink\" title=\"3.Jsp和Servlet（了解）\"></a>3.Jsp和Servlet（了解）</h2><p>1.Jsp和Servlet的区别？</p>\n<p>相同点</p>\n<pre><code>jsp经编译后就变成了servlet，jsp本质就是servlet，jvm只能识别java的类，不能识别jsp代码，web容器将jsp的代码编译成jvm能够识别的java类。其实就是当你通过 http 请求一个 JSP 页面是，首先 Tomcat 会调用 service（）方法将JSP编译成为 Servlet，然后执行 Servlet。\n</code></pre>\n<p>不同点</p>\n<pre><code>JSP侧重视图，Sevlet主要用于控制逻辑。Servlet中没有内置对象 。JSP中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n</code></pre>\n<p>2.Servlet的生命周期</p>\n<pre><code>// 1. servlet对象创建时，调用此方法public void init(ServletConfig servletConfig);// 2. 用户访问servlet时，调用此方法public void service(ServletRequest servletRequest, ServletResponse servletResponse);// 3. servlet对象销毁时，调用此方法public void destroy();\n</code></pre>\n<p>3.JSP九大内置对象</p>\n<pre><code>out对象：用于向客户端、浏览器输出数据。\nrequest对象：封装了来自客户端、浏览器的各种信息。\nresponse对象：封装了服务器的响应信息。\nexception对象：封装了jsp程序执行过程中发生的异常和错误信息。\nconfig对象：封装了应用程序的配置信息。\npage对象：指向了当前jsp程序本身。\nsession对象：用来保存会话信息。也就是说，可以实现在同一用户的不同请求之间共享数\napplication对象：代表了当前应用程序的上下文。可以在不同的用户之间共享信息。\npageContext对象：提供了对jsp页面所有对象以及命名空间的访问。\n</code></pre>\n<p>&nbsp;</p>\n<hr>\n<h2 id=\"4-Ajax的介绍（必会）\"><a href=\"#4-Ajax的介绍（必会）\" class=\"headerlink\" title=\"4.Ajax的介绍（必会）\"></a>4.Ajax的介绍（必会）</h2><p>Ajax 即”Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。 </p>\n<pre><code>    $.ajax(&#123; \n    选项 \n    &#125;)\n    常见的选项有: \n    type:请求方式,常见的值有&quot;get&quot;,&quot;post&quot;等,默认值:get \n    url:请求的路径,&quot;/ajax/hello&quot; \n    data:请求的参数,参数的常见写法有键值对或者json \n    方式1: name=tom&amp;pwd=123 \n    方式2: &#123;&quot;name&quot;:&quot;tom&quot;,&quot;pwd&quot;:&quot;123&quot;&#125; \n    success:请求成功后的回调函数 function(返回值的参数名)&#123;&#125; \n    contentType:用来设置请求参数的mime类型,默认值:表单的enctype默认值 name=tom&amp;pwd=123 \n    error:ajax请求时内部发生错误时执行的回调函数 function()&#123;&#125; \n    dataType:指定返回值的类型 常见值:text json \n    async:是否异步 默认值true \n</code></pre>\n<p>Ajax应用程序的优势在于：</p>\n<pre><code>   1. 通过异步模式，提升了用户体验 \n   2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少    了带宽占用 \n   3. Ajax引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。\n</code></pre>\n"},{"title":"elementUI修改表头指定列","date":"2022-05-13T02:22:33.000Z","author":"Evan","index_img":"/img/bg9.jpg","_content":"\n\n\n\n## elementUI如何修改表头的某一列样式？\n\n今天碰到个需求，要在elementUI 的表格头上根据不同的列名称改变颜色。\n\n如图所示：\n\n![](/img/elementui-%E7%AC%94%E8%AE%B0/headerRowStyle.PNG)\n\n### 实现方法\n\n```vue\n//调用headerRowStyle方法\n<el-table :data=\"tableData\" border :header-cell-style=\"headerRowStyle\">\n```\n\n定义headerRowStyle方法\n\n```js\n headerRowStyle(obj){\n     //根据列的标签名来指定修改\n        if(obj.column.label==\"日期\"){ \n          return 'color: #fff;background:#00bfbf'\n        }\n        if(obj.column.label==\"姓名\"){\n          return 'color: #fff;background:#ffd454'\n        }\n        if(obj.column.label==\"地址\") {\n          return 'color:#00ffff'\n        }\n      }\n```\n\n完整代码如下：\n\n```vue\n<template>\n  <el-table\n    :data=\"tableData\"\n    border\n    style=\"width: 100%\" :header-cell-style=\"headerRowStyle\">\n    <el-table-column\n      prop=\"date\"\n      label=\"日期\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"name\"\n      label=\"姓名\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"address\"\n      label=\"地址\">\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    name: \"table\",\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-04',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1517 弄'\n        }, {\n          date: '2016-05-01',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1519 弄'\n        }, {\n          date: '2016-05-03',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1516 弄'\n        }]\n      }\n    },\n    created() {\n      this.setdates(this.tableData)\n    },\n    methods: {\n\n\n      headerRowStyle(obj){\n\n\n        if(obj.column.label==\"日期\"){\n          return 'color: #fff;background:#00bfbf'\n        }\n        if(obj.column.label==\"姓名\"){\n          return 'color: #fff;background:#ffd454'\n        }\n        if(obj.column.label==\"地址\") {\n          return 'color:#00ffff'\n        }\n      },\n    }\n  };\n</script>\n\n\n\n<style scoped>\n\n</style>\n\n\n\n```\n\n","source":"_posts/elementUI修改表头指定列.md","raw":"---\ntitle: elementUI修改表头指定列\ndate: 2022-05-13 10:22:33\nauthor: Evan\ncategories: 笔记\nindex_img: /img/bg9.jpg\ntags:\n- elementUI\n\n---\n\n\n\n\n## elementUI如何修改表头的某一列样式？\n\n今天碰到个需求，要在elementUI 的表格头上根据不同的列名称改变颜色。\n\n如图所示：\n\n![](/img/elementui-%E7%AC%94%E8%AE%B0/headerRowStyle.PNG)\n\n### 实现方法\n\n```vue\n//调用headerRowStyle方法\n<el-table :data=\"tableData\" border :header-cell-style=\"headerRowStyle\">\n```\n\n定义headerRowStyle方法\n\n```js\n headerRowStyle(obj){\n     //根据列的标签名来指定修改\n        if(obj.column.label==\"日期\"){ \n          return 'color: #fff;background:#00bfbf'\n        }\n        if(obj.column.label==\"姓名\"){\n          return 'color: #fff;background:#ffd454'\n        }\n        if(obj.column.label==\"地址\") {\n          return 'color:#00ffff'\n        }\n      }\n```\n\n完整代码如下：\n\n```vue\n<template>\n  <el-table\n    :data=\"tableData\"\n    border\n    style=\"width: 100%\" :header-cell-style=\"headerRowStyle\">\n    <el-table-column\n      prop=\"date\"\n      label=\"日期\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"name\"\n      label=\"姓名\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"address\"\n      label=\"地址\">\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    name: \"table\",\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-04',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1517 弄'\n        }, {\n          date: '2016-05-01',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1519 弄'\n        }, {\n          date: '2016-05-03',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1516 弄'\n        }]\n      }\n    },\n    created() {\n      this.setdates(this.tableData)\n    },\n    methods: {\n\n\n      headerRowStyle(obj){\n\n\n        if(obj.column.label==\"日期\"){\n          return 'color: #fff;background:#00bfbf'\n        }\n        if(obj.column.label==\"姓名\"){\n          return 'color: #fff;background:#ffd454'\n        }\n        if(obj.column.label==\"地址\") {\n          return 'color:#00ffff'\n        }\n      },\n    }\n  };\n</script>\n\n\n\n<style scoped>\n\n</style>\n\n\n\n```\n\n","slug":"elementUI修改表头指定列","published":1,"updated":"2022-05-30T08:53:26.953Z","_id":"cl3kwbmxf00075cu312jj6bbc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"elementUI如何修改表头的某一列样式？\"><a href=\"#elementUI如何修改表头的某一列样式？\" class=\"headerlink\" title=\"elementUI如何修改表头的某一列样式？\"></a>elementUI如何修改表头的某一列样式？</h2><p>今天碰到个需求，要在elementUI 的表格头上根据不同的列名称改变颜色。</p>\n<p>如图所示：</p>\n<p><img src=\"/img/elementui-%E7%AC%94%E8%AE%B0/headerRowStyle.PNG\"></p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">//调用headerRowStyle方法<br>&lt;el-table :data=&quot;tableData&quot; border :header-cell-style=&quot;headerRowStyle&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n<p>定义headerRowStyle方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">headerRowStyle</span>(<span class=\"hljs-params\">obj</span>)&#123;<br>    <span class=\"hljs-comment\">//根据列的标签名来指定修改</span><br>       <span class=\"hljs-keyword\">if</span>(obj.<span class=\"hljs-property\">column</span>.<span class=\"hljs-property\">label</span>==<span class=\"hljs-string\">&quot;日期&quot;</span>)&#123; <br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;color: #fff;background:#00bfbf&#x27;</span><br>       &#125;<br>       <span class=\"hljs-keyword\">if</span>(obj.<span class=\"hljs-property\">column</span>.<span class=\"hljs-property\">label</span>==<span class=\"hljs-string\">&quot;姓名&quot;</span>)&#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;color: #fff;background:#ffd454&#x27;</span><br>       &#125;<br>       <span class=\"hljs-keyword\">if</span>(obj.<span class=\"hljs-property\">column</span>.<span class=\"hljs-property\">label</span>==<span class=\"hljs-string\">&quot;地址&quot;</span>) &#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;color:#00ffff&#x27;</span><br>       &#125;<br>     &#125;<br></code></pre></td></tr></table></figure>\n\n<p>完整代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;el-table<br>    :data=&quot;tableData&quot;<br>    border<br>    style=&quot;width: 100%&quot; :header-cell-style=&quot;headerRowStyle&quot;&gt;<br>    &lt;el-table-column<br>      prop=&quot;date&quot;<br>      label=&quot;日期&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;name&quot;<br>      label=&quot;姓名&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;address&quot;<br>      label=&quot;地址&quot;&gt;<br>    &lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    name: &quot;table&quot;,<br>    data() &#123;<br>      return &#123;<br>        tableData: [&#123;<br>          date: &#x27;2016-05-02&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-04&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1517 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-01&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1519 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-03&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1516 弄&#x27;<br>        &#125;]<br>      &#125;<br>    &#125;,<br>    created() &#123;<br>      this.setdates(this.tableData)<br>    &#125;,<br>    methods: &#123;<br><br><br>      headerRowStyle(obj)&#123;<br><br><br>        if(obj.column.label==&quot;日期&quot;)&#123;<br>          return &#x27;color: #fff;background:#00bfbf&#x27;<br>        &#125;<br>        if(obj.column.label==&quot;姓名&quot;)&#123;<br>          return &#x27;color: #fff;background:#ffd454&#x27;<br>        &#125;<br>        if(obj.column.label==&quot;地址&quot;) &#123;<br>          return &#x27;color:#00ffff&#x27;<br>        &#125;<br>      &#125;,<br>    &#125;<br>  &#125;;<br>&lt;/script&gt;<br><br><br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":2083,"excerpt":"","more":"<h2 id=\"elementUI如何修改表头的某一列样式？\"><a href=\"#elementUI如何修改表头的某一列样式？\" class=\"headerlink\" title=\"elementUI如何修改表头的某一列样式？\"></a>elementUI如何修改表头的某一列样式？</h2><p>今天碰到个需求，要在elementUI 的表格头上根据不同的列名称改变颜色。</p>\n<p>如图所示：</p>\n<p><img src=\"/img/elementui-%E7%AC%94%E8%AE%B0/headerRowStyle.PNG\"></p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">//调用headerRowStyle方法<br>&lt;el-table :data=&quot;tableData&quot; border :header-cell-style=&quot;headerRowStyle&quot;&gt;<br></code></pre></td></tr></table></figure>\n\n<p>定义headerRowStyle方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">headerRowStyle</span>(<span class=\"hljs-params\">obj</span>)&#123;<br>    <span class=\"hljs-comment\">//根据列的标签名来指定修改</span><br>       <span class=\"hljs-keyword\">if</span>(obj.<span class=\"hljs-property\">column</span>.<span class=\"hljs-property\">label</span>==<span class=\"hljs-string\">&quot;日期&quot;</span>)&#123; <br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;color: #fff;background:#00bfbf&#x27;</span><br>       &#125;<br>       <span class=\"hljs-keyword\">if</span>(obj.<span class=\"hljs-property\">column</span>.<span class=\"hljs-property\">label</span>==<span class=\"hljs-string\">&quot;姓名&quot;</span>)&#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;color: #fff;background:#ffd454&#x27;</span><br>       &#125;<br>       <span class=\"hljs-keyword\">if</span>(obj.<span class=\"hljs-property\">column</span>.<span class=\"hljs-property\">label</span>==<span class=\"hljs-string\">&quot;地址&quot;</span>) &#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;color:#00ffff&#x27;</span><br>       &#125;<br>     &#125;<br></code></pre></td></tr></table></figure>\n\n<p>完整代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;el-table<br>    :data=&quot;tableData&quot;<br>    border<br>    style=&quot;width: 100%&quot; :header-cell-style=&quot;headerRowStyle&quot;&gt;<br>    &lt;el-table-column<br>      prop=&quot;date&quot;<br>      label=&quot;日期&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;name&quot;<br>      label=&quot;姓名&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;address&quot;<br>      label=&quot;地址&quot;&gt;<br>    &lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    name: &quot;table&quot;,<br>    data() &#123;<br>      return &#123;<br>        tableData: [&#123;<br>          date: &#x27;2016-05-02&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-04&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1517 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-01&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1519 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-03&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1516 弄&#x27;<br>        &#125;]<br>      &#125;<br>    &#125;,<br>    created() &#123;<br>      this.setdates(this.tableData)<br>    &#125;,<br>    methods: &#123;<br><br><br>      headerRowStyle(obj)&#123;<br><br><br>        if(obj.column.label==&quot;日期&quot;)&#123;<br>          return &#x27;color: #fff;background:#00bfbf&#x27;<br>        &#125;<br>        if(obj.column.label==&quot;姓名&quot;)&#123;<br>          return &#x27;color: #fff;background:#ffd454&#x27;<br>        &#125;<br>        if(obj.column.label==&quot;地址&quot;) &#123;<br>          return &#x27;color:#00ffff&#x27;<br>        &#125;<br>      &#125;,<br>    &#125;<br>  &#125;;<br>&lt;/script&gt;<br><br><br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Java多线程","date":"2022-03-16T03:54:35.000Z","author":"Evan","index_img":"/img/bg3.jpg","_content":"\n# Java多线程\n\n## 1 线程简介\n\n案例:英雄联盟，微信聊天。\n\n多任务：边吃饭比那玩手机，边开车边打电话，但同一瞬间依旧只做了一件事。\n\n多线程：多条路解决阻塞问题。王者荣耀。\n\n### 1.1 普通方法调用和多线程\n\n![image](/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic1.PNG)\n\n* 进程：操作系统中运行的程序\n* 线程：一个进程里面可以有多个线程，视频中，同时有声音，图像等\n\n\n\n### 1.2 Process与Thread\n\n* 说起线程，就不得不说下程序，程序时指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。\n\n* 而**进程**则是执行程序的一次执行过程，它是一个动态的概念。时系统资源分配的单位\n\n* 通常在一个进程中可以包若干个线程，当然一个进程至少有一个线程，不然没有存在的意义。线程时CPU调度和执行的单位。\n\n  注意：很多多线程是模拟出来的，真正的多线程是指多个cpu，即多核，如服务器。\n  如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错局。\n\n* 线程就是独立的执行路径；\n* 在程序运行时，即使没有直接创建线程，后台也会有多个线程，如主线程，gc线程；\n* main()称之为主线程，为系统的入口，用于执行整个程序；\n* 在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的。\n* 对于同一份资源的操作时，会存在资源抢夺的问题，需要加入并发控制；\n* 线程会带来额外的开销，如cpu调度时间，并发控制开销。\n* 每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。\n\n***\n\n## 2 线程创建\n\n### 2.1 继承Thread类\n\n* 自定义线程类继承Thread类\n\n* 重写run()方法，编写线程执行体\n\n* 创建线程对象，调用start()方法启动线程\n\n  ```java\n  public class startThread1  extends Thread{\n  \t\n  \tpublic void run() {\n  \t\tfor(int i=0;i<10;i++) {\n  \t\tSystem.out.println(\"我在上班\");\n  \t\t}\n  \t}\n  \tpublic static void main(String[] args) {\n  \t\tstartThread1 thread=new startThread1();\n  \t\tthread.start();\n  \t\tfor(int i=0;i<10;i++) {\n  \t\t\tSystem.out.println(\"我在摸鱼\");\n  \t\t\t}\n  \t\t\n  \t}\n  }\n  ```\n\n  ### 2.2 实现Runnable接口（最核心)\n\n* 实现MyRunnable类实现Runnable接口\n\n* 实现run()方法，编写线程执行体\n\n* 创建线程对象，调用start()方法启动线程\n\n```java\npublic class startThread2 implements Runnable{\n\n\tpublic static void main(String[] args) {\n\t\tstartThread2 t2=new startThread2();\n\t\tThread thread=new Thread(t2);\n\t\tthread.start();\n\t\tfor(int i=0;i<10;i++) {\n\t\t\tSystem.out.println(\"我在摸鱼\");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\tfor(int i=0;i<10;i++) {\n\t\t\tSystem.out.println(\"我在上班\");\n\t\t}\n\t\t\n\t}\n\n}\n```\n\n**推荐使用Runnable对象，因为Java单继承的局限性**\n\n* 继承Thread类\n    * 子类继承Thread类具备多线程能力\n    * 启动线程：子类对象.start()\n    * 不建议使用:避免OOP单继承局限性\n* 实现Runnable接口\n  * 实现接口Runnable具有多线程能力\n  * 启动线程：传入目标对象+Thread对象.start()\n  * 推荐使用：避免单继承局限性，灵活方便，方便同一对象被多个线程使用\n\n案例:龟兔赛跑\n\n```java\n/**  \n * 1.首先来个赛道距离，然后要离终点越来越近\n * 2.判断比赛是否结束\n * 3.打印出胜利者\n * 4.龟兔赛跑开始\n * 5.故事中乌龟赢的，兔子需要睡觉，所以我们来模拟兔子睡觉\n * 6.终于，乌龟赢得比赛\n */\npublic class Race implements Runnable {  \n /**胜利者*/  \n private String winner;  \n @Override  \n public void run() {  \n     for (int i = 0; i <= 1000; i++) {  \n         if (getOver(i)) {  \n             break;  \n         }  \n        //兔子轻敌，睡觉去了 \n         if(Thread.currentThread().getName().equals(\"兔\")&&i==50){  \n             try {  \n                 Thread.sleep(10);  \n                 System.out.println(\"兔子睡着了!\");  \n                 } \n             catch (InterruptedException e) {  \n                 e.printStackTrace();  \n             }  \n         } \n         System.out.println(Thread.currentThread().getName()+\"跑了\"+i+\"步;\");  \n     }  \n }  \n /**判断比赛是否结束*/  \n public boolean getOver(int i){  \n     if(winner!=null){  \n         return true;  \n     }else {  \n         if(i==100){  \n             winner = Thread.currentThread().getName();  \n             System.out.println(winner+\"赢得了比赛!\");  \n             return true;  \n         }  \n     } \n     return false;  \n }  \n public static void main(String[] args) {  \n     Race race = new Race();  \n     new Thread(race,\"兔\").start();  \n     new Thread(race,\"龟\").start();  \n }  \n}\n```\n\n\n\n###  2.3 实现Callable接口\n\n1.实现Callable接口，需要返回值类型\n\n2.重写call方法，需要抛出异常\n\n3.创建目标对象\n\n4.创建执行服务：`ExecutorService ser=Executors.newFixedThreadPool(1);`\n\n5.提交执行：`Future<Boolean> result1=ser.submit(t1);`\n\n6.获取结果：`boolean r1 =result1.get()`\n\n7.关闭服务：`ser.shutdownNow();`\n\n\n\n用 Callable 接口改造下载图片案例\n\n```java\nimport org.apache.commons.io.FileUtils;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.concurrent.*;\n//创建线程3 实现Callable 接口\n/*\ncallable 的好处\n1、可以定义返回值\n2、可以抛出异常\n */\npublic class TestCallable implements Callable<Boolean> {\n    private String url; //网络文件路径\n    private String name;// 需要保存为什么文件名称\n    public  TestCallable(String url,String name){\n        this.url = url;\n        this.name = name;\n    }\n    public Boolean call() {\n        webDownLoader webDownLoader = new webDownLoader();\n        webDownLoader.downLoader(url,name);\n        System.out.println(\"下载了文件 ：\"  + name);\n        return true;\n    }\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        TestCallable thread01 = new TestCallable(\"图片路径\",\"1.jpg\");\n        TestCallable thread02 = new TestCallable(\"图片路径\",\"2.jpg\");\n        TestCallable thread03 = new TestCallable(\"图片路径\",\"3.jpg\");\n        //创建执行服务:  3 条线程\n        ExecutorService ser = Executors.newFixedThreadPool(3);\n        //提交执行:\n        Future<Boolean> result1 = ser.submit(thread01);\n        Future<Boolean> result2 = ser.submit(thread02);\n        Future<Boolean> result3 = ser.submit(thread03);\n        //获取结果: 就是call 方法 返回的值\n        boolean r1 = result1.get();\n        boolean r2= result2.get();\n        boolean r3 = result3.get();\n        //关闭服务\n        ser.shutdownNow();\n    }\n}\n//下载器\nclass webDownLoader{\n    //下载方法\n    public  void downLoader(String url, String name){\n        try {\n            FileUtils.copyURLToFile(new URL(url),new File(name));\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.out.println(\"IO downLoader 方法异常。\");\n        }\n    }\n}\n```\n\n***\n\n## 3 线程状态\n\n![](/img/java多线程/pic2.PNG)\n\n![](/img/java多线程/pic3.PNG)\n\n![](/img/java多线程/pic4.PNG)\n\n### 3.1 停止线程\n\n* 不推荐使用JDK提供的stop()、destroy()方法。【已废弃】\n* 推荐线程之间停止下来\n* 建议使用一个标志位进行终止变量\n\n当flag=false，则终止线程运行。\n\n```java\npublic class TestStop implements Runnable {\n\t//1.线程中定义线程体使用的标识\n\tprivate boolean flag =true;\n\t\n\tpublic void run() {\n\t\t//2.线程体使用该标识\n\t\twhile (flag) {\n\t\t\tSystem.out.println(\"run...Thread\");\n\t\t}\n\t}\n\t//3.对外提供方法改变标识\n\tpublic void stop() {\n\t\tthis.flag=false;\n\t}\n}\n```\n\n***\n\n\n\n## 4 线程休眠\n\n* sleep(时间)指定当前线程阻塞的毫秒数；\n* sleep存在异常InterrupterException；\n* sleep时间达到后线程进入就绪状态；\n* sleep可以模拟网络延时，倒计时等。\n* 每一个对象都有一个锁，sleep不会释放锁；\n\n网络延时的作用：放大问题的发生性\n\n```java\npublic class TestSleep {\n    public static void main(String[] args) {\n        try {\n            tenDown();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void tenDown() throws InterruptedException {\n        int num = 10;\n        while (true){\n            Thread.sleep(1000);\n            System.out.println(num--);\n            if(num<=0){\n                break;\n            }\n        }\n    }\n}\n```\n\n\n\n***\n\n\n\n## 5 线程礼让\n\n* 礼让线程，让当前正在执行的线程暂停，但不阻塞\n* 将线程从运行状态转为就绪状态\n* 让cpu重新调度，礼让不一定成功！看CPU心情\n\n例如：CPU正在运行A线程，此时A调用Thread.yield，变为就绪状态，Cpu重新调度A、B线程，\n\n可能还是接着执行A线程，也有可能礼让成功，执行B线程。\n\n```java\npublic class TestYield {\n    public static void main(String[] args) {\n        MyYield myYield = new MyYield();\n        new Thread(myYield,\"a\").start();\n        new Thread(myYield,\"b\").start();\n    }\n}\nclass MyYield implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+\"线程开始执行\");\n        Thread.yield();\n        System.out.println(Thread.currentThread().getName()+\"线程停止执行\");\n    }\n}\n//a线程开始执行\n//b线程开始执行\n//b线程停止执行\n//a线程停止执行\n```\n\n\n\n***\n\n## 6 线程强制执行\n\n* Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞\n* 可以想象成插队\n\n```java\npublic class TestJoin implements Runnable{\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tTestJoin testJoin=new TestJoin();\n\t\tThread thread=new Thread(testJoin);\n\t\t\tthread.start();\n\t\t\tfor(int i=0;i<100;i++) {\n\t\t\t\tif(i==50) {\n\t\t\t\t\tthread.join();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"main--\"+i);\n\t\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tfor(int i=0;i<1000;i++) {\n\t\t\tSystem.out.println(\"join---\"+i);\n\t\t}\n\t}\n}\n```\n\n***\n\n\n\n## 7 观测线程状态\n\n`Thread.State`\n\n 线程状态。线程可以处于一下状态之一：\n\n* NEW\n\n  尚未启动的线程处于此状态\n\n* RUNNABLE\n\n  在Java虚拟机中执行的线程处于此状态。\n\n* BLOCKED\n\n  被阻塞等待监视器锁定的线程处于此状态。\n\n* WAITING\n\n   正在等待另一个线程执行特定动作的线程处于此状态。\n\n* TIMED_WAITING\n\n  正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。\n\n* TERMINATED\n\n  已退出的线程处于此状态。\n\n一个线程可以在给定时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。\n\n\n\n```java\npublic class MyThreadState implements Runnable {  \n     @Override  \n     public void run() {  \n         for (int i = 0; i < 10; i++) {  \n             if(i==5 && i<10){  \n                 try {  \n                     Thread.sleep(1);  \n                     System.out.println(\"阻塞时的状态\"+Thread.currentThread().getState());  \n                 } catch (InterruptedException e) {  \n                     e.printStackTrace();  \n                  }  \n             } \n             System.out.println(Thread.currentThread().getName()+i+\"线程正在执行的状态：\"+Thread.currentThread().getState());  \n         }  \n     }\n}\n```\n\n```java\npublic static void main(String[] args) {  \n MyThreadState myThreadState = new MyThreadState();  \n    Thread thread = new Thread(myThreadState);  \n    Thread.State state = thread.getState();  \n    System.out.println(\"线程创建未启动时状态:\"+state);  \n    thread.start();  \n    state = thread.getState();  \n    System.out.println(\"线程启动后的状态:\"+state);  \n    while (thread.getState()!= Thread.State.TERMINATED){  \n        state = thread.getState();  \n        System.out.println(thread.getName()+\"线程运行时状态:\"+state);  \n    }  \n    state = thread.getState();  \n    System.out.println(\"线程结束状态：\"+state);  \n    System.out.println(Thread.currentThread().getName()+\"线程优先级\"+Thread.currentThread().getPriority());  \n}\n```\n\n****\n\n\n\n## 8 线程优先级\n\n* Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。\n* 线程的优先级用数字表示，范围从1~10.\n  * Thread.MIN_PRIORITY = 1 ;\n  * Thread.MAX_PRIORITY = 10 ;\n  * Thread.NORM_PRIORITY = 5 ;\n\n* 使用以下方式改变或获取优先级\n  * getPriority().setPriority(int xxx)\n\n```java\nclass TestPriority extends Thread{  \n     @Override  \n     public void run() {  \n     System.out.println(TestPriority.currentThread().getName()+\"的优先级\"+TestPriority.currentThread().getPriority());  \n     }  \n}\n```\n\n```java\npublic class MyThreadPriority {  \n     public static void main(String[] args) {  \n        TestPriority priority1 = new TestPriority();  \n        TestPriority priority2 = new TestPriority();  \n        TestPriority priority3 = new TestPriority();  \n        TestPriority priority4 = new TestPriority();  \n        TestPriority priority5 = new TestPriority();  \n        System.out.println(Thread.currentThread().getName()+\"线程优先级\"+Thread.currentThread().getPriority());  \n        priority1.setPriority(6);  \n        priority1.start();  \n//        System.out.println(\"priority1\"+priority1.getPriority());  \n        priority2.setPriority(2);  \n        priority2.start();  \n//        System.out.println(\"priority2\"+priority2.getPriority());  \n        priority3.setPriority(3);  \n        priority3.start();  \n//        System.out.println(\"priority3\"+priority3.getPriority());  \n        priority4.setPriority(8);  \n        priority4.start();  \n//        System.out.println(\"priority4\"+priority4.getPriority());  \n        priority5.setPriority(5);  \n        priority5.start();  \n//        System.out.println(\"priority5\"+priority5.getPriority());  \n     }  \n}\n```\n\n\n\n***\n\n## 9 守护线程\n\n* 线程分为用户线程和守护线程\n* 虚拟机必须确保用户线程执行完毕\n* 虚拟机不用的等待守护线程执行完毕\n* 如，后台记录操作日志，监控内存，垃圾回收等\n\n```java\n/**  \n * 上帝，守护线程  \n */  \nclass God implements Runnable{  \n     @Override  \n     public void run() {  \n         long l = 0;\n         while (true){  \n             out.println(\"上帝保佑你！\"+l++);  \n         }  \n     }\n}\n```\n\n```java\n/**  \n * you 用户线程  \n */  \nclass You implements Runnable{  \n     @Override  \n     public void run() {  \n         for (int i = 0; i < 35000; i++) {  \n             out.println(\"每天都在健康的活着\"+i);  \n         }  \n         out.println(\"you goodBye world!\");  \n     }  \n}\n```\n\n```java\n/**\n* 启动用户线程和守护线程\n*/\npublic class MyThreadDaemon {  \n     public static void main(String[] args) {  \n        You you = new You();  \n        God god = new God();  \n        Thread youThread = new Thread(you);  \n        Thread godThread = new Thread(god);  \n        godThread.setDaemon(true);  \n        youThread.start();  \n        godThread.start();  \n     }  \n}\n```\n\n***\n\n## 10 线程同步\n\n多个线程操作同一资源。\n\n### 10.1并发\n\n同个对象 被多个线程 同时操作\n\n* 现实生活中，我们会遇到“同个资源，多个人都想使用”的问题，比如，食堂排队打饭，每个人都想吃饭，最天然的结局方法就是，排队。一个个来。\n* 处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用\n\n**保证线程同步的安全性：队列加锁**\n\n* 由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入**锁机制synchronized**，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：\n  * 一个线程持有锁会导致其他所有需要此锁的线程挂起；\n  * 在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；\n  * 如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题。\n\n### 10.2不安全线程\n\nArrayList是线程不安全的\n\n```java\n\npublic class MyThreadSafe {  \n    public static void main(String[] args) {  \n        ArrayList<String> arrayList = new ArrayList<>();  \n           for (int i = 0; i < 10000; i++) {  \n                new Thread(()-> {  \n                synchronized(arrayList){  \n                arrayList.add(Thread.currentThread().getName());  \n                               }  \n                }).start();  \n           }  \n        try {  \n            Thread.sleep(100);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(arrayList.size());  \n   }  \n}\n\n```\n\n### 10.3 同步方法\n\n* 由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是**synchronized**关键字，它包括两种用法：synchronized方法和synchronized块。\n\n  **同步方法：`public synchronized void method(int args){}`**\n\n* synchronized方法控制对\"对象\"的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才获得这个锁，继续执行\n\n**缺陷：若将一个大的方法声明为synchronized将会影响效率**\n\n* 方法里面需要修改的内容才需要锁，锁太多会浪费资源。\n\n synchronized默认是锁this，同步方法锁不住的时候只能用同步块\n\n* 同步块:synchronized(Obj){}\n\n* Obj称之为同步监视器\n\n  * Obj可以是任何对象，但推荐使用共享资源作为同步监视器\n  * 同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class【反射】\n\n* 同步监视器的执行过程\n\n  1. 第一个线程访问，锁定同步监视器，执行其中代码。\n\n  2. 第二个线程访问，发现同步监视器被锁定，无法访问。\n  3. 第一个线程访问完毕，解锁同步监视器。\n  4. 第二个线程访问，发现同步监视器没有锁，然后锁定并访问\n\n锁要锁对，默认锁this，银行取钱，锁银行没有用，要锁银行卡。\n\n锁要锁增删改的对象，同步块放在run()方法中。\n\n**银行取钱问题**\n\n1.账户类\n\n```java\nclass Account {  \n    /**余额*/  \n    private int money;  \n       /**卡名*/  \n    private String name;  \n    public Account(int money, String name) {\n\t\tthis.money=money;\n\t\tthis.name=name;\n\t}\n\n\tpublic String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getMoney() {\n        return money;\n    }\n\n    public void setMoney(int money) {\n        this.money = money;\n    }\n}\n```\n\n2.模拟银行取钱\n\n```java\n/**  \n * 模拟银行取钱  \n */  \nclass Drawing extends Thread{  \n     private final Account account;  \n     /**现有的钱*/  \n     private  int nowMoney;  \n     /**取出的钱*/  \n     private int drawingMoney;  \n     public Drawing( Account account,  int drawingMoney,String name) {  \n         super(name);  \n         this.account = account;  \n         this.drawingMoney = drawingMoney;  \n        }  \n     @Override  \n     public void run() {  \n         synchronized (account){  \n         //判断有没有钱  \n         if(account.getMoney()-drawingMoney<0){  \n             out.println(\"你的账户没有那么多钱！\");  \n             return;  \n         }try {  \n             sleep(100);  \n         } catch (InterruptedException e) {  \n             e.printStackTrace();  \n         }  \n         //余额  \n         account.setMoney( account.getMoney() - drawingMoney);  \n         //手中的钱  \n         nowMoney=nowMoney+drawingMoney;  \n         out.println(\"余额为：\"+account.getMoney());  \n         out.println(Thread.currentThread().getName()+\"手中的钱：\"+nowMoney);  \n        }  \n     }\n}\n```\n\n多人从银行取钱\n\n```java\npublic class MyThread{  \n public static void main(String[] args) {  \n     Account account = new Account(100, \"工商\");  \n     Drawing me = new Drawing(account, 40, \"me\");  \n     Drawing girlFriend = new Drawing(account, 89, \"girlFriend\");  \n     me.start();  \n     girlFriend.start();  \n    }  \n}\n```\n\n### 10.4 死锁\n\n* 多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有“**两个以上对象的锁**”时，就可能会发生“死锁”的问题。\n* 产生死锁的四个必要条件:\n\n```\n1.互斥条件：一个资源每次只能被一个进程使用。\n2.请求与保持条件:一个进程因请求资源而阻塞时，对已获得的资源保持不放。\n3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。\n4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。\n```\n\n**只要想办法破坏上述任意一个或多个条件就可以避免死锁发生。**\n\n实现一个死锁\n\n```java\n/**  \n * 口红  \n */  \nclass Lipstick{  \n}  \n/**  \n * 镜子  \n */  \nclass Mirroe{  \n}\n/**  \n * 写一个抢夺资源的方法  \n */  \npublic class MyThread{\n\n\t public static void main(String[] args) {  \n\t       Makeup g1=new Makeup(0,\"小红\");\n\t       Makeup g2=new Makeup(1,\"小丽\");\n\t       g1.start();\n\t       g2.start();\n\t   }  \n\t\n}\nclass Makeup extends Thread{  \n    static Lipstick lipstick = new Lipstick();  \n    static Mirroe mirroe = new Mirroe();  \n    int choice;  \n    String girlName;  \n    public Makeup(int choice, String girlName) {  \n        this.choice = choice;  \n        this.girlName = girlName;  \n    }  \n     @Override  \n     public void run() {  \n         try {  \n             makeup();  \n         } catch (InterruptedException e) {  \n             e.printStackTrace();  \n         }  \n     }  \n     public void makeup() throws InterruptedException {  \n         if(choice==0){  \n             synchronized (lipstick){  \n                 System.out.println(this.girlName+\"拿到口红\");  \n                 Thread.sleep(1000);  \n                 synchronized (mirroe){  \n                     System.out.println(this.girlName+\"拿到镜子\");  \n                 }  \n             } \n         }else{  \n             synchronized (mirroe){  \n                 System.out.println(this.girlName+\"拿到镜子\");  \n                 Thread.sleep(2000);  \n                 synchronized (lipstick){  \n                     System.out.println(this.girlName+\"拿到口红\");  \n                 }  \n             } \n         } \n     }\n}\n```\n\n\n\n***\n\n## 11 Lock锁\n\n* 从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当\n* `java.util.concurrent.locks.Lock`接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象\n* ReentrantLock类实现了Lock，它拥有与synchronized相同得并发性和内存语义，在实现线程安全得控制中，比较常用得是ReentrantLock，可以显式加锁、释放锁。\n\n```java\n//实现\nclass A{\n     private final ReentrantLock lock = new ReentrantLock();  \n    public void m(){\n        lock.lock();\n        try{\n            //保证线程安全的代码；\n        }\n        finally{\n            lock.unlock();\n            //如果同步代码有异常，要将unlock()写入finally语句块\n        \t\t}\n    \t}\n    }\n```\n\n多人买票例子：\n\n```java\n/**  \n * 多人买票，用lock的方式实现  \n */  \nclass TestLock implements Runnable{  \n    int ticketNums=100;  \n    private final ReentrantLock lock = new ReentrantLock();  \n     @Override  \n     public void run() {  \n         while (true){ \t\n             try {  \n            \t lock.lock(); \n                 if(ticketNums>0){  \n                     try {  \n                    \t    Thread.sleep(1000);\n                      } catch (InterruptedException e) {  \n                         e.printStackTrace();  \n                      }  \n                 System.out.println(Thread.currentThread().getName()+\"买到了票\"+ticketNums--);  \n                  }else {  \n                     break;  \n                  }  \n              }finally {  \n                  lock.unlock();  \n              \n              }  \n            \n         } \n     }\n}\npublic class MyLock {  \n    public static void main(String[] args) {  \n        TestLock lock = new TestLock(); \n        new Thread(lock,\"彭于晏\").start();  \n        new Thread(lock,\"陈冠希\").start();  \n        new Thread(lock,\"Evan\").start();  \n    }  \n}\n```\n\n### 11.1 Lock和synchronized对比\n\n* Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放\n* Lock只有代码块锁，synchronized有代码块锁和方法锁\n* 使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）\n* 优先使用顺序：\n  * Lock > 同步代码块（已经进入了方法体，分配了相应资源） >同步方法（在方法体之外）\n\n```java\n// 定义可重入锁\nprivate final ReentrantLock lock = new ReentrantLock();\n// 加锁\nlock.lock();\n // 解锁         \nlock.unlock();    \n```\n\n***\n\n## 12 线程协作\n\n### 12.1生产者消费者模式\n\n* 应用场景：生产者和消费者问题\n  - 假设仓库中只能存放一件产品,生产者将生产出来的产品放入仓库,消费者将仓库中产品取走消费.\n  - 如果仓库中没有产品﹐则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止.\n  - 如果仓库中放有产品﹐则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。\n\n![](/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic5.png)\n\n-  **这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖,互为条件．**\n\n  - 对于生产者﹐没有生产产品之前，要通知消费者等待﹒而生产了产品之后﹐又需要马上通知消费者消费\n\n  - 对于消费者﹐在消费之后,要通知生产者已经结束消费﹐需要生产新的产品以供消费.\n\n  - 在生产者消费者问题中,仅有synchronized是不够的\n\n    * synchronized可阻止并发更新同一个共享资源，实现了同步\n\n    * synchronized不能用来实现不同线程之间的消息传递(通信)\n\n* Java提供了几个方法解决线程之间的通信问题\n\n  ![](/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic6.png)\n\n**sleep 会抱着锁睡觉，wait 会释放锁**\n\n**解决办法一**\n\n并发协作模型“生产者l消费者模式”—->管程法\n\n```tex\n生产者:负责生产数据的模块(可能是方法﹐对象﹐线程,进程);\n消费者:负责处理数据的模块(可能是方法﹐对象﹐线程﹐进程);\n缓冲区:消费者不能直接使用生产者的数据﹐他们之间有个“缓冲区”\n```\n\n**生产者将生产好的数据放入缓冲区,消费者从缓冲区拿出数据**\n\n例子：\n\n```java\n//测试：生产者消费者模型-->利用缓冲区解决：管程法\n//生产者，消费者，产品，缓冲区\npublic class TestPC {\n    public static void main(String[] args) {\n        SynContainer container = new SynContainer();\n        new Productor(container).start();\n        new Consumer(container).start();\n    }\n}\n//生产者\nclass Productor extends Thread{\n    SynContainer container;\n    public Productor(SynContainer container){\n        this.container = container;\n    }\n    //生产\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            container.push(new Chicken(i));\n            System.out.println(\"生产了\"+i+\"只鸡\");\n        }\n    }\n}\n//消费者\nclass Consumer extends Thread{\n    SynContainer container;\n    public Consumer(SynContainer container){\n        this.container = container;\n    }\n    //消费\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            System.out.println(\"消费了--->\"+container.pop().id+\"只鸡\");\n        }\n    }\n}\n//产品\nclass Chicken{\n    int id;// 产品编号\n    public Chicken(int id){\n        this.id = id;\n    }\n}\n//缓冲区\nclass SynContainer{\n    //需要一个容器大小\n    Chicken[] chickens = new Chicken[10];\n    //容器计算器\n    int count = 0;\n    //生产者放入产品\n    public synchronized void push(Chicken chicken){\n        //如果容器满了，就需要等待消费产品\n        if(count==chickens.length){\n            //生产者等待\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        //如果没有满，我们就需要丢入产品\n        chickens[count] = chicken;\n        count++;\n        //可以通知消费者消费了\n        this.notifyAll();\n    }\n    //消费者消费产品\n    public synchronized Chicken pop(){\n        //判断能否消费\n        if (count == 0){\n            //等待生产者生产，消费者等待\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        //如果可以消费\n        count--;\n        Chicken chicken = chickens[count];\n        //吃完了，通知生产者生产\n        this.notifyAll();\n        return chicken;\n    }\n}\n```\n\n\n\n**解决办法二**\n\n并发协作模型“生产者/消费者模式”—->信号灯法\n\n```java\n//测试消费者和生产者问题2：信号灯法\npublic class TestPC2 {\n    public static void main(String[] args) {\n        TV tv = new TV();\n        new Player(tv).start();\n        new Watcher(tv).start();\n    }\n}\n//生产者-->演员\nclass Player extends Thread{\n    TV tv;\n    public Player(TV tv){\n        this.tv = tv;\n    }\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            if (i%2==0){\n                this.tv.play(\"快乐大本营播放中\");\n            }else{\n                this.tv.play(\"抖音，记录有钱人的美好生活\");\n            }\n        }\n    }\n}\n//消费者-->观众\nclass Watcher extends Thread{\n    TV tv;\n    public Watcher(TV tv){\n        this.tv = tv;\n    }\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            tv.watch();\n        }\n    }\n}\n//产品-->节目\nclass TV{\n    // 演员表演，观众等待 T\n    // 观众观看，演员等待 F\n    String voice; // 表演的节目\n    boolean flag = true;\n    // 表演\n    public synchronized void play(String voice){\n        if (!flag){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(\"演员表演了：\"+voice);\n        // 通知观众观看\n        this.notifyAll();// 通知唤醒\n        this.voice = voice;\n        this.flag = !this.flag;//flag如果是真就取假，相同是假就取真\n    }\n    // 观看\n    public synchronized void watch(){\n        if (flag){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(\"观众观看了：\"+voice);\n        // 通知演员表演\n        this.notifyAll();\n        this.flag = !this.flag;\n    }\n}\n```\n\n***\n\n## 13 线程池\n\n* 背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。\n* 思路:  提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。\n* 好处:\n  * 提高响应速度（减少了创建新线程的时间）\n  * 降低了资源消耗（重复利用线程池中线程，不需要每次都创建）\n  * 便于线程管理（...）\n    * `corePoolSize`：核心池的大小\n    * `maximumPoolSize`:最大线程数\n    * `keepAliveTime`：线程没有任务时最多保持多长时间后会终止\n\n### 13.1使用线程池\n\n* JDK 5.0起提供了线程池相关API：**ExecutorService** 和**Executors**\n\n* **ExecutorService**：真正的线程池接口。常见子类ThreadPoolExecutor\n\n  * `void execute(Runnable command)`:执行任务/命令，没有返回值，一般哟过来执行Runnable\n  * `<T> Future<T>submit(Callable<T>task)`: 执行任务，有返回值，一般用来执行Callable\n  * `void shutdown() `:关闭连接池\n\n* **Executors**：工具类、线程池的工厂类，用于创建并返回不同类型的线程池\n\n  ```java\n  // 1. 创建线程池, 参数为线程池大小 \n  ExecutorService service = Executors.newFixedThreadPool(10);\n  // 2. 添加线程\n  service.submit(new MyThread()); \n  service.submit(new MyThread());\n  service.submit(new MyThread());\n  service.submit(new MyThread());\n  // 3. 关闭线程池 \n  service.shutdown();\n  ```\n\n  \n\n***\n\n本文完 \n\n本文源自：https://www.bilibili.com/video/BV1V4411p7EF?spm_id_from=333.999.0.0\n\n","source":"_posts/Java多线程.md","raw":"---\ntitle: Java多线程\ndate: 2022-03-16 11:54:35\nauthor: Evan\ncategories: Java基础\nindex_img: /img/bg3.jpg\ntags:\n- Java\n- 多线程\n\n---\n\n# Java多线程\n\n## 1 线程简介\n\n案例:英雄联盟，微信聊天。\n\n多任务：边吃饭比那玩手机，边开车边打电话，但同一瞬间依旧只做了一件事。\n\n多线程：多条路解决阻塞问题。王者荣耀。\n\n### 1.1 普通方法调用和多线程\n\n![image](/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic1.PNG)\n\n* 进程：操作系统中运行的程序\n* 线程：一个进程里面可以有多个线程，视频中，同时有声音，图像等\n\n\n\n### 1.2 Process与Thread\n\n* 说起线程，就不得不说下程序，程序时指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。\n\n* 而**进程**则是执行程序的一次执行过程，它是一个动态的概念。时系统资源分配的单位\n\n* 通常在一个进程中可以包若干个线程，当然一个进程至少有一个线程，不然没有存在的意义。线程时CPU调度和执行的单位。\n\n  注意：很多多线程是模拟出来的，真正的多线程是指多个cpu，即多核，如服务器。\n  如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错局。\n\n* 线程就是独立的执行路径；\n* 在程序运行时，即使没有直接创建线程，后台也会有多个线程，如主线程，gc线程；\n* main()称之为主线程，为系统的入口，用于执行整个程序；\n* 在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的。\n* 对于同一份资源的操作时，会存在资源抢夺的问题，需要加入并发控制；\n* 线程会带来额外的开销，如cpu调度时间，并发控制开销。\n* 每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。\n\n***\n\n## 2 线程创建\n\n### 2.1 继承Thread类\n\n* 自定义线程类继承Thread类\n\n* 重写run()方法，编写线程执行体\n\n* 创建线程对象，调用start()方法启动线程\n\n  ```java\n  public class startThread1  extends Thread{\n  \t\n  \tpublic void run() {\n  \t\tfor(int i=0;i<10;i++) {\n  \t\tSystem.out.println(\"我在上班\");\n  \t\t}\n  \t}\n  \tpublic static void main(String[] args) {\n  \t\tstartThread1 thread=new startThread1();\n  \t\tthread.start();\n  \t\tfor(int i=0;i<10;i++) {\n  \t\t\tSystem.out.println(\"我在摸鱼\");\n  \t\t\t}\n  \t\t\n  \t}\n  }\n  ```\n\n  ### 2.2 实现Runnable接口（最核心)\n\n* 实现MyRunnable类实现Runnable接口\n\n* 实现run()方法，编写线程执行体\n\n* 创建线程对象，调用start()方法启动线程\n\n```java\npublic class startThread2 implements Runnable{\n\n\tpublic static void main(String[] args) {\n\t\tstartThread2 t2=new startThread2();\n\t\tThread thread=new Thread(t2);\n\t\tthread.start();\n\t\tfor(int i=0;i<10;i++) {\n\t\t\tSystem.out.println(\"我在摸鱼\");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void run() {\n\t\tfor(int i=0;i<10;i++) {\n\t\t\tSystem.out.println(\"我在上班\");\n\t\t}\n\t\t\n\t}\n\n}\n```\n\n**推荐使用Runnable对象，因为Java单继承的局限性**\n\n* 继承Thread类\n    * 子类继承Thread类具备多线程能力\n    * 启动线程：子类对象.start()\n    * 不建议使用:避免OOP单继承局限性\n* 实现Runnable接口\n  * 实现接口Runnable具有多线程能力\n  * 启动线程：传入目标对象+Thread对象.start()\n  * 推荐使用：避免单继承局限性，灵活方便，方便同一对象被多个线程使用\n\n案例:龟兔赛跑\n\n```java\n/**  \n * 1.首先来个赛道距离，然后要离终点越来越近\n * 2.判断比赛是否结束\n * 3.打印出胜利者\n * 4.龟兔赛跑开始\n * 5.故事中乌龟赢的，兔子需要睡觉，所以我们来模拟兔子睡觉\n * 6.终于，乌龟赢得比赛\n */\npublic class Race implements Runnable {  \n /**胜利者*/  \n private String winner;  \n @Override  \n public void run() {  \n     for (int i = 0; i <= 1000; i++) {  \n         if (getOver(i)) {  \n             break;  \n         }  \n        //兔子轻敌，睡觉去了 \n         if(Thread.currentThread().getName().equals(\"兔\")&&i==50){  \n             try {  \n                 Thread.sleep(10);  \n                 System.out.println(\"兔子睡着了!\");  \n                 } \n             catch (InterruptedException e) {  \n                 e.printStackTrace();  \n             }  \n         } \n         System.out.println(Thread.currentThread().getName()+\"跑了\"+i+\"步;\");  \n     }  \n }  \n /**判断比赛是否结束*/  \n public boolean getOver(int i){  \n     if(winner!=null){  \n         return true;  \n     }else {  \n         if(i==100){  \n             winner = Thread.currentThread().getName();  \n             System.out.println(winner+\"赢得了比赛!\");  \n             return true;  \n         }  \n     } \n     return false;  \n }  \n public static void main(String[] args) {  \n     Race race = new Race();  \n     new Thread(race,\"兔\").start();  \n     new Thread(race,\"龟\").start();  \n }  \n}\n```\n\n\n\n###  2.3 实现Callable接口\n\n1.实现Callable接口，需要返回值类型\n\n2.重写call方法，需要抛出异常\n\n3.创建目标对象\n\n4.创建执行服务：`ExecutorService ser=Executors.newFixedThreadPool(1);`\n\n5.提交执行：`Future<Boolean> result1=ser.submit(t1);`\n\n6.获取结果：`boolean r1 =result1.get()`\n\n7.关闭服务：`ser.shutdownNow();`\n\n\n\n用 Callable 接口改造下载图片案例\n\n```java\nimport org.apache.commons.io.FileUtils;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.concurrent.*;\n//创建线程3 实现Callable 接口\n/*\ncallable 的好处\n1、可以定义返回值\n2、可以抛出异常\n */\npublic class TestCallable implements Callable<Boolean> {\n    private String url; //网络文件路径\n    private String name;// 需要保存为什么文件名称\n    public  TestCallable(String url,String name){\n        this.url = url;\n        this.name = name;\n    }\n    public Boolean call() {\n        webDownLoader webDownLoader = new webDownLoader();\n        webDownLoader.downLoader(url,name);\n        System.out.println(\"下载了文件 ：\"  + name);\n        return true;\n    }\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        TestCallable thread01 = new TestCallable(\"图片路径\",\"1.jpg\");\n        TestCallable thread02 = new TestCallable(\"图片路径\",\"2.jpg\");\n        TestCallable thread03 = new TestCallable(\"图片路径\",\"3.jpg\");\n        //创建执行服务:  3 条线程\n        ExecutorService ser = Executors.newFixedThreadPool(3);\n        //提交执行:\n        Future<Boolean> result1 = ser.submit(thread01);\n        Future<Boolean> result2 = ser.submit(thread02);\n        Future<Boolean> result3 = ser.submit(thread03);\n        //获取结果: 就是call 方法 返回的值\n        boolean r1 = result1.get();\n        boolean r2= result2.get();\n        boolean r3 = result3.get();\n        //关闭服务\n        ser.shutdownNow();\n    }\n}\n//下载器\nclass webDownLoader{\n    //下载方法\n    public  void downLoader(String url, String name){\n        try {\n            FileUtils.copyURLToFile(new URL(url),new File(name));\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.out.println(\"IO downLoader 方法异常。\");\n        }\n    }\n}\n```\n\n***\n\n## 3 线程状态\n\n![](/img/java多线程/pic2.PNG)\n\n![](/img/java多线程/pic3.PNG)\n\n![](/img/java多线程/pic4.PNG)\n\n### 3.1 停止线程\n\n* 不推荐使用JDK提供的stop()、destroy()方法。【已废弃】\n* 推荐线程之间停止下来\n* 建议使用一个标志位进行终止变量\n\n当flag=false，则终止线程运行。\n\n```java\npublic class TestStop implements Runnable {\n\t//1.线程中定义线程体使用的标识\n\tprivate boolean flag =true;\n\t\n\tpublic void run() {\n\t\t//2.线程体使用该标识\n\t\twhile (flag) {\n\t\t\tSystem.out.println(\"run...Thread\");\n\t\t}\n\t}\n\t//3.对外提供方法改变标识\n\tpublic void stop() {\n\t\tthis.flag=false;\n\t}\n}\n```\n\n***\n\n\n\n## 4 线程休眠\n\n* sleep(时间)指定当前线程阻塞的毫秒数；\n* sleep存在异常InterrupterException；\n* sleep时间达到后线程进入就绪状态；\n* sleep可以模拟网络延时，倒计时等。\n* 每一个对象都有一个锁，sleep不会释放锁；\n\n网络延时的作用：放大问题的发生性\n\n```java\npublic class TestSleep {\n    public static void main(String[] args) {\n        try {\n            tenDown();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void tenDown() throws InterruptedException {\n        int num = 10;\n        while (true){\n            Thread.sleep(1000);\n            System.out.println(num--);\n            if(num<=0){\n                break;\n            }\n        }\n    }\n}\n```\n\n\n\n***\n\n\n\n## 5 线程礼让\n\n* 礼让线程，让当前正在执行的线程暂停，但不阻塞\n* 将线程从运行状态转为就绪状态\n* 让cpu重新调度，礼让不一定成功！看CPU心情\n\n例如：CPU正在运行A线程，此时A调用Thread.yield，变为就绪状态，Cpu重新调度A、B线程，\n\n可能还是接着执行A线程，也有可能礼让成功，执行B线程。\n\n```java\npublic class TestYield {\n    public static void main(String[] args) {\n        MyYield myYield = new MyYield();\n        new Thread(myYield,\"a\").start();\n        new Thread(myYield,\"b\").start();\n    }\n}\nclass MyYield implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+\"线程开始执行\");\n        Thread.yield();\n        System.out.println(Thread.currentThread().getName()+\"线程停止执行\");\n    }\n}\n//a线程开始执行\n//b线程开始执行\n//b线程停止执行\n//a线程停止执行\n```\n\n\n\n***\n\n## 6 线程强制执行\n\n* Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞\n* 可以想象成插队\n\n```java\npublic class TestJoin implements Runnable{\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\tTestJoin testJoin=new TestJoin();\n\t\tThread thread=new Thread(testJoin);\n\t\t\tthread.start();\n\t\t\tfor(int i=0;i<100;i++) {\n\t\t\t\tif(i==50) {\n\t\t\t\t\tthread.join();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"main--\"+i);\n\t\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tfor(int i=0;i<1000;i++) {\n\t\t\tSystem.out.println(\"join---\"+i);\n\t\t}\n\t}\n}\n```\n\n***\n\n\n\n## 7 观测线程状态\n\n`Thread.State`\n\n 线程状态。线程可以处于一下状态之一：\n\n* NEW\n\n  尚未启动的线程处于此状态\n\n* RUNNABLE\n\n  在Java虚拟机中执行的线程处于此状态。\n\n* BLOCKED\n\n  被阻塞等待监视器锁定的线程处于此状态。\n\n* WAITING\n\n   正在等待另一个线程执行特定动作的线程处于此状态。\n\n* TIMED_WAITING\n\n  正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。\n\n* TERMINATED\n\n  已退出的线程处于此状态。\n\n一个线程可以在给定时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。\n\n\n\n```java\npublic class MyThreadState implements Runnable {  \n     @Override  \n     public void run() {  \n         for (int i = 0; i < 10; i++) {  \n             if(i==5 && i<10){  \n                 try {  \n                     Thread.sleep(1);  \n                     System.out.println(\"阻塞时的状态\"+Thread.currentThread().getState());  \n                 } catch (InterruptedException e) {  \n                     e.printStackTrace();  \n                  }  \n             } \n             System.out.println(Thread.currentThread().getName()+i+\"线程正在执行的状态：\"+Thread.currentThread().getState());  \n         }  \n     }\n}\n```\n\n```java\npublic static void main(String[] args) {  \n MyThreadState myThreadState = new MyThreadState();  \n    Thread thread = new Thread(myThreadState);  \n    Thread.State state = thread.getState();  \n    System.out.println(\"线程创建未启动时状态:\"+state);  \n    thread.start();  \n    state = thread.getState();  \n    System.out.println(\"线程启动后的状态:\"+state);  \n    while (thread.getState()!= Thread.State.TERMINATED){  \n        state = thread.getState();  \n        System.out.println(thread.getName()+\"线程运行时状态:\"+state);  \n    }  \n    state = thread.getState();  \n    System.out.println(\"线程结束状态：\"+state);  \n    System.out.println(Thread.currentThread().getName()+\"线程优先级\"+Thread.currentThread().getPriority());  \n}\n```\n\n****\n\n\n\n## 8 线程优先级\n\n* Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。\n* 线程的优先级用数字表示，范围从1~10.\n  * Thread.MIN_PRIORITY = 1 ;\n  * Thread.MAX_PRIORITY = 10 ;\n  * Thread.NORM_PRIORITY = 5 ;\n\n* 使用以下方式改变或获取优先级\n  * getPriority().setPriority(int xxx)\n\n```java\nclass TestPriority extends Thread{  \n     @Override  \n     public void run() {  \n     System.out.println(TestPriority.currentThread().getName()+\"的优先级\"+TestPriority.currentThread().getPriority());  \n     }  \n}\n```\n\n```java\npublic class MyThreadPriority {  \n     public static void main(String[] args) {  \n        TestPriority priority1 = new TestPriority();  \n        TestPriority priority2 = new TestPriority();  \n        TestPriority priority3 = new TestPriority();  \n        TestPriority priority4 = new TestPriority();  \n        TestPriority priority5 = new TestPriority();  \n        System.out.println(Thread.currentThread().getName()+\"线程优先级\"+Thread.currentThread().getPriority());  \n        priority1.setPriority(6);  \n        priority1.start();  \n//        System.out.println(\"priority1\"+priority1.getPriority());  \n        priority2.setPriority(2);  \n        priority2.start();  \n//        System.out.println(\"priority2\"+priority2.getPriority());  \n        priority3.setPriority(3);  \n        priority3.start();  \n//        System.out.println(\"priority3\"+priority3.getPriority());  \n        priority4.setPriority(8);  \n        priority4.start();  \n//        System.out.println(\"priority4\"+priority4.getPriority());  \n        priority5.setPriority(5);  \n        priority5.start();  \n//        System.out.println(\"priority5\"+priority5.getPriority());  \n     }  \n}\n```\n\n\n\n***\n\n## 9 守护线程\n\n* 线程分为用户线程和守护线程\n* 虚拟机必须确保用户线程执行完毕\n* 虚拟机不用的等待守护线程执行完毕\n* 如，后台记录操作日志，监控内存，垃圾回收等\n\n```java\n/**  \n * 上帝，守护线程  \n */  \nclass God implements Runnable{  \n     @Override  \n     public void run() {  \n         long l = 0;\n         while (true){  \n             out.println(\"上帝保佑你！\"+l++);  \n         }  \n     }\n}\n```\n\n```java\n/**  \n * you 用户线程  \n */  \nclass You implements Runnable{  \n     @Override  \n     public void run() {  \n         for (int i = 0; i < 35000; i++) {  \n             out.println(\"每天都在健康的活着\"+i);  \n         }  \n         out.println(\"you goodBye world!\");  \n     }  \n}\n```\n\n```java\n/**\n* 启动用户线程和守护线程\n*/\npublic class MyThreadDaemon {  \n     public static void main(String[] args) {  \n        You you = new You();  \n        God god = new God();  \n        Thread youThread = new Thread(you);  \n        Thread godThread = new Thread(god);  \n        godThread.setDaemon(true);  \n        youThread.start();  \n        godThread.start();  \n     }  \n}\n```\n\n***\n\n## 10 线程同步\n\n多个线程操作同一资源。\n\n### 10.1并发\n\n同个对象 被多个线程 同时操作\n\n* 现实生活中，我们会遇到“同个资源，多个人都想使用”的问题，比如，食堂排队打饭，每个人都想吃饭，最天然的结局方法就是，排队。一个个来。\n* 处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用\n\n**保证线程同步的安全性：队列加锁**\n\n* 由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入**锁机制synchronized**，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：\n  * 一个线程持有锁会导致其他所有需要此锁的线程挂起；\n  * 在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；\n  * 如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题。\n\n### 10.2不安全线程\n\nArrayList是线程不安全的\n\n```java\n\npublic class MyThreadSafe {  \n    public static void main(String[] args) {  \n        ArrayList<String> arrayList = new ArrayList<>();  \n           for (int i = 0; i < 10000; i++) {  \n                new Thread(()-> {  \n                synchronized(arrayList){  \n                arrayList.add(Thread.currentThread().getName());  \n                               }  \n                }).start();  \n           }  \n        try {  \n            Thread.sleep(100);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(arrayList.size());  \n   }  \n}\n\n```\n\n### 10.3 同步方法\n\n* 由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是**synchronized**关键字，它包括两种用法：synchronized方法和synchronized块。\n\n  **同步方法：`public synchronized void method(int args){}`**\n\n* synchronized方法控制对\"对象\"的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才获得这个锁，继续执行\n\n**缺陷：若将一个大的方法声明为synchronized将会影响效率**\n\n* 方法里面需要修改的内容才需要锁，锁太多会浪费资源。\n\n synchronized默认是锁this，同步方法锁不住的时候只能用同步块\n\n* 同步块:synchronized(Obj){}\n\n* Obj称之为同步监视器\n\n  * Obj可以是任何对象，但推荐使用共享资源作为同步监视器\n  * 同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class【反射】\n\n* 同步监视器的执行过程\n\n  1. 第一个线程访问，锁定同步监视器，执行其中代码。\n\n  2. 第二个线程访问，发现同步监视器被锁定，无法访问。\n  3. 第一个线程访问完毕，解锁同步监视器。\n  4. 第二个线程访问，发现同步监视器没有锁，然后锁定并访问\n\n锁要锁对，默认锁this，银行取钱，锁银行没有用，要锁银行卡。\n\n锁要锁增删改的对象，同步块放在run()方法中。\n\n**银行取钱问题**\n\n1.账户类\n\n```java\nclass Account {  \n    /**余额*/  \n    private int money;  \n       /**卡名*/  \n    private String name;  \n    public Account(int money, String name) {\n\t\tthis.money=money;\n\t\tthis.name=name;\n\t}\n\n\tpublic String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getMoney() {\n        return money;\n    }\n\n    public void setMoney(int money) {\n        this.money = money;\n    }\n}\n```\n\n2.模拟银行取钱\n\n```java\n/**  \n * 模拟银行取钱  \n */  \nclass Drawing extends Thread{  \n     private final Account account;  \n     /**现有的钱*/  \n     private  int nowMoney;  \n     /**取出的钱*/  \n     private int drawingMoney;  \n     public Drawing( Account account,  int drawingMoney,String name) {  \n         super(name);  \n         this.account = account;  \n         this.drawingMoney = drawingMoney;  \n        }  \n     @Override  \n     public void run() {  \n         synchronized (account){  \n         //判断有没有钱  \n         if(account.getMoney()-drawingMoney<0){  \n             out.println(\"你的账户没有那么多钱！\");  \n             return;  \n         }try {  \n             sleep(100);  \n         } catch (InterruptedException e) {  \n             e.printStackTrace();  \n         }  \n         //余额  \n         account.setMoney( account.getMoney() - drawingMoney);  \n         //手中的钱  \n         nowMoney=nowMoney+drawingMoney;  \n         out.println(\"余额为：\"+account.getMoney());  \n         out.println(Thread.currentThread().getName()+\"手中的钱：\"+nowMoney);  \n        }  \n     }\n}\n```\n\n多人从银行取钱\n\n```java\npublic class MyThread{  \n public static void main(String[] args) {  \n     Account account = new Account(100, \"工商\");  \n     Drawing me = new Drawing(account, 40, \"me\");  \n     Drawing girlFriend = new Drawing(account, 89, \"girlFriend\");  \n     me.start();  \n     girlFriend.start();  \n    }  \n}\n```\n\n### 10.4 死锁\n\n* 多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有“**两个以上对象的锁**”时，就可能会发生“死锁”的问题。\n* 产生死锁的四个必要条件:\n\n```\n1.互斥条件：一个资源每次只能被一个进程使用。\n2.请求与保持条件:一个进程因请求资源而阻塞时，对已获得的资源保持不放。\n3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。\n4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。\n```\n\n**只要想办法破坏上述任意一个或多个条件就可以避免死锁发生。**\n\n实现一个死锁\n\n```java\n/**  \n * 口红  \n */  \nclass Lipstick{  \n}  \n/**  \n * 镜子  \n */  \nclass Mirroe{  \n}\n/**  \n * 写一个抢夺资源的方法  \n */  \npublic class MyThread{\n\n\t public static void main(String[] args) {  \n\t       Makeup g1=new Makeup(0,\"小红\");\n\t       Makeup g2=new Makeup(1,\"小丽\");\n\t       g1.start();\n\t       g2.start();\n\t   }  \n\t\n}\nclass Makeup extends Thread{  \n    static Lipstick lipstick = new Lipstick();  \n    static Mirroe mirroe = new Mirroe();  \n    int choice;  \n    String girlName;  \n    public Makeup(int choice, String girlName) {  \n        this.choice = choice;  \n        this.girlName = girlName;  \n    }  \n     @Override  \n     public void run() {  \n         try {  \n             makeup();  \n         } catch (InterruptedException e) {  \n             e.printStackTrace();  \n         }  \n     }  \n     public void makeup() throws InterruptedException {  \n         if(choice==0){  \n             synchronized (lipstick){  \n                 System.out.println(this.girlName+\"拿到口红\");  \n                 Thread.sleep(1000);  \n                 synchronized (mirroe){  \n                     System.out.println(this.girlName+\"拿到镜子\");  \n                 }  \n             } \n         }else{  \n             synchronized (mirroe){  \n                 System.out.println(this.girlName+\"拿到镜子\");  \n                 Thread.sleep(2000);  \n                 synchronized (lipstick){  \n                     System.out.println(this.girlName+\"拿到口红\");  \n                 }  \n             } \n         } \n     }\n}\n```\n\n\n\n***\n\n## 11 Lock锁\n\n* 从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当\n* `java.util.concurrent.locks.Lock`接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象\n* ReentrantLock类实现了Lock，它拥有与synchronized相同得并发性和内存语义，在实现线程安全得控制中，比较常用得是ReentrantLock，可以显式加锁、释放锁。\n\n```java\n//实现\nclass A{\n     private final ReentrantLock lock = new ReentrantLock();  \n    public void m(){\n        lock.lock();\n        try{\n            //保证线程安全的代码；\n        }\n        finally{\n            lock.unlock();\n            //如果同步代码有异常，要将unlock()写入finally语句块\n        \t\t}\n    \t}\n    }\n```\n\n多人买票例子：\n\n```java\n/**  \n * 多人买票，用lock的方式实现  \n */  \nclass TestLock implements Runnable{  \n    int ticketNums=100;  \n    private final ReentrantLock lock = new ReentrantLock();  \n     @Override  \n     public void run() {  \n         while (true){ \t\n             try {  \n            \t lock.lock(); \n                 if(ticketNums>0){  \n                     try {  \n                    \t    Thread.sleep(1000);\n                      } catch (InterruptedException e) {  \n                         e.printStackTrace();  \n                      }  \n                 System.out.println(Thread.currentThread().getName()+\"买到了票\"+ticketNums--);  \n                  }else {  \n                     break;  \n                  }  \n              }finally {  \n                  lock.unlock();  \n              \n              }  \n            \n         } \n     }\n}\npublic class MyLock {  \n    public static void main(String[] args) {  \n        TestLock lock = new TestLock(); \n        new Thread(lock,\"彭于晏\").start();  \n        new Thread(lock,\"陈冠希\").start();  \n        new Thread(lock,\"Evan\").start();  \n    }  \n}\n```\n\n### 11.1 Lock和synchronized对比\n\n* Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放\n* Lock只有代码块锁，synchronized有代码块锁和方法锁\n* 使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）\n* 优先使用顺序：\n  * Lock > 同步代码块（已经进入了方法体，分配了相应资源） >同步方法（在方法体之外）\n\n```java\n// 定义可重入锁\nprivate final ReentrantLock lock = new ReentrantLock();\n// 加锁\nlock.lock();\n // 解锁         \nlock.unlock();    \n```\n\n***\n\n## 12 线程协作\n\n### 12.1生产者消费者模式\n\n* 应用场景：生产者和消费者问题\n  - 假设仓库中只能存放一件产品,生产者将生产出来的产品放入仓库,消费者将仓库中产品取走消费.\n  - 如果仓库中没有产品﹐则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止.\n  - 如果仓库中放有产品﹐则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。\n\n![](/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic5.png)\n\n-  **这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖,互为条件．**\n\n  - 对于生产者﹐没有生产产品之前，要通知消费者等待﹒而生产了产品之后﹐又需要马上通知消费者消费\n\n  - 对于消费者﹐在消费之后,要通知生产者已经结束消费﹐需要生产新的产品以供消费.\n\n  - 在生产者消费者问题中,仅有synchronized是不够的\n\n    * synchronized可阻止并发更新同一个共享资源，实现了同步\n\n    * synchronized不能用来实现不同线程之间的消息传递(通信)\n\n* Java提供了几个方法解决线程之间的通信问题\n\n  ![](/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic6.png)\n\n**sleep 会抱着锁睡觉，wait 会释放锁**\n\n**解决办法一**\n\n并发协作模型“生产者l消费者模式”—->管程法\n\n```tex\n生产者:负责生产数据的模块(可能是方法﹐对象﹐线程,进程);\n消费者:负责处理数据的模块(可能是方法﹐对象﹐线程﹐进程);\n缓冲区:消费者不能直接使用生产者的数据﹐他们之间有个“缓冲区”\n```\n\n**生产者将生产好的数据放入缓冲区,消费者从缓冲区拿出数据**\n\n例子：\n\n```java\n//测试：生产者消费者模型-->利用缓冲区解决：管程法\n//生产者，消费者，产品，缓冲区\npublic class TestPC {\n    public static void main(String[] args) {\n        SynContainer container = new SynContainer();\n        new Productor(container).start();\n        new Consumer(container).start();\n    }\n}\n//生产者\nclass Productor extends Thread{\n    SynContainer container;\n    public Productor(SynContainer container){\n        this.container = container;\n    }\n    //生产\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            container.push(new Chicken(i));\n            System.out.println(\"生产了\"+i+\"只鸡\");\n        }\n    }\n}\n//消费者\nclass Consumer extends Thread{\n    SynContainer container;\n    public Consumer(SynContainer container){\n        this.container = container;\n    }\n    //消费\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            System.out.println(\"消费了--->\"+container.pop().id+\"只鸡\");\n        }\n    }\n}\n//产品\nclass Chicken{\n    int id;// 产品编号\n    public Chicken(int id){\n        this.id = id;\n    }\n}\n//缓冲区\nclass SynContainer{\n    //需要一个容器大小\n    Chicken[] chickens = new Chicken[10];\n    //容器计算器\n    int count = 0;\n    //生产者放入产品\n    public synchronized void push(Chicken chicken){\n        //如果容器满了，就需要等待消费产品\n        if(count==chickens.length){\n            //生产者等待\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        //如果没有满，我们就需要丢入产品\n        chickens[count] = chicken;\n        count++;\n        //可以通知消费者消费了\n        this.notifyAll();\n    }\n    //消费者消费产品\n    public synchronized Chicken pop(){\n        //判断能否消费\n        if (count == 0){\n            //等待生产者生产，消费者等待\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        //如果可以消费\n        count--;\n        Chicken chicken = chickens[count];\n        //吃完了，通知生产者生产\n        this.notifyAll();\n        return chicken;\n    }\n}\n```\n\n\n\n**解决办法二**\n\n并发协作模型“生产者/消费者模式”—->信号灯法\n\n```java\n//测试消费者和生产者问题2：信号灯法\npublic class TestPC2 {\n    public static void main(String[] args) {\n        TV tv = new TV();\n        new Player(tv).start();\n        new Watcher(tv).start();\n    }\n}\n//生产者-->演员\nclass Player extends Thread{\n    TV tv;\n    public Player(TV tv){\n        this.tv = tv;\n    }\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            if (i%2==0){\n                this.tv.play(\"快乐大本营播放中\");\n            }else{\n                this.tv.play(\"抖音，记录有钱人的美好生活\");\n            }\n        }\n    }\n}\n//消费者-->观众\nclass Watcher extends Thread{\n    TV tv;\n    public Watcher(TV tv){\n        this.tv = tv;\n    }\n    @Override\n    public void run() {\n        for (int i = 0; i < 20; i++) {\n            tv.watch();\n        }\n    }\n}\n//产品-->节目\nclass TV{\n    // 演员表演，观众等待 T\n    // 观众观看，演员等待 F\n    String voice; // 表演的节目\n    boolean flag = true;\n    // 表演\n    public synchronized void play(String voice){\n        if (!flag){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(\"演员表演了：\"+voice);\n        // 通知观众观看\n        this.notifyAll();// 通知唤醒\n        this.voice = voice;\n        this.flag = !this.flag;//flag如果是真就取假，相同是假就取真\n    }\n    // 观看\n    public synchronized void watch(){\n        if (flag){\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(\"观众观看了：\"+voice);\n        // 通知演员表演\n        this.notifyAll();\n        this.flag = !this.flag;\n    }\n}\n```\n\n***\n\n## 13 线程池\n\n* 背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。\n* 思路:  提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。\n* 好处:\n  * 提高响应速度（减少了创建新线程的时间）\n  * 降低了资源消耗（重复利用线程池中线程，不需要每次都创建）\n  * 便于线程管理（...）\n    * `corePoolSize`：核心池的大小\n    * `maximumPoolSize`:最大线程数\n    * `keepAliveTime`：线程没有任务时最多保持多长时间后会终止\n\n### 13.1使用线程池\n\n* JDK 5.0起提供了线程池相关API：**ExecutorService** 和**Executors**\n\n* **ExecutorService**：真正的线程池接口。常见子类ThreadPoolExecutor\n\n  * `void execute(Runnable command)`:执行任务/命令，没有返回值，一般哟过来执行Runnable\n  * `<T> Future<T>submit(Callable<T>task)`: 执行任务，有返回值，一般用来执行Callable\n  * `void shutdown() `:关闭连接池\n\n* **Executors**：工具类、线程池的工厂类，用于创建并返回不同类型的线程池\n\n  ```java\n  // 1. 创建线程池, 参数为线程池大小 \n  ExecutorService service = Executors.newFixedThreadPool(10);\n  // 2. 添加线程\n  service.submit(new MyThread()); \n  service.submit(new MyThread());\n  service.submit(new MyThread());\n  service.submit(new MyThread());\n  // 3. 关闭线程池 \n  service.shutdown();\n  ```\n\n  \n\n***\n\n本文完 \n\n本文源自：https://www.bilibili.com/video/BV1V4411p7EF?spm_id_from=333.999.0.0\n\n","slug":"Java多线程","published":1,"updated":"2022-06-08T01:12:33.669Z","_id":"cl3kwbmxh000a5cu3bmptcjp0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java多线程\"><a href=\"#Java多线程\" class=\"headerlink\" title=\"Java多线程\"></a>Java多线程</h1><h2 id=\"1-线程简介\"><a href=\"#1-线程简介\" class=\"headerlink\" title=\"1 线程简介\"></a>1 线程简介</h2><p>案例:英雄联盟，微信聊天。</p>\n<p>多任务：边吃饭比那玩手机，边开车边打电话，但同一瞬间依旧只做了一件事。</p>\n<p>多线程：多条路解决阻塞问题。王者荣耀。</p>\n<h3 id=\"1-1-普通方法调用和多线程\"><a href=\"#1-1-普通方法调用和多线程\" class=\"headerlink\" title=\"1.1 普通方法调用和多线程\"></a>1.1 普通方法调用和多线程</h3><p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic1.PNG\" alt=\"image\"></p>\n<ul>\n<li>进程：操作系统中运行的程序</li>\n<li>线程：一个进程里面可以有多个线程，视频中，同时有声音，图像等</li>\n</ul>\n<h3 id=\"1-2-Process与Thread\"><a href=\"#1-2-Process与Thread\" class=\"headerlink\" title=\"1.2 Process与Thread\"></a>1.2 Process与Thread</h3><ul>\n<li><p>说起线程，就不得不说下程序，程序时指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</p>\n</li>\n<li><p>而<strong>进程</strong>则是执行程序的一次执行过程，它是一个动态的概念。时系统资源分配的单位</p>\n</li>\n<li><p>通常在一个进程中可以包若干个线程，当然一个进程至少有一个线程，不然没有存在的意义。线程时CPU调度和执行的单位。</p>\n<p>注意：很多多线程是模拟出来的，真正的多线程是指多个cpu，即多核，如服务器。<br>如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错局。</p>\n</li>\n<li><p>线程就是独立的执行路径；</p>\n</li>\n<li><p>在程序运行时，即使没有直接创建线程，后台也会有多个线程，如主线程，gc线程；</p>\n</li>\n<li><p>main()称之为主线程，为系统的入口，用于执行整个程序；</p>\n</li>\n<li><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的。</p>\n</li>\n<li><p>对于同一份资源的操作时，会存在资源抢夺的问题，需要加入并发控制；</p>\n</li>\n<li><p>线程会带来额外的开销，如cpu调度时间，并发控制开销。</p>\n</li>\n<li><p>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-线程创建\"><a href=\"#2-线程创建\" class=\"headerlink\" title=\"2 线程创建\"></a>2 线程创建</h2><h3 id=\"2-1-继承Thread类\"><a href=\"#2-1-继承Thread类\" class=\"headerlink\" title=\"2.1 继承Thread类\"></a>2.1 继承Thread类</h3><ul>\n<li><p>自定义线程类继承Thread类</p>\n</li>\n<li><p>重写run()方法，编写线程执行体</p>\n</li>\n<li><p>创建线程对象，调用start()方法启动线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">startThread1</span>  <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>\t<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在上班&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tstartThread1 thread=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">startThread1</span>();<br>\t\tthread.start();<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在摸鱼&quot;</span>);<br>\t\t\t&#125;<br>\t\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-实现Runnable接口（最核心\"><a href=\"#2-2-实现Runnable接口（最核心\" class=\"headerlink\" title=\"2.2 实现Runnable接口（最核心)\"></a>2.2 实现Runnable接口（最核心)</h3></li>\n<li><p>实现MyRunnable类实现Runnable接口</p>\n</li>\n<li><p>实现run()方法，编写线程执行体</p>\n</li>\n<li><p>创建线程对象，调用start()方法启动线程</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">startThread2</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tstartThread2 t2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">startThread2</span>();<br>\t\tThread thread=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(t2);<br>\t\tthread.start();<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在摸鱼&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br>\t<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在上班&quot;</span>);<br>\t\t&#125;<br>\t\t<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>推荐使用Runnable对象，因为Java单继承的局限性</strong></p>\n<ul>\n<li>继承Thread类<ul>\n<li>子类继承Thread类具备多线程能力</li>\n<li>启动线程：子类对象.start()</li>\n<li>不建议使用:避免OOP单继承局限性</li>\n</ul>\n</li>\n<li>实现Runnable接口<ul>\n<li>实现接口Runnable具有多线程能力</li>\n<li>启动线程：传入目标对象+Thread对象.start()</li>\n<li>推荐使用：避免单继承局限性，灵活方便，方便同一对象被多个线程使用</li>\n</ul>\n</li>\n</ul>\n<p>案例:龟兔赛跑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 1.首先来个赛道距离，然后要离终点越来越近</span><br><span class=\"hljs-comment\"> * 2.判断比赛是否结束</span><br><span class=\"hljs-comment\"> * 3.打印出胜利者</span><br><span class=\"hljs-comment\"> * 4.龟兔赛跑开始</span><br><span class=\"hljs-comment\"> * 5.故事中乌龟赢的，兔子需要睡觉，所以我们来模拟兔子睡觉</span><br><span class=\"hljs-comment\"> * 6.终于，乌龟赢得比赛</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Race</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;  <br> <span class=\"hljs-comment\">/**胜利者*/</span>  <br> <span class=\"hljs-keyword\">private</span> String winner;  <br> <span class=\"hljs-meta\">@Override</span>  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>     <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">1000</span>; i++) &#123;  <br>         <span class=\"hljs-keyword\">if</span> (getOver(i)) &#123;  <br>             <span class=\"hljs-keyword\">break</span>;  <br>         &#125;  <br>        <span class=\"hljs-comment\">//兔子轻敌，睡觉去了 </span><br>         <span class=\"hljs-keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"hljs-string\">&quot;兔&quot;</span>)&amp;&amp;i==<span class=\"hljs-number\">50</span>)&#123;  <br>             <span class=\"hljs-keyword\">try</span> &#123;  <br>                 Thread.sleep(<span class=\"hljs-number\">10</span>);  <br>                 System.out.println(<span class=\"hljs-string\">&quot;兔子睡着了!&quot;</span>);  <br>                 &#125; <br>             <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                 e.printStackTrace();  <br>             &#125;  <br>         &#125; <br>         System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;跑了&quot;</span>+i+<span class=\"hljs-string\">&quot;步;&quot;</span>);  <br>     &#125;  <br> &#125;  <br> <span class=\"hljs-comment\">/**判断比赛是否结束*/</span>  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">getOver</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span>&#123;  <br>     <span class=\"hljs-keyword\">if</span>(winner!=<span class=\"hljs-literal\">null</span>)&#123;  <br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  <br>     &#125;<span class=\"hljs-keyword\">else</span> &#123;  <br>         <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">100</span>)&#123;  <br>             winner = Thread.currentThread().getName();  <br>             System.out.println(winner+<span class=\"hljs-string\">&quot;赢得了比赛!&quot;</span>);  <br>             <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  <br>         &#125;  <br>     &#125; <br>     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  <br> &#125;  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>     <span class=\"hljs-type\">Race</span> <span class=\"hljs-variable\">race</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Race</span>();  <br>     <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(race,<span class=\"hljs-string\">&quot;兔&quot;</span>).start();  <br>     <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(race,<span class=\"hljs-string\">&quot;龟&quot;</span>).start();  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-实现Callable接口\"><a href=\"#2-3-实现Callable接口\" class=\"headerlink\" title=\"2.3 实现Callable接口\"></a>2.3 实现Callable接口</h3><p>1.实现Callable接口，需要返回值类型</p>\n<p>2.重写call方法，需要抛出异常</p>\n<p>3.创建目标对象</p>\n<p>4.创建执行服务：<code>ExecutorService ser=Executors.newFixedThreadPool(1);</code></p>\n<p>5.提交执行：<code>Future&lt;Boolean&gt; result1=ser.submit(t1);</code></p>\n<p>6.获取结果：<code>boolean r1 =result1.get()</code></p>\n<p>7.关闭服务：<code>ser.shutdownNow();</code></p>\n<p>用 Callable 接口改造下载图片案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.apache.commons.io.FileUtils;<br><span class=\"hljs-keyword\">import</span> java.io.File;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.net.URL;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.*;<br><span class=\"hljs-comment\">//创建线程3 实现Callable 接口</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">callable 的好处</span><br><span class=\"hljs-comment\">1、可以定义返回值</span><br><span class=\"hljs-comment\">2、可以抛出异常</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestCallable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Callable</span>&lt;Boolean&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> String url; <span class=\"hljs-comment\">//网络文件路径</span><br>    <span class=\"hljs-keyword\">private</span> String name;<span class=\"hljs-comment\">// 需要保存为什么文件名称</span><br>    <span class=\"hljs-keyword\">public</span>  <span class=\"hljs-title function_\">TestCallable</span><span class=\"hljs-params\">(String url,String name)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.url = url;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title function_\">call</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">webDownLoader</span> <span class=\"hljs-variable\">webDownLoader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">webDownLoader</span>();<br>        webDownLoader.downLoader(url,name);<br>        System.out.println(<span class=\"hljs-string\">&quot;下载了文件 ：&quot;</span>  + name);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">TestCallable</span> <span class=\"hljs-variable\">thread01</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestCallable</span>(<span class=\"hljs-string\">&quot;图片路径&quot;</span>,<span class=\"hljs-string\">&quot;1.jpg&quot;</span>);<br>        <span class=\"hljs-type\">TestCallable</span> <span class=\"hljs-variable\">thread02</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestCallable</span>(<span class=\"hljs-string\">&quot;图片路径&quot;</span>,<span class=\"hljs-string\">&quot;2.jpg&quot;</span>);<br>        <span class=\"hljs-type\">TestCallable</span> <span class=\"hljs-variable\">thread03</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestCallable</span>(<span class=\"hljs-string\">&quot;图片路径&quot;</span>,<span class=\"hljs-string\">&quot;3.jpg&quot;</span>);<br>        <span class=\"hljs-comment\">//创建执行服务:  3 条线程</span><br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">ser</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">3</span>);<br>        <span class=\"hljs-comment\">//提交执行:</span><br>        Future&lt;Boolean&gt; result1 = ser.submit(thread01);<br>        Future&lt;Boolean&gt; result2 = ser.submit(thread02);<br>        Future&lt;Boolean&gt; result3 = ser.submit(thread03);<br>        <span class=\"hljs-comment\">//获取结果: 就是call 方法 返回的值</span><br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">r1</span> <span class=\"hljs-operator\">=</span> result1.get();<br>        <span class=\"hljs-type\">boolean</span> r2= result2.get();<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">r3</span> <span class=\"hljs-operator\">=</span> result3.get();<br>        <span class=\"hljs-comment\">//关闭服务</span><br>        ser.shutdownNow();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//下载器</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">webDownLoader</span>&#123;<br>    <span class=\"hljs-comment\">//下载方法</span><br>    <span class=\"hljs-keyword\">public</span>  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">downLoader</span><span class=\"hljs-params\">(String url, String name)</span>&#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            FileUtils.copyURLToFile(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URL</span>(url),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(name));<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class=\"hljs-string\">&quot;IO downLoader 方法异常。&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-线程状态\"><a href=\"#3-线程状态\" class=\"headerlink\" title=\"3 线程状态\"></a>3 线程状态</h2><p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic2.PNG\"></p>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic3.PNG\"></p>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic4.PNG\"></p>\n<h3 id=\"3-1-停止线程\"><a href=\"#3-1-停止线程\" class=\"headerlink\" title=\"3.1 停止线程\"></a>3.1 停止线程</h3><ul>\n<li>不推荐使用JDK提供的stop()、destroy()方法。【已废弃】</li>\n<li>推荐线程之间停止下来</li>\n<li>建议使用一个标志位进行终止变量</li>\n</ul>\n<p>当flag=false，则终止线程运行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestStop</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br>\t<span class=\"hljs-comment\">//1.线程中定义线程体使用的标识</span><br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">flag</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-literal\">true</span>;<br>\t<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-comment\">//2.线程体使用该标识</span><br>\t\t<span class=\"hljs-keyword\">while</span> (flag) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;run...Thread&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//3.对外提供方法改变标识</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">stop</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.flag=<span class=\"hljs-literal\">false</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-线程休眠\"><a href=\"#4-线程休眠\" class=\"headerlink\" title=\"4 线程休眠\"></a>4 线程休眠</h2><ul>\n<li>sleep(时间)指定当前线程阻塞的毫秒数；</li>\n<li>sleep存在异常InterrupterException；</li>\n<li>sleep时间达到后线程进入就绪状态；</li>\n<li>sleep可以模拟网络延时，倒计时等。</li>\n<li>每一个对象都有一个锁，sleep不会释放锁；</li>\n</ul>\n<p>网络延时的作用：放大问题的发生性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestSleep</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            tenDown();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">tenDown</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123;<br>            Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            System.out.println(num--);<br>            <span class=\"hljs-keyword\">if</span>(num&lt;=<span class=\"hljs-number\">0</span>)&#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"5-线程礼让\"><a href=\"#5-线程礼让\" class=\"headerlink\" title=\"5 线程礼让\"></a>5 线程礼让</h2><ul>\n<li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li>\n<li>将线程从运行状态转为就绪状态</li>\n<li>让cpu重新调度，礼让不一定成功！看CPU心情</li>\n</ul>\n<p>例如：CPU正在运行A线程，此时A调用Thread.yield，变为就绪状态，Cpu重新调度A、B线程，</p>\n<p>可能还是接着执行A线程，也有可能礼让成功，执行B线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestYield</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">MyYield</span> <span class=\"hljs-variable\">myYield</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyYield</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myYield,<span class=\"hljs-string\">&quot;a&quot;</span>).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myYield,<span class=\"hljs-string\">&quot;b&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyYield</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程开始执行&quot;</span>);<br>        Thread.yield();<br>        System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程停止执行&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//a线程开始执行</span><br><span class=\"hljs-comment\">//b线程开始执行</span><br><span class=\"hljs-comment\">//b线程停止执行</span><br><span class=\"hljs-comment\">//a线程停止执行</span><br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"6-线程强制执行\"><a href=\"#6-线程强制执行\" class=\"headerlink\" title=\"6 线程强制执行\"></a>6 线程强制执行</h2><ul>\n<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestJoin</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>\t\tTestJoin testJoin=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestJoin</span>();<br>\t\tThread thread=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(testJoin);<br>\t\t\tthread.start();<br>\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">100</span>;i++) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">50</span>) &#123;<br>\t\t\t\t\tthread.join();<br>\t\t\t\t&#125;<br>\t\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;main--&quot;</span>+i);<br>\t\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">1000</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;join---&quot;</span>+i);<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"7-观测线程状态\"><a href=\"#7-观测线程状态\" class=\"headerlink\" title=\"7 观测线程状态\"></a>7 观测线程状态</h2><p><code>Thread.State</code></p>\n<p> 线程状态。线程可以处于一下状态之一：</p>\n<ul>\n<li><p>NEW</p>\n<p>尚未启动的线程处于此状态</p>\n</li>\n<li><p>RUNNABLE</p>\n<p>在Java虚拟机中执行的线程处于此状态。</p>\n</li>\n<li><p>BLOCKED</p>\n<p>被阻塞等待监视器锁定的线程处于此状态。</p>\n</li>\n<li><p>WAITING</p>\n<p> 正在等待另一个线程执行特定动作的线程处于此状态。</p>\n</li>\n<li><p>TIMED_WAITING</p>\n<p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。</p>\n</li>\n<li><p>TERMINATED</p>\n<p>已退出的线程处于此状态。</p>\n</li>\n</ul>\n<p>一个线程可以在给定时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadState</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;  <br>             <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">5</span> &amp;&amp; i&lt;<span class=\"hljs-number\">10</span>)&#123;  <br>                 <span class=\"hljs-keyword\">try</span> &#123;  <br>                     Thread.sleep(<span class=\"hljs-number\">1</span>);  <br>                     System.out.println(<span class=\"hljs-string\">&quot;阻塞时的状态&quot;</span>+Thread.currentThread().getState());  <br>                 &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                     e.printStackTrace();  <br>                  &#125;  <br>             &#125; <br>             System.out.println(Thread.currentThread().getName()+i+<span class=\"hljs-string\">&quot;线程正在执行的状态：&quot;</span>+Thread.currentThread().getState());  <br>         &#125;  <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br> <span class=\"hljs-type\">MyThreadState</span> <span class=\"hljs-variable\">myThreadState</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThreadState</span>();  <br>    <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myThreadState);  <br>    Thread.<span class=\"hljs-type\">State</span> <span class=\"hljs-variable\">state</span> <span class=\"hljs-operator\">=</span> thread.getState();  <br>    System.out.println(<span class=\"hljs-string\">&quot;线程创建未启动时状态:&quot;</span>+state);  <br>    thread.start();  <br>    state = thread.getState();  <br>    System.out.println(<span class=\"hljs-string\">&quot;线程启动后的状态:&quot;</span>+state);  <br>    <span class=\"hljs-keyword\">while</span> (thread.getState()!= Thread.State.TERMINATED)&#123;  <br>        state = thread.getState();  <br>        System.out.println(thread.getName()+<span class=\"hljs-string\">&quot;线程运行时状态:&quot;</span>+state);  <br>    &#125;  <br>    state = thread.getState();  <br>    System.out.println(<span class=\"hljs-string\">&quot;线程结束状态：&quot;</span>+state);  <br>    System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程优先级&quot;</span>+Thread.currentThread().getPriority());  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"8-线程优先级\"><a href=\"#8-线程优先级\" class=\"headerlink\" title=\"8 线程优先级\"></a>8 线程优先级</h2><ul>\n<li><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</p>\n</li>\n<li><p>线程的优先级用数字表示，范围从1~10.</p>\n<ul>\n<li>Thread.MIN_PRIORITY = 1 ;</li>\n<li>Thread.MAX_PRIORITY = 10 ;</li>\n<li>Thread.NORM_PRIORITY = 5 ;</li>\n</ul>\n</li>\n<li><p>使用以下方式改变或获取优先级</p>\n<ul>\n<li>getPriority().setPriority(int xxx)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestPriority</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>     System.out.println(TestPriority.currentThread().getName()+<span class=\"hljs-string\">&quot;的优先级&quot;</span>+TestPriority.currentThread().getPriority());  <br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadPriority</span> &#123;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程优先级&quot;</span>+Thread.currentThread().getPriority());  <br>        priority1.setPriority(<span class=\"hljs-number\">6</span>);  <br>        priority1.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority1&quot;+priority1.getPriority());  </span><br>        priority2.setPriority(<span class=\"hljs-number\">2</span>);  <br>        priority2.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority2&quot;+priority2.getPriority());  </span><br>        priority3.setPriority(<span class=\"hljs-number\">3</span>);  <br>        priority3.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority3&quot;+priority3.getPriority());  </span><br>        priority4.setPriority(<span class=\"hljs-number\">8</span>);  <br>        priority4.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority4&quot;+priority4.getPriority());  </span><br>        priority5.setPriority(<span class=\"hljs-number\">5</span>);  <br>        priority5.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority5&quot;+priority5.getPriority());  </span><br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"9-守护线程\"><a href=\"#9-守护线程\" class=\"headerlink\" title=\"9 守护线程\"></a>9 守护线程</h2><ul>\n<li>线程分为用户线程和守护线程</li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用的等待守护线程执行完毕</li>\n<li>如，后台记录操作日志，监控内存，垃圾回收等</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 上帝，守护线程  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">God</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>         <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123;  <br>             out.println(<span class=\"hljs-string\">&quot;上帝保佑你！&quot;</span>+l++);  <br>         &#125;  <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * you 用户线程  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">You</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">35000</span>; i++) &#123;  <br>             out.println(<span class=\"hljs-string\">&quot;每天都在健康的活着&quot;</span>+i);  <br>         &#125;  <br>         out.println(<span class=\"hljs-string\">&quot;you goodBye world!&quot;</span>);  <br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 启动用户线程和守护线程</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadDaemon</span> &#123;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        <span class=\"hljs-type\">You</span> <span class=\"hljs-variable\">you</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">You</span>();  <br>        <span class=\"hljs-type\">God</span> <span class=\"hljs-variable\">god</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">God</span>();  <br>        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">youThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(you);  <br>        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">godThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(god);  <br>        godThread.setDaemon(<span class=\"hljs-literal\">true</span>);  <br>        youThread.start();  <br>        godThread.start();  <br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"10-线程同步\"><a href=\"#10-线程同步\" class=\"headerlink\" title=\"10 线程同步\"></a>10 线程同步</h2><p>多个线程操作同一资源。</p>\n<h3 id=\"10-1并发\"><a href=\"#10-1并发\" class=\"headerlink\" title=\"10.1并发\"></a>10.1并发</h3><p>同个对象 被多个线程 同时操作</p>\n<ul>\n<li>现实生活中，我们会遇到“同个资源，多个人都想使用”的问题，比如，食堂排队打饭，每个人都想吃饭，最天然的结局方法就是，排队。一个个来。</li>\n<li>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用</li>\n</ul>\n<p><strong>保证线程同步的安全性：队列加锁</strong></p>\n<ul>\n<li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>\n<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-2不安全线程\"><a href=\"#10-2不安全线程\" class=\"headerlink\" title=\"10.2不安全线程\"></a>10.2不安全线程</h3><p>ArrayList是线程不安全的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadSafe</span> &#123;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        ArrayList&lt;String&gt; arrayList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();  <br>           <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000</span>; i++) &#123;  <br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(()-&gt; &#123;  <br>                <span class=\"hljs-keyword\">synchronized</span>(arrayList)&#123;  <br>                arrayList.add(Thread.currentThread().getName());  <br>                               &#125;  <br>                &#125;).start();  <br>           &#125;  <br>        <span class=\"hljs-keyword\">try</span> &#123;  <br>            Thread.sleep(<span class=\"hljs-number\">100</span>);  <br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>        System.out.println(arrayList.size());  <br>   &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"10-3-同步方法\"><a href=\"#10-3-同步方法\" class=\"headerlink\" title=\"10.3 同步方法\"></a>10.3 同步方法</h3><ul>\n<li><p>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是<strong>synchronized</strong>关键字，它包括两种用法：synchronized方法和synchronized块。</p>\n<p><strong>同步方法：<code>public synchronized void method(int args)&#123;&#125;</code></strong></p>\n</li>\n<li><p>synchronized方法控制对”对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才获得这个锁，继续执行</p>\n</li>\n</ul>\n<p><strong>缺陷：若将一个大的方法声明为synchronized将会影响效率</strong></p>\n<ul>\n<li>方法里面需要修改的内容才需要锁，锁太多会浪费资源。</li>\n</ul>\n<p> synchronized默认是锁this，同步方法锁不住的时候只能用同步块</p>\n<ul>\n<li><p>同步块:synchronized(Obj){}</p>\n</li>\n<li><p>Obj称之为同步监视器</p>\n<ul>\n<li>Obj可以是任何对象，但推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class【反射】</li>\n</ul>\n</li>\n<li><p>同步监视器的执行过程</p>\n<ol>\n<li><p>第一个线程访问，锁定同步监视器，执行其中代码。</p>\n</li>\n<li><p>第二个线程访问，发现同步监视器被锁定，无法访问。</p>\n</li>\n<li><p>第一个线程访问完毕，解锁同步监视器。</p>\n</li>\n<li><p>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</p>\n</li>\n</ol>\n</li>\n</ul>\n<p>锁要锁对，默认锁this，银行取钱，锁银行没有用，要锁银行卡。</p>\n<p>锁要锁增删改的对象，同步块放在run()方法中。</p>\n<p><strong>银行取钱问题</strong></p>\n<p>1.账户类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;  <br>    <span class=\"hljs-comment\">/**余额*/</span>  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> money;  <br>       <span class=\"hljs-comment\">/**卡名*/</span>  <br>    <span class=\"hljs-keyword\">private</span> String name;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Account</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> money, String name)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.money=money;<br>\t\t<span class=\"hljs-built_in\">this</span>.name=name;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMoney</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> money;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setMoney</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> money)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.money = money;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.模拟银行取钱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 模拟银行取钱  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Drawing</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;  <br>     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Account account;  <br>     <span class=\"hljs-comment\">/**现有的钱*/</span>  <br>     <span class=\"hljs-keyword\">private</span>  <span class=\"hljs-type\">int</span> nowMoney;  <br>     <span class=\"hljs-comment\">/**取出的钱*/</span>  <br>     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> drawingMoney;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Drawing</span><span class=\"hljs-params\">( Account account,  <span class=\"hljs-type\">int</span> drawingMoney,String name)</span> &#123;  <br>         <span class=\"hljs-built_in\">super</span>(name);  <br>         <span class=\"hljs-built_in\">this</span>.account = account;  <br>         <span class=\"hljs-built_in\">this</span>.drawingMoney = drawingMoney;  <br>        &#125;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">synchronized</span> (account)&#123;  <br>         <span class=\"hljs-comment\">//判断有没有钱  </span><br>         <span class=\"hljs-keyword\">if</span>(account.getMoney()-drawingMoney&lt;<span class=\"hljs-number\">0</span>)&#123;  <br>             out.println(<span class=\"hljs-string\">&quot;你的账户没有那么多钱！&quot;</span>);  <br>             <span class=\"hljs-keyword\">return</span>;  <br>         &#125;<span class=\"hljs-keyword\">try</span> &#123;  <br>             sleep(<span class=\"hljs-number\">100</span>);  <br>         &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>             e.printStackTrace();  <br>         &#125;  <br>         <span class=\"hljs-comment\">//余额  </span><br>         account.setMoney( account.getMoney() - drawingMoney);  <br>         <span class=\"hljs-comment\">//手中的钱  </span><br>         nowMoney=nowMoney+drawingMoney;  <br>         out.println(<span class=\"hljs-string\">&quot;余额为：&quot;</span>+account.getMoney());  <br>         out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;手中的钱：&quot;</span>+nowMoney);  <br>        &#125;  <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>多人从银行取钱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span>&#123;  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>     <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">&quot;工商&quot;</span>);  <br>     <span class=\"hljs-type\">Drawing</span> <span class=\"hljs-variable\">me</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Drawing</span>(account, <span class=\"hljs-number\">40</span>, <span class=\"hljs-string\">&quot;me&quot;</span>);  <br>     <span class=\"hljs-type\">Drawing</span> <span class=\"hljs-variable\">girlFriend</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Drawing</span>(account, <span class=\"hljs-number\">89</span>, <span class=\"hljs-string\">&quot;girlFriend&quot;</span>);  <br>     me.start();  <br>     girlFriend.start();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"10-4-死锁\"><a href=\"#10-4-死锁\" class=\"headerlink\" title=\"10.4 死锁\"></a>10.4 死锁</h3><ul>\n<li>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有“<strong>两个以上对象的锁</strong>”时，就可能会发生“死锁”的问题。</li>\n<li>产生死锁的四个必要条件:</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">1.互斥条件：一个资源每次只能被一个进程使用。<br><span class=\"hljs-section\">2.请求与保持条件:一个进程因请求资源而阻塞时，对已获得的资源保持不放。</span><br>3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。<br>4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。<br></code></pre></td></tr></table></figure>\n\n<p><strong>只要想办法破坏上述任意一个或多个条件就可以避免死锁发生。</strong></p>\n<p>实现一个死锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 口红  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Lipstick</span>&#123;  <br>&#125;  <br><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 镜子  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mirroe</span>&#123;  <br>&#125;<br><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 写一个抢夺资源的方法  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span>&#123;<br><br>\t <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>\t       Makeup g1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Makeup</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;小红&quot;</span>);<br>\t       Makeup g2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Makeup</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;小丽&quot;</span>);<br>\t       g1.start();<br>\t       g2.start();<br>\t   &#125;  <br>\t<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Makeup</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;  <br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Lipstick</span> <span class=\"hljs-variable\">lipstick</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Lipstick</span>();  <br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Mirroe</span> <span class=\"hljs-variable\">mirroe</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Mirroe</span>();  <br>    <span class=\"hljs-type\">int</span> choice;  <br>    String girlName;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Makeup</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> choice, String girlName)</span> &#123;  <br>        <span class=\"hljs-built_in\">this</span>.choice = choice;  <br>        <span class=\"hljs-built_in\">this</span>.girlName = girlName;  <br>    &#125;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">try</span> &#123;  <br>             makeup();  <br>         &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>             e.printStackTrace();  <br>         &#125;  <br>     &#125;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">makeup</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;  <br>         <span class=\"hljs-keyword\">if</span>(choice==<span class=\"hljs-number\">0</span>)&#123;  <br>             <span class=\"hljs-keyword\">synchronized</span> (lipstick)&#123;  <br>                 System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到口红&quot;</span>);  <br>                 Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>                 <span class=\"hljs-keyword\">synchronized</span> (mirroe)&#123;  <br>                     System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到镜子&quot;</span>);  <br>                 &#125;  <br>             &#125; <br>         &#125;<span class=\"hljs-keyword\">else</span>&#123;  <br>             <span class=\"hljs-keyword\">synchronized</span> (mirroe)&#123;  <br>                 System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到镜子&quot;</span>);  <br>                 Thread.sleep(<span class=\"hljs-number\">2000</span>);  <br>                 <span class=\"hljs-keyword\">synchronized</span> (lipstick)&#123;  <br>                     System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到口红&quot;</span>);  <br>                 &#125;  <br>             &#125; <br>         &#125; <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"11-Lock锁\"><a href=\"#11-Lock锁\" class=\"headerlink\" title=\"11 Lock锁\"></a>11 Lock锁</h2><ul>\n<li>从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当</li>\n<li><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</li>\n<li>ReentrantLock类实现了Lock，它拥有与synchronized相同得并发性和内存语义，在实现线程安全得控制中，比较常用得是ReentrantLock，可以显式加锁、释放锁。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//实现</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>&#123;<br>     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ReentrantLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReentrantLock</span>();  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">m</span><span class=\"hljs-params\">()</span>&#123;<br>        lock.lock();<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-comment\">//保证线程安全的代码；</span><br>        &#125;<br>        <span class=\"hljs-keyword\">finally</span>&#123;<br>            lock.unlock();<br>            <span class=\"hljs-comment\">//如果同步代码有异常，要将unlock()写入finally语句块</span><br>        \t\t&#125;<br>    \t&#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>多人买票例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 多人买票，用lock的方式实现  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestLock</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;  <br>    <span class=\"hljs-type\">int</span> ticketNums=<span class=\"hljs-number\">100</span>;  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ReentrantLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReentrantLock</span>();  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123; \t<br>             <span class=\"hljs-keyword\">try</span> &#123;  <br>            \t lock.lock(); <br>                 <span class=\"hljs-keyword\">if</span>(ticketNums&gt;<span class=\"hljs-number\">0</span>)&#123;  <br>                     <span class=\"hljs-keyword\">try</span> &#123;  <br>                    \t    Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>                      &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                         e.printStackTrace();  <br>                      &#125;  <br>                 System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;买到了票&quot;</span>+ticketNums--);  <br>                  &#125;<span class=\"hljs-keyword\">else</span> &#123;  <br>                     <span class=\"hljs-keyword\">break</span>;  <br>                  &#125;  <br>              &#125;<span class=\"hljs-keyword\">finally</span> &#123;  <br>                  lock.unlock();  <br>              <br>              &#125;  <br>            <br>         &#125; <br>     &#125;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyLock</span> &#123;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        <span class=\"hljs-type\">TestLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestLock</span>(); <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(lock,<span class=\"hljs-string\">&quot;彭于晏&quot;</span>).start();  <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(lock,<span class=\"hljs-string\">&quot;陈冠希&quot;</span>).start();  <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(lock,<span class=\"hljs-string\">&quot;Evan&quot;</span>).start();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"11-1-Lock和synchronized对比\"><a href=\"#11-1-Lock和synchronized对比\" class=\"headerlink\" title=\"11.1 Lock和synchronized对比\"></a>11.1 Lock和synchronized对比</h3><ul>\n<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放</li>\n<li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li>\n<li>优先使用顺序：<ul>\n<li>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源） &gt;同步方法（在方法体之外）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 定义可重入锁</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ReentrantLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReentrantLock</span>();<br><span class=\"hljs-comment\">// 加锁</span><br>lock.lock();<br> <span class=\"hljs-comment\">// 解锁         </span><br>lock.unlock();    <br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"12-线程协作\"><a href=\"#12-线程协作\" class=\"headerlink\" title=\"12 线程协作\"></a>12 线程协作</h2><h3 id=\"12-1生产者消费者模式\"><a href=\"#12-1生产者消费者模式\" class=\"headerlink\" title=\"12.1生产者消费者模式\"></a>12.1生产者消费者模式</h3><ul>\n<li>应用场景：生产者和消费者问题<ul>\n<li>假设仓库中只能存放一件产品,生产者将生产出来的产品放入仓库,消费者将仓库中产品取走消费.</li>\n<li>如果仓库中没有产品﹐则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止.</li>\n<li>如果仓库中放有产品﹐则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic5.png\"></p>\n<ul>\n<li><p> <strong>这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖,互为条件．</strong></p>\n</li>\n<li><p>对于生产者﹐没有生产产品之前，要通知消费者等待﹒而生产了产品之后﹐又需要马上通知消费者消费</p>\n</li>\n<li><p>对于消费者﹐在消费之后,要通知生产者已经结束消费﹐需要生产新的产品以供消费.</p>\n</li>\n<li><p>在生产者消费者问题中,仅有synchronized是不够的</p>\n<ul>\n<li><p>synchronized可阻止并发更新同一个共享资源，实现了同步</p>\n</li>\n<li><p>synchronized不能用来实现不同线程之间的消息传递(通信)</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Java提供了几个方法解决线程之间的通信问题</p>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic6.png\"></p>\n</li>\n</ul>\n<p><strong>sleep 会抱着锁睡觉，wait 会释放锁</strong></p>\n<p><strong>解决办法一</strong></p>\n<p>并发协作模型“生产者l消费者模式”—-&gt;管程法</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">生产者:负责生产数据的模块(可能是方法﹐对象﹐线程,进程);<br>消费者:负责处理数据的模块(可能是方法﹐对象﹐线程﹐进程);<br>缓冲区:消费者不能直接使用生产者的数据﹐他们之间有个“缓冲区”<br></code></pre></td></tr></table></figure>\n\n<p><strong>生产者将生产好的数据放入缓冲区,消费者从缓冲区拿出数据</strong></p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法</span><br><span class=\"hljs-comment\">//生产者，消费者，产品，缓冲区</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestPC</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">SynContainer</span> <span class=\"hljs-variable\">container</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SynContainer</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Productor</span>(container).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Consumer</span>(container).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//生产者</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Productor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    SynContainer container;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Productor</span><span class=\"hljs-params\">(SynContainer container)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.container = container;<br>    &#125;<br>    <span class=\"hljs-comment\">//生产</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>            container.push(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chicken</span>(i));<br>            System.out.println(<span class=\"hljs-string\">&quot;生产了&quot;</span>+i+<span class=\"hljs-string\">&quot;只鸡&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//消费者</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Consumer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    SynContainer container;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Consumer</span><span class=\"hljs-params\">(SynContainer container)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.container = container;<br>    &#125;<br>    <span class=\"hljs-comment\">//消费</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;消费了---&gt;&quot;</span>+container.pop().id+<span class=\"hljs-string\">&quot;只鸡&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//产品</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Chicken</span>&#123;<br>    <span class=\"hljs-type\">int</span> id;<span class=\"hljs-comment\">// 产品编号</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Chicken</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.id = id;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//缓冲区</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SynContainer</span>&#123;<br>    <span class=\"hljs-comment\">//需要一个容器大小</span><br>    Chicken[] chickens = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chicken</span>[<span class=\"hljs-number\">10</span>];<br>    <span class=\"hljs-comment\">//容器计算器</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//生产者放入产品</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(Chicken chicken)</span>&#123;<br>        <span class=\"hljs-comment\">//如果容器满了，就需要等待消费产品</span><br>        <span class=\"hljs-keyword\">if</span>(count==chickens.length)&#123;<br>            <span class=\"hljs-comment\">//生产者等待</span><br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//如果没有满，我们就需要丢入产品</span><br>        chickens[count] = chicken;<br>        count++;<br>        <span class=\"hljs-comment\">//可以通知消费者消费了</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<br>    &#125;<br>    <span class=\"hljs-comment\">//消费者消费产品</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> Chicken <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-comment\">//判断能否消费</span><br>        <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-comment\">//等待生产者生产，消费者等待</span><br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//如果可以消费</span><br>        count--;<br>        <span class=\"hljs-type\">Chicken</span> <span class=\"hljs-variable\">chicken</span> <span class=\"hljs-operator\">=</span> chickens[count];<br>        <span class=\"hljs-comment\">//吃完了，通知生产者生产</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<br>        <span class=\"hljs-keyword\">return</span> chicken;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>解决办法二</strong></p>\n<p>并发协作模型“生产者/消费者模式”—-&gt;信号灯法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试消费者和生产者问题2：信号灯法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestPC2</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">TV</span> <span class=\"hljs-variable\">tv</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TV</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Player</span>(tv).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(tv).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//生产者--&gt;演员</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Player</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    TV tv;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Player</span><span class=\"hljs-params\">(TV tv)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.tv = tv;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>)&#123;<br>                <span class=\"hljs-built_in\">this</span>.tv.play(<span class=\"hljs-string\">&quot;快乐大本营播放中&quot;</span>);<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-built_in\">this</span>.tv.play(<span class=\"hljs-string\">&quot;抖音，记录有钱人的美好生活&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//消费者--&gt;观众</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    TV tv;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Watcher</span><span class=\"hljs-params\">(TV tv)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.tv = tv;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) &#123;<br>            tv.watch();<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//产品--&gt;节目</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TV</span>&#123;<br>    <span class=\"hljs-comment\">// 演员表演，观众等待 T</span><br>    <span class=\"hljs-comment\">// 观众观看，演员等待 F</span><br>    String voice; <span class=\"hljs-comment\">// 表演的节目</span><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">flag</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-comment\">// 表演</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">play</span><span class=\"hljs-params\">(String voice)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (!flag)&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;演员表演了：&quot;</span>+voice);<br>        <span class=\"hljs-comment\">// 通知观众观看</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<span class=\"hljs-comment\">// 通知唤醒</span><br>        <span class=\"hljs-built_in\">this</span>.voice = voice;<br>        <span class=\"hljs-built_in\">this</span>.flag = !<span class=\"hljs-built_in\">this</span>.flag;<span class=\"hljs-comment\">//flag如果是真就取假，相同是假就取真</span><br>    &#125;<br>    <span class=\"hljs-comment\">// 观看</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">watch</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (flag)&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;观众观看了：&quot;</span>+voice);<br>        <span class=\"hljs-comment\">// 通知演员表演</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<br>        <span class=\"hljs-built_in\">this</span>.flag = !<span class=\"hljs-built_in\">this</span>.flag;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"13-线程池\"><a href=\"#13-线程池\" class=\"headerlink\" title=\"13 线程池\"></a>13 线程池</h2><ul>\n<li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</li>\n<li>思路:  提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li>\n<li>好处:<ul>\n<li>提高响应速度（减少了创建新线程的时间）</li>\n<li>降低了资源消耗（重复利用线程池中线程，不需要每次都创建）</li>\n<li>便于线程管理（…）<ul>\n<li><code>corePoolSize</code>：核心池的大小</li>\n<li><code>maximumPoolSize</code>:最大线程数</li>\n<li><code>keepAliveTime</code>：线程没有任务时最多保持多长时间后会终止</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-1使用线程池\"><a href=\"#13-1使用线程池\" class=\"headerlink\" title=\"13.1使用线程池\"></a>13.1使用线程池</h3><ul>\n<li><p>JDK 5.0起提供了线程池相关API：<strong>ExecutorService</strong> 和<strong>Executors</strong></p>\n</li>\n<li><p><strong>ExecutorService</strong>：真正的线程池接口。常见子类ThreadPoolExecutor</p>\n<ul>\n<li><code>void execute(Runnable command)</code>:执行任务/命令，没有返回值，一般哟过来执行Runnable</li>\n<li><code>&lt;T&gt; Future&lt;T&gt;submit(Callable&lt;T&gt;task)</code>: 执行任务，有返回值，一般用来执行Callable</li>\n<li><code>void shutdown() </code>:关闭连接池</li>\n</ul>\n</li>\n<li><p><strong>Executors</strong>：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 1. 创建线程池, 参数为线程池大小 </span><br><span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-comment\">// 2. 添加线程</span><br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>()); <br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>());<br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>());<br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>());<br><span class=\"hljs-comment\">// 3. 关闭线程池 </span><br>service.shutdown();<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>本文完 </p>\n<p>本文源自：<a href=\"https://www.bilibili.com/video/BV1V4411p7EF?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1V4411p7EF?spm_id_from=333.999.0.0</a></p>\n","site":{"data":{}},"wordcount":20749,"excerpt":"","more":"<h1 id=\"Java多线程\"><a href=\"#Java多线程\" class=\"headerlink\" title=\"Java多线程\"></a>Java多线程</h1><h2 id=\"1-线程简介\"><a href=\"#1-线程简介\" class=\"headerlink\" title=\"1 线程简介\"></a>1 线程简介</h2><p>案例:英雄联盟，微信聊天。</p>\n<p>多任务：边吃饭比那玩手机，边开车边打电话，但同一瞬间依旧只做了一件事。</p>\n<p>多线程：多条路解决阻塞问题。王者荣耀。</p>\n<h3 id=\"1-1-普通方法调用和多线程\"><a href=\"#1-1-普通方法调用和多线程\" class=\"headerlink\" title=\"1.1 普通方法调用和多线程\"></a>1.1 普通方法调用和多线程</h3><p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic1.PNG\" alt=\"image\"></p>\n<ul>\n<li>进程：操作系统中运行的程序</li>\n<li>线程：一个进程里面可以有多个线程，视频中，同时有声音，图像等</li>\n</ul>\n<h3 id=\"1-2-Process与Thread\"><a href=\"#1-2-Process与Thread\" class=\"headerlink\" title=\"1.2 Process与Thread\"></a>1.2 Process与Thread</h3><ul>\n<li><p>说起线程，就不得不说下程序，程序时指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</p>\n</li>\n<li><p>而<strong>进程</strong>则是执行程序的一次执行过程，它是一个动态的概念。时系统资源分配的单位</p>\n</li>\n<li><p>通常在一个进程中可以包若干个线程，当然一个进程至少有一个线程，不然没有存在的意义。线程时CPU调度和执行的单位。</p>\n<p>注意：很多多线程是模拟出来的，真正的多线程是指多个cpu，即多核，如服务器。<br>如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错局。</p>\n</li>\n<li><p>线程就是独立的执行路径；</p>\n</li>\n<li><p>在程序运行时，即使没有直接创建线程，后台也会有多个线程，如主线程，gc线程；</p>\n</li>\n<li><p>main()称之为主线程，为系统的入口，用于执行整个程序；</p>\n</li>\n<li><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为的干预的。</p>\n</li>\n<li><p>对于同一份资源的操作时，会存在资源抢夺的问题，需要加入并发控制；</p>\n</li>\n<li><p>线程会带来额外的开销，如cpu调度时间，并发控制开销。</p>\n</li>\n<li><p>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-线程创建\"><a href=\"#2-线程创建\" class=\"headerlink\" title=\"2 线程创建\"></a>2 线程创建</h2><h3 id=\"2-1-继承Thread类\"><a href=\"#2-1-继承Thread类\" class=\"headerlink\" title=\"2.1 继承Thread类\"></a>2.1 继承Thread类</h3><ul>\n<li><p>自定义线程类继承Thread类</p>\n</li>\n<li><p>重写run()方法，编写线程执行体</p>\n</li>\n<li><p>创建线程对象，调用start()方法启动线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">startThread1</span>  <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>\t<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在上班&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tstartThread1 thread=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">startThread1</span>();<br>\t\tthread.start();<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在摸鱼&quot;</span>);<br>\t\t\t&#125;<br>\t\t<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-实现Runnable接口（最核心\"><a href=\"#2-2-实现Runnable接口（最核心\" class=\"headerlink\" title=\"2.2 实现Runnable接口（最核心)\"></a>2.2 实现Runnable接口（最核心)</h3></li>\n<li><p>实现MyRunnable类实现Runnable接口</p>\n</li>\n<li><p>实现run()方法，编写线程执行体</p>\n</li>\n<li><p>创建线程对象，调用start()方法启动线程</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">startThread2</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\tstartThread2 t2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">startThread2</span>();<br>\t\tThread thread=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(t2);<br>\t\tthread.start();<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在摸鱼&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br>\t<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我在上班&quot;</span>);<br>\t\t&#125;<br>\t\t<br>\t&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>推荐使用Runnable对象，因为Java单继承的局限性</strong></p>\n<ul>\n<li>继承Thread类<ul>\n<li>子类继承Thread类具备多线程能力</li>\n<li>启动线程：子类对象.start()</li>\n<li>不建议使用:避免OOP单继承局限性</li>\n</ul>\n</li>\n<li>实现Runnable接口<ul>\n<li>实现接口Runnable具有多线程能力</li>\n<li>启动线程：传入目标对象+Thread对象.start()</li>\n<li>推荐使用：避免单继承局限性，灵活方便，方便同一对象被多个线程使用</li>\n</ul>\n</li>\n</ul>\n<p>案例:龟兔赛跑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 1.首先来个赛道距离，然后要离终点越来越近</span><br><span class=\"hljs-comment\"> * 2.判断比赛是否结束</span><br><span class=\"hljs-comment\"> * 3.打印出胜利者</span><br><span class=\"hljs-comment\"> * 4.龟兔赛跑开始</span><br><span class=\"hljs-comment\"> * 5.故事中乌龟赢的，兔子需要睡觉，所以我们来模拟兔子睡觉</span><br><span class=\"hljs-comment\"> * 6.终于，乌龟赢得比赛</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Race</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;  <br> <span class=\"hljs-comment\">/**胜利者*/</span>  <br> <span class=\"hljs-keyword\">private</span> String winner;  <br> <span class=\"hljs-meta\">@Override</span>  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>     <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">1000</span>; i++) &#123;  <br>         <span class=\"hljs-keyword\">if</span> (getOver(i)) &#123;  <br>             <span class=\"hljs-keyword\">break</span>;  <br>         &#125;  <br>        <span class=\"hljs-comment\">//兔子轻敌，睡觉去了 </span><br>         <span class=\"hljs-keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"hljs-string\">&quot;兔&quot;</span>)&amp;&amp;i==<span class=\"hljs-number\">50</span>)&#123;  <br>             <span class=\"hljs-keyword\">try</span> &#123;  <br>                 Thread.sleep(<span class=\"hljs-number\">10</span>);  <br>                 System.out.println(<span class=\"hljs-string\">&quot;兔子睡着了!&quot;</span>);  <br>                 &#125; <br>             <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                 e.printStackTrace();  <br>             &#125;  <br>         &#125; <br>         System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;跑了&quot;</span>+i+<span class=\"hljs-string\">&quot;步;&quot;</span>);  <br>     &#125;  <br> &#125;  <br> <span class=\"hljs-comment\">/**判断比赛是否结束*/</span>  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">getOver</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span>&#123;  <br>     <span class=\"hljs-keyword\">if</span>(winner!=<span class=\"hljs-literal\">null</span>)&#123;  <br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  <br>     &#125;<span class=\"hljs-keyword\">else</span> &#123;  <br>         <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">100</span>)&#123;  <br>             winner = Thread.currentThread().getName();  <br>             System.out.println(winner+<span class=\"hljs-string\">&quot;赢得了比赛!&quot;</span>);  <br>             <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  <br>         &#125;  <br>     &#125; <br>     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  <br> &#125;  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>     <span class=\"hljs-type\">Race</span> <span class=\"hljs-variable\">race</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Race</span>();  <br>     <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(race,<span class=\"hljs-string\">&quot;兔&quot;</span>).start();  <br>     <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(race,<span class=\"hljs-string\">&quot;龟&quot;</span>).start();  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-实现Callable接口\"><a href=\"#2-3-实现Callable接口\" class=\"headerlink\" title=\"2.3 实现Callable接口\"></a>2.3 实现Callable接口</h3><p>1.实现Callable接口，需要返回值类型</p>\n<p>2.重写call方法，需要抛出异常</p>\n<p>3.创建目标对象</p>\n<p>4.创建执行服务：<code>ExecutorService ser=Executors.newFixedThreadPool(1);</code></p>\n<p>5.提交执行：<code>Future&lt;Boolean&gt; result1=ser.submit(t1);</code></p>\n<p>6.获取结果：<code>boolean r1 =result1.get()</code></p>\n<p>7.关闭服务：<code>ser.shutdownNow();</code></p>\n<p>用 Callable 接口改造下载图片案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.apache.commons.io.FileUtils;<br><span class=\"hljs-keyword\">import</span> java.io.File;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.net.URL;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.*;<br><span class=\"hljs-comment\">//创建线程3 实现Callable 接口</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">callable 的好处</span><br><span class=\"hljs-comment\">1、可以定义返回值</span><br><span class=\"hljs-comment\">2、可以抛出异常</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestCallable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Callable</span>&lt;Boolean&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> String url; <span class=\"hljs-comment\">//网络文件路径</span><br>    <span class=\"hljs-keyword\">private</span> String name;<span class=\"hljs-comment\">// 需要保存为什么文件名称</span><br>    <span class=\"hljs-keyword\">public</span>  <span class=\"hljs-title function_\">TestCallable</span><span class=\"hljs-params\">(String url,String name)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.url = url;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title function_\">call</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">webDownLoader</span> <span class=\"hljs-variable\">webDownLoader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">webDownLoader</span>();<br>        webDownLoader.downLoader(url,name);<br>        System.out.println(<span class=\"hljs-string\">&quot;下载了文件 ：&quot;</span>  + name);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">TestCallable</span> <span class=\"hljs-variable\">thread01</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestCallable</span>(<span class=\"hljs-string\">&quot;图片路径&quot;</span>,<span class=\"hljs-string\">&quot;1.jpg&quot;</span>);<br>        <span class=\"hljs-type\">TestCallable</span> <span class=\"hljs-variable\">thread02</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestCallable</span>(<span class=\"hljs-string\">&quot;图片路径&quot;</span>,<span class=\"hljs-string\">&quot;2.jpg&quot;</span>);<br>        <span class=\"hljs-type\">TestCallable</span> <span class=\"hljs-variable\">thread03</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestCallable</span>(<span class=\"hljs-string\">&quot;图片路径&quot;</span>,<span class=\"hljs-string\">&quot;3.jpg&quot;</span>);<br>        <span class=\"hljs-comment\">//创建执行服务:  3 条线程</span><br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">ser</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">3</span>);<br>        <span class=\"hljs-comment\">//提交执行:</span><br>        Future&lt;Boolean&gt; result1 = ser.submit(thread01);<br>        Future&lt;Boolean&gt; result2 = ser.submit(thread02);<br>        Future&lt;Boolean&gt; result3 = ser.submit(thread03);<br>        <span class=\"hljs-comment\">//获取结果: 就是call 方法 返回的值</span><br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">r1</span> <span class=\"hljs-operator\">=</span> result1.get();<br>        <span class=\"hljs-type\">boolean</span> r2= result2.get();<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">r3</span> <span class=\"hljs-operator\">=</span> result3.get();<br>        <span class=\"hljs-comment\">//关闭服务</span><br>        ser.shutdownNow();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//下载器</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">webDownLoader</span>&#123;<br>    <span class=\"hljs-comment\">//下载方法</span><br>    <span class=\"hljs-keyword\">public</span>  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">downLoader</span><span class=\"hljs-params\">(String url, String name)</span>&#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            FileUtils.copyURLToFile(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URL</span>(url),<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(name));<br>        &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class=\"hljs-string\">&quot;IO downLoader 方法异常。&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"3-线程状态\"><a href=\"#3-线程状态\" class=\"headerlink\" title=\"3 线程状态\"></a>3 线程状态</h2><p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic2.PNG\"></p>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic3.PNG\"></p>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic4.PNG\"></p>\n<h3 id=\"3-1-停止线程\"><a href=\"#3-1-停止线程\" class=\"headerlink\" title=\"3.1 停止线程\"></a>3.1 停止线程</h3><ul>\n<li>不推荐使用JDK提供的stop()、destroy()方法。【已废弃】</li>\n<li>推荐线程之间停止下来</li>\n<li>建议使用一个标志位进行终止变量</li>\n</ul>\n<p>当flag=false，则终止线程运行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestStop</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;<br>\t<span class=\"hljs-comment\">//1.线程中定义线程体使用的标识</span><br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">flag</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-literal\">true</span>;<br>\t<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-comment\">//2.线程体使用该标识</span><br>\t\t<span class=\"hljs-keyword\">while</span> (flag) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;run...Thread&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//3.对外提供方法改变标识</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">stop</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.flag=<span class=\"hljs-literal\">false</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-线程休眠\"><a href=\"#4-线程休眠\" class=\"headerlink\" title=\"4 线程休眠\"></a>4 线程休眠</h2><ul>\n<li>sleep(时间)指定当前线程阻塞的毫秒数；</li>\n<li>sleep存在异常InterrupterException；</li>\n<li>sleep时间达到后线程进入就绪状态；</li>\n<li>sleep可以模拟网络延时，倒计时等。</li>\n<li>每一个对象都有一个锁，sleep不会释放锁；</li>\n</ul>\n<p>网络延时的作用：放大问题的发生性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestSleep</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            tenDown();<br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">tenDown</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123;<br>            Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            System.out.println(num--);<br>            <span class=\"hljs-keyword\">if</span>(num&lt;=<span class=\"hljs-number\">0</span>)&#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"5-线程礼让\"><a href=\"#5-线程礼让\" class=\"headerlink\" title=\"5 线程礼让\"></a>5 线程礼让</h2><ul>\n<li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li>\n<li>将线程从运行状态转为就绪状态</li>\n<li>让cpu重新调度，礼让不一定成功！看CPU心情</li>\n</ul>\n<p>例如：CPU正在运行A线程，此时A调用Thread.yield，变为就绪状态，Cpu重新调度A、B线程，</p>\n<p>可能还是接着执行A线程，也有可能礼让成功，执行B线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestYield</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">MyYield</span> <span class=\"hljs-variable\">myYield</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyYield</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myYield,<span class=\"hljs-string\">&quot;a&quot;</span>).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myYield,<span class=\"hljs-string\">&quot;b&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyYield</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程开始执行&quot;</span>);<br>        Thread.yield();<br>        System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程停止执行&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//a线程开始执行</span><br><span class=\"hljs-comment\">//b线程开始执行</span><br><span class=\"hljs-comment\">//b线程停止执行</span><br><span class=\"hljs-comment\">//a线程停止执行</span><br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"6-线程强制执行\"><a href=\"#6-线程强制执行\" class=\"headerlink\" title=\"6 线程强制执行\"></a>6 线程强制执行</h2><ul>\n<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestJoin</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>\t\tTestJoin testJoin=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestJoin</span>();<br>\t\tThread thread=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(testJoin);<br>\t\t\tthread.start();<br>\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">100</span>;i++) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">50</span>) &#123;<br>\t\t\t\t\tthread.join();<br>\t\t\t\t&#125;<br>\t\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;main--&quot;</span>+i);<br>\t\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">1000</span>;i++) &#123;<br>\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;join---&quot;</span>+i);<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"7-观测线程状态\"><a href=\"#7-观测线程状态\" class=\"headerlink\" title=\"7 观测线程状态\"></a>7 观测线程状态</h2><p><code>Thread.State</code></p>\n<p> 线程状态。线程可以处于一下状态之一：</p>\n<ul>\n<li><p>NEW</p>\n<p>尚未启动的线程处于此状态</p>\n</li>\n<li><p>RUNNABLE</p>\n<p>在Java虚拟机中执行的线程处于此状态。</p>\n</li>\n<li><p>BLOCKED</p>\n<p>被阻塞等待监视器锁定的线程处于此状态。</p>\n</li>\n<li><p>WAITING</p>\n<p> 正在等待另一个线程执行特定动作的线程处于此状态。</p>\n</li>\n<li><p>TIMED_WAITING</p>\n<p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。</p>\n</li>\n<li><p>TERMINATED</p>\n<p>已退出的线程处于此状态。</p>\n</li>\n</ul>\n<p>一个线程可以在给定时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadState</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> &#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;  <br>             <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">5</span> &amp;&amp; i&lt;<span class=\"hljs-number\">10</span>)&#123;  <br>                 <span class=\"hljs-keyword\">try</span> &#123;  <br>                     Thread.sleep(<span class=\"hljs-number\">1</span>);  <br>                     System.out.println(<span class=\"hljs-string\">&quot;阻塞时的状态&quot;</span>+Thread.currentThread().getState());  <br>                 &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                     e.printStackTrace();  <br>                  &#125;  <br>             &#125; <br>             System.out.println(Thread.currentThread().getName()+i+<span class=\"hljs-string\">&quot;线程正在执行的状态：&quot;</span>+Thread.currentThread().getState());  <br>         &#125;  <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br> <span class=\"hljs-type\">MyThreadState</span> <span class=\"hljs-variable\">myThreadState</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThreadState</span>();  <br>    <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(myThreadState);  <br>    Thread.<span class=\"hljs-type\">State</span> <span class=\"hljs-variable\">state</span> <span class=\"hljs-operator\">=</span> thread.getState();  <br>    System.out.println(<span class=\"hljs-string\">&quot;线程创建未启动时状态:&quot;</span>+state);  <br>    thread.start();  <br>    state = thread.getState();  <br>    System.out.println(<span class=\"hljs-string\">&quot;线程启动后的状态:&quot;</span>+state);  <br>    <span class=\"hljs-keyword\">while</span> (thread.getState()!= Thread.State.TERMINATED)&#123;  <br>        state = thread.getState();  <br>        System.out.println(thread.getName()+<span class=\"hljs-string\">&quot;线程运行时状态:&quot;</span>+state);  <br>    &#125;  <br>    state = thread.getState();  <br>    System.out.println(<span class=\"hljs-string\">&quot;线程结束状态：&quot;</span>+state);  <br>    System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程优先级&quot;</span>+Thread.currentThread().getPriority());  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"8-线程优先级\"><a href=\"#8-线程优先级\" class=\"headerlink\" title=\"8 线程优先级\"></a>8 线程优先级</h2><ul>\n<li><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</p>\n</li>\n<li><p>线程的优先级用数字表示，范围从1~10.</p>\n<ul>\n<li>Thread.MIN_PRIORITY = 1 ;</li>\n<li>Thread.MAX_PRIORITY = 10 ;</li>\n<li>Thread.NORM_PRIORITY = 5 ;</li>\n</ul>\n</li>\n<li><p>使用以下方式改变或获取优先级</p>\n<ul>\n<li>getPriority().setPriority(int xxx)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestPriority</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>     System.out.println(TestPriority.currentThread().getName()+<span class=\"hljs-string\">&quot;的优先级&quot;</span>+TestPriority.currentThread().getPriority());  <br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadPriority</span> &#123;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        <span class=\"hljs-type\">TestPriority</span> <span class=\"hljs-variable\">priority5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestPriority</span>();  <br>        System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;线程优先级&quot;</span>+Thread.currentThread().getPriority());  <br>        priority1.setPriority(<span class=\"hljs-number\">6</span>);  <br>        priority1.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority1&quot;+priority1.getPriority());  </span><br>        priority2.setPriority(<span class=\"hljs-number\">2</span>);  <br>        priority2.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority2&quot;+priority2.getPriority());  </span><br>        priority3.setPriority(<span class=\"hljs-number\">3</span>);  <br>        priority3.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority3&quot;+priority3.getPriority());  </span><br>        priority4.setPriority(<span class=\"hljs-number\">8</span>);  <br>        priority4.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority4&quot;+priority4.getPriority());  </span><br>        priority5.setPriority(<span class=\"hljs-number\">5</span>);  <br>        priority5.start();  <br><span class=\"hljs-comment\">//        System.out.println(&quot;priority5&quot;+priority5.getPriority());  </span><br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"9-守护线程\"><a href=\"#9-守护线程\" class=\"headerlink\" title=\"9 守护线程\"></a>9 守护线程</h2><ul>\n<li>线程分为用户线程和守护线程</li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用的等待守护线程执行完毕</li>\n<li>如，后台记录操作日志，监控内存，垃圾回收等</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 上帝，守护线程  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">God</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>         <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123;  <br>             out.println(<span class=\"hljs-string\">&quot;上帝保佑你！&quot;</span>+l++);  <br>         &#125;  <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * you 用户线程  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">You</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">35000</span>; i++) &#123;  <br>             out.println(<span class=\"hljs-string\">&quot;每天都在健康的活着&quot;</span>+i);  <br>         &#125;  <br>         out.println(<span class=\"hljs-string\">&quot;you goodBye world!&quot;</span>);  <br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 启动用户线程和守护线程</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadDaemon</span> &#123;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        <span class=\"hljs-type\">You</span> <span class=\"hljs-variable\">you</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">You</span>();  <br>        <span class=\"hljs-type\">God</span> <span class=\"hljs-variable\">god</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">God</span>();  <br>        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">youThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(you);  <br>        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">godThread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(god);  <br>        godThread.setDaemon(<span class=\"hljs-literal\">true</span>);  <br>        youThread.start();  <br>        godThread.start();  <br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"10-线程同步\"><a href=\"#10-线程同步\" class=\"headerlink\" title=\"10 线程同步\"></a>10 线程同步</h2><p>多个线程操作同一资源。</p>\n<h3 id=\"10-1并发\"><a href=\"#10-1并发\" class=\"headerlink\" title=\"10.1并发\"></a>10.1并发</h3><p>同个对象 被多个线程 同时操作</p>\n<ul>\n<li>现实生活中，我们会遇到“同个资源，多个人都想使用”的问题，比如，食堂排队打饭，每个人都想吃饭，最天然的结局方法就是，排队。一个个来。</li>\n<li>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用</li>\n</ul>\n<p><strong>保证线程同步的安全性：队列加锁</strong></p>\n<ul>\n<li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>\n<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-2不安全线程\"><a href=\"#10-2不安全线程\" class=\"headerlink\" title=\"10.2不安全线程\"></a>10.2不安全线程</h3><p>ArrayList是线程不安全的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThreadSafe</span> &#123;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        ArrayList&lt;String&gt; arrayList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();  <br>           <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000</span>; i++) &#123;  <br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(()-&gt; &#123;  <br>                <span class=\"hljs-keyword\">synchronized</span>(arrayList)&#123;  <br>                arrayList.add(Thread.currentThread().getName());  <br>                               &#125;  <br>                &#125;).start();  <br>           &#125;  <br>        <span class=\"hljs-keyword\">try</span> &#123;  <br>            Thread.sleep(<span class=\"hljs-number\">100</span>);  <br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>        System.out.println(arrayList.size());  <br>   &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"10-3-同步方法\"><a href=\"#10-3-同步方法\" class=\"headerlink\" title=\"10.3 同步方法\"></a>10.3 同步方法</h3><ul>\n<li><p>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需要针对方法提出一套机制，这套机制就是<strong>synchronized</strong>关键字，它包括两种用法：synchronized方法和synchronized块。</p>\n<p><strong>同步方法：<code>public synchronized void method(int args)&#123;&#125;</code></strong></p>\n</li>\n<li><p>synchronized方法控制对”对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才获得这个锁，继续执行</p>\n</li>\n</ul>\n<p><strong>缺陷：若将一个大的方法声明为synchronized将会影响效率</strong></p>\n<ul>\n<li>方法里面需要修改的内容才需要锁，锁太多会浪费资源。</li>\n</ul>\n<p> synchronized默认是锁this，同步方法锁不住的时候只能用同步块</p>\n<ul>\n<li><p>同步块:synchronized(Obj){}</p>\n</li>\n<li><p>Obj称之为同步监视器</p>\n<ul>\n<li>Obj可以是任何对象，但推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class【反射】</li>\n</ul>\n</li>\n<li><p>同步监视器的执行过程</p>\n<ol>\n<li><p>第一个线程访问，锁定同步监视器，执行其中代码。</p>\n</li>\n<li><p>第二个线程访问，发现同步监视器被锁定，无法访问。</p>\n</li>\n<li><p>第一个线程访问完毕，解锁同步监视器。</p>\n</li>\n<li><p>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</p>\n</li>\n</ol>\n</li>\n</ul>\n<p>锁要锁对，默认锁this，银行取钱，锁银行没有用，要锁银行卡。</p>\n<p>锁要锁增删改的对象，同步块放在run()方法中。</p>\n<p><strong>银行取钱问题</strong></p>\n<p>1.账户类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;  <br>    <span class=\"hljs-comment\">/**余额*/</span>  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> money;  <br>       <span class=\"hljs-comment\">/**卡名*/</span>  <br>    <span class=\"hljs-keyword\">private</span> String name;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Account</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> money, String name)</span> &#123;<br>\t\t<span class=\"hljs-built_in\">this</span>.money=money;<br>\t\t<span class=\"hljs-built_in\">this</span>.name=name;<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMoney</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> money;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setMoney</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> money)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.money = money;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.模拟银行取钱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 模拟银行取钱  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Drawing</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;  <br>     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Account account;  <br>     <span class=\"hljs-comment\">/**现有的钱*/</span>  <br>     <span class=\"hljs-keyword\">private</span>  <span class=\"hljs-type\">int</span> nowMoney;  <br>     <span class=\"hljs-comment\">/**取出的钱*/</span>  <br>     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> drawingMoney;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Drawing</span><span class=\"hljs-params\">( Account account,  <span class=\"hljs-type\">int</span> drawingMoney,String name)</span> &#123;  <br>         <span class=\"hljs-built_in\">super</span>(name);  <br>         <span class=\"hljs-built_in\">this</span>.account = account;  <br>         <span class=\"hljs-built_in\">this</span>.drawingMoney = drawingMoney;  <br>        &#125;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">synchronized</span> (account)&#123;  <br>         <span class=\"hljs-comment\">//判断有没有钱  </span><br>         <span class=\"hljs-keyword\">if</span>(account.getMoney()-drawingMoney&lt;<span class=\"hljs-number\">0</span>)&#123;  <br>             out.println(<span class=\"hljs-string\">&quot;你的账户没有那么多钱！&quot;</span>);  <br>             <span class=\"hljs-keyword\">return</span>;  <br>         &#125;<span class=\"hljs-keyword\">try</span> &#123;  <br>             sleep(<span class=\"hljs-number\">100</span>);  <br>         &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>             e.printStackTrace();  <br>         &#125;  <br>         <span class=\"hljs-comment\">//余额  </span><br>         account.setMoney( account.getMoney() - drawingMoney);  <br>         <span class=\"hljs-comment\">//手中的钱  </span><br>         nowMoney=nowMoney+drawingMoney;  <br>         out.println(<span class=\"hljs-string\">&quot;余额为：&quot;</span>+account.getMoney());  <br>         out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;手中的钱：&quot;</span>+nowMoney);  <br>        &#125;  <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>多人从银行取钱</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span>&#123;  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>     <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">&quot;工商&quot;</span>);  <br>     <span class=\"hljs-type\">Drawing</span> <span class=\"hljs-variable\">me</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Drawing</span>(account, <span class=\"hljs-number\">40</span>, <span class=\"hljs-string\">&quot;me&quot;</span>);  <br>     <span class=\"hljs-type\">Drawing</span> <span class=\"hljs-variable\">girlFriend</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Drawing</span>(account, <span class=\"hljs-number\">89</span>, <span class=\"hljs-string\">&quot;girlFriend&quot;</span>);  <br>     me.start();  <br>     girlFriend.start();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"10-4-死锁\"><a href=\"#10-4-死锁\" class=\"headerlink\" title=\"10.4 死锁\"></a>10.4 死锁</h3><ul>\n<li>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有“<strong>两个以上对象的锁</strong>”时，就可能会发生“死锁”的问题。</li>\n<li>产生死锁的四个必要条件:</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\">1.互斥条件：一个资源每次只能被一个进程使用。<br><span class=\"hljs-section\">2.请求与保持条件:一个进程因请求资源而阻塞时，对已获得的资源保持不放。</span><br>3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。<br>4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。<br></code></pre></td></tr></table></figure>\n\n<p><strong>只要想办法破坏上述任意一个或多个条件就可以避免死锁发生。</strong></p>\n<p>实现一个死锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 口红  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Lipstick</span>&#123;  <br>&#125;  <br><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 镜子  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mirroe</span>&#123;  <br>&#125;<br><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 写一个抢夺资源的方法  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyThread</span>&#123;<br><br>\t <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>\t       Makeup g1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Makeup</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;小红&quot;</span>);<br>\t       Makeup g2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Makeup</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;小丽&quot;</span>);<br>\t       g1.start();<br>\t       g2.start();<br>\t   &#125;  <br>\t<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Makeup</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;  <br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Lipstick</span> <span class=\"hljs-variable\">lipstick</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Lipstick</span>();  <br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Mirroe</span> <span class=\"hljs-variable\">mirroe</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Mirroe</span>();  <br>    <span class=\"hljs-type\">int</span> choice;  <br>    String girlName;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Makeup</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> choice, String girlName)</span> &#123;  <br>        <span class=\"hljs-built_in\">this</span>.choice = choice;  <br>        <span class=\"hljs-built_in\">this</span>.girlName = girlName;  <br>    &#125;  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">try</span> &#123;  <br>             makeup();  <br>         &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>             e.printStackTrace();  <br>         &#125;  <br>     &#125;  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">makeup</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;  <br>         <span class=\"hljs-keyword\">if</span>(choice==<span class=\"hljs-number\">0</span>)&#123;  <br>             <span class=\"hljs-keyword\">synchronized</span> (lipstick)&#123;  <br>                 System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到口红&quot;</span>);  <br>                 Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>                 <span class=\"hljs-keyword\">synchronized</span> (mirroe)&#123;  <br>                     System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到镜子&quot;</span>);  <br>                 &#125;  <br>             &#125; <br>         &#125;<span class=\"hljs-keyword\">else</span>&#123;  <br>             <span class=\"hljs-keyword\">synchronized</span> (mirroe)&#123;  <br>                 System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到镜子&quot;</span>);  <br>                 Thread.sleep(<span class=\"hljs-number\">2000</span>);  <br>                 <span class=\"hljs-keyword\">synchronized</span> (lipstick)&#123;  <br>                     System.out.println(<span class=\"hljs-built_in\">this</span>.girlName+<span class=\"hljs-string\">&quot;拿到口红&quot;</span>);  <br>                 &#125;  <br>             &#125; <br>         &#125; <br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"11-Lock锁\"><a href=\"#11-Lock锁\" class=\"headerlink\" title=\"11 Lock锁\"></a>11 Lock锁</h2><ul>\n<li>从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当</li>\n<li><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</li>\n<li>ReentrantLock类实现了Lock，它拥有与synchronized相同得并发性和内存语义，在实现线程安全得控制中，比较常用得是ReentrantLock，可以显式加锁、释放锁。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//实现</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>&#123;<br>     <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ReentrantLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReentrantLock</span>();  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">m</span><span class=\"hljs-params\">()</span>&#123;<br>        lock.lock();<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-comment\">//保证线程安全的代码；</span><br>        &#125;<br>        <span class=\"hljs-keyword\">finally</span>&#123;<br>            lock.unlock();<br>            <span class=\"hljs-comment\">//如果同步代码有异常，要将unlock()写入finally语句块</span><br>        \t\t&#125;<br>    \t&#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>多人买票例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * 多人买票，用lock的方式实现  </span><br><span class=\"hljs-comment\"> */</span>  <br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestLock</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>&#123;  <br>    <span class=\"hljs-type\">int</span> ticketNums=<span class=\"hljs-number\">100</span>;  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ReentrantLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReentrantLock</span>();  <br>     <span class=\"hljs-meta\">@Override</span>  <br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;  <br>         <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)&#123; \t<br>             <span class=\"hljs-keyword\">try</span> &#123;  <br>            \t lock.lock(); <br>                 <span class=\"hljs-keyword\">if</span>(ticketNums&gt;<span class=\"hljs-number\">0</span>)&#123;  <br>                     <span class=\"hljs-keyword\">try</span> &#123;  <br>                    \t    Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>                      &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                         e.printStackTrace();  <br>                      &#125;  <br>                 System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot;买到了票&quot;</span>+ticketNums--);  <br>                  &#125;<span class=\"hljs-keyword\">else</span> &#123;  <br>                     <span class=\"hljs-keyword\">break</span>;  <br>                  &#125;  <br>              &#125;<span class=\"hljs-keyword\">finally</span> &#123;  <br>                  lock.unlock();  <br>              <br>              &#125;  <br>            <br>         &#125; <br>     &#125;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyLock</span> &#123;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        <span class=\"hljs-type\">TestLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestLock</span>(); <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(lock,<span class=\"hljs-string\">&quot;彭于晏&quot;</span>).start();  <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(lock,<span class=\"hljs-string\">&quot;陈冠希&quot;</span>).start();  <br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(lock,<span class=\"hljs-string\">&quot;Evan&quot;</span>).start();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"11-1-Lock和synchronized对比\"><a href=\"#11-1-Lock和synchronized对比\" class=\"headerlink\" title=\"11.1 Lock和synchronized对比\"></a>11.1 Lock和synchronized对比</h3><ul>\n<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放</li>\n<li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li>\n<li>优先使用顺序：<ul>\n<li>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源） &gt;同步方法（在方法体之外）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 定义可重入锁</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ReentrantLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ReentrantLock</span>();<br><span class=\"hljs-comment\">// 加锁</span><br>lock.lock();<br> <span class=\"hljs-comment\">// 解锁         </span><br>lock.unlock();    <br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"12-线程协作\"><a href=\"#12-线程协作\" class=\"headerlink\" title=\"12 线程协作\"></a>12 线程协作</h2><h3 id=\"12-1生产者消费者模式\"><a href=\"#12-1生产者消费者模式\" class=\"headerlink\" title=\"12.1生产者消费者模式\"></a>12.1生产者消费者模式</h3><ul>\n<li>应用场景：生产者和消费者问题<ul>\n<li>假设仓库中只能存放一件产品,生产者将生产出来的产品放入仓库,消费者将仓库中产品取走消费.</li>\n<li>如果仓库中没有产品﹐则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止.</li>\n<li>如果仓库中放有产品﹐则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic5.png\"></p>\n<ul>\n<li><p> <strong>这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖,互为条件．</strong></p>\n</li>\n<li><p>对于生产者﹐没有生产产品之前，要通知消费者等待﹒而生产了产品之后﹐又需要马上通知消费者消费</p>\n</li>\n<li><p>对于消费者﹐在消费之后,要通知生产者已经结束消费﹐需要生产新的产品以供消费.</p>\n</li>\n<li><p>在生产者消费者问题中,仅有synchronized是不够的</p>\n<ul>\n<li><p>synchronized可阻止并发更新同一个共享资源，实现了同步</p>\n</li>\n<li><p>synchronized不能用来实现不同线程之间的消息传递(通信)</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Java提供了几个方法解决线程之间的通信问题</p>\n<p><img src=\"/img/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/pic6.png\"></p>\n</li>\n</ul>\n<p><strong>sleep 会抱着锁睡觉，wait 会释放锁</strong></p>\n<p><strong>解决办法一</strong></p>\n<p>并发协作模型“生产者l消费者模式”—-&gt;管程法</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">生产者:负责生产数据的模块(可能是方法﹐对象﹐线程,进程);<br>消费者:负责处理数据的模块(可能是方法﹐对象﹐线程﹐进程);<br>缓冲区:消费者不能直接使用生产者的数据﹐他们之间有个“缓冲区”<br></code></pre></td></tr></table></figure>\n\n<p><strong>生产者将生产好的数据放入缓冲区,消费者从缓冲区拿出数据</strong></p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法</span><br><span class=\"hljs-comment\">//生产者，消费者，产品，缓冲区</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestPC</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">SynContainer</span> <span class=\"hljs-variable\">container</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SynContainer</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Productor</span>(container).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Consumer</span>(container).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//生产者</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Productor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    SynContainer container;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Productor</span><span class=\"hljs-params\">(SynContainer container)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.container = container;<br>    &#125;<br>    <span class=\"hljs-comment\">//生产</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>            container.push(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chicken</span>(i));<br>            System.out.println(<span class=\"hljs-string\">&quot;生产了&quot;</span>+i+<span class=\"hljs-string\">&quot;只鸡&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//消费者</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Consumer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    SynContainer container;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Consumer</span><span class=\"hljs-params\">(SynContainer container)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.container = container;<br>    &#125;<br>    <span class=\"hljs-comment\">//消费</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;消费了---&gt;&quot;</span>+container.pop().id+<span class=\"hljs-string\">&quot;只鸡&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//产品</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Chicken</span>&#123;<br>    <span class=\"hljs-type\">int</span> id;<span class=\"hljs-comment\">// 产品编号</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Chicken</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.id = id;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//缓冲区</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SynContainer</span>&#123;<br>    <span class=\"hljs-comment\">//需要一个容器大小</span><br>    Chicken[] chickens = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chicken</span>[<span class=\"hljs-number\">10</span>];<br>    <span class=\"hljs-comment\">//容器计算器</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//生产者放入产品</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(Chicken chicken)</span>&#123;<br>        <span class=\"hljs-comment\">//如果容器满了，就需要等待消费产品</span><br>        <span class=\"hljs-keyword\">if</span>(count==chickens.length)&#123;<br>            <span class=\"hljs-comment\">//生产者等待</span><br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//如果没有满，我们就需要丢入产品</span><br>        chickens[count] = chicken;<br>        count++;<br>        <span class=\"hljs-comment\">//可以通知消费者消费了</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<br>    &#125;<br>    <span class=\"hljs-comment\">//消费者消费产品</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> Chicken <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-comment\">//判断能否消费</span><br>        <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-comment\">//等待生产者生产，消费者等待</span><br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//如果可以消费</span><br>        count--;<br>        <span class=\"hljs-type\">Chicken</span> <span class=\"hljs-variable\">chicken</span> <span class=\"hljs-operator\">=</span> chickens[count];<br>        <span class=\"hljs-comment\">//吃完了，通知生产者生产</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<br>        <span class=\"hljs-keyword\">return</span> chicken;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>解决办法二</strong></p>\n<p>并发协作模型“生产者/消费者模式”—-&gt;信号灯法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//测试消费者和生产者问题2：信号灯法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestPC2</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">TV</span> <span class=\"hljs-variable\">tv</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TV</span>();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Player</span>(tv).start();<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(tv).start();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//生产者--&gt;演员</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Player</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    TV tv;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Player</span><span class=\"hljs-params\">(TV tv)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.tv = tv;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (i%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>)&#123;<br>                <span class=\"hljs-built_in\">this</span>.tv.play(<span class=\"hljs-string\">&quot;快乐大本营播放中&quot;</span>);<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-built_in\">this</span>.tv.play(<span class=\"hljs-string\">&quot;抖音，记录有钱人的美好生活&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//消费者--&gt;观众</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Thread</span>&#123;<br>    TV tv;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Watcher</span><span class=\"hljs-params\">(TV tv)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.tv = tv;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) &#123;<br>            tv.watch();<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//产品--&gt;节目</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TV</span>&#123;<br>    <span class=\"hljs-comment\">// 演员表演，观众等待 T</span><br>    <span class=\"hljs-comment\">// 观众观看，演员等待 F</span><br>    String voice; <span class=\"hljs-comment\">// 表演的节目</span><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">flag</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-comment\">// 表演</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">play</span><span class=\"hljs-params\">(String voice)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (!flag)&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;演员表演了：&quot;</span>+voice);<br>        <span class=\"hljs-comment\">// 通知观众观看</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<span class=\"hljs-comment\">// 通知唤醒</span><br>        <span class=\"hljs-built_in\">this</span>.voice = voice;<br>        <span class=\"hljs-built_in\">this</span>.flag = !<span class=\"hljs-built_in\">this</span>.flag;<span class=\"hljs-comment\">//flag如果是真就取假，相同是假就取真</span><br>    &#125;<br>    <span class=\"hljs-comment\">// 观看</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">watch</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (flag)&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.wait();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;观众观看了：&quot;</span>+voice);<br>        <span class=\"hljs-comment\">// 通知演员表演</span><br>        <span class=\"hljs-built_in\">this</span>.notifyAll();<br>        <span class=\"hljs-built_in\">this</span>.flag = !<span class=\"hljs-built_in\">this</span>.flag;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"13-线程池\"><a href=\"#13-线程池\" class=\"headerlink\" title=\"13 线程池\"></a>13 线程池</h2><ul>\n<li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</li>\n<li>思路:  提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li>\n<li>好处:<ul>\n<li>提高响应速度（减少了创建新线程的时间）</li>\n<li>降低了资源消耗（重复利用线程池中线程，不需要每次都创建）</li>\n<li>便于线程管理（…）<ul>\n<li><code>corePoolSize</code>：核心池的大小</li>\n<li><code>maximumPoolSize</code>:最大线程数</li>\n<li><code>keepAliveTime</code>：线程没有任务时最多保持多长时间后会终止</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-1使用线程池\"><a href=\"#13-1使用线程池\" class=\"headerlink\" title=\"13.1使用线程池\"></a>13.1使用线程池</h3><ul>\n<li><p>JDK 5.0起提供了线程池相关API：<strong>ExecutorService</strong> 和<strong>Executors</strong></p>\n</li>\n<li><p><strong>ExecutorService</strong>：真正的线程池接口。常见子类ThreadPoolExecutor</p>\n<ul>\n<li><code>void execute(Runnable command)</code>:执行任务/命令，没有返回值，一般哟过来执行Runnable</li>\n<li><code>&lt;T&gt; Future&lt;T&gt;submit(Callable&lt;T&gt;task)</code>: 执行任务，有返回值，一般用来执行Callable</li>\n<li><code>void shutdown() </code>:关闭连接池</li>\n</ul>\n</li>\n<li><p><strong>Executors</strong>：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 1. 创建线程池, 参数为线程池大小 </span><br><span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-comment\">// 2. 添加线程</span><br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>()); <br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>());<br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>());<br>service.submit(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyThread</span>());<br><span class=\"hljs-comment\">// 3. 关闭线程池 </span><br>service.shutdown();<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>本文完 </p>\n<p>本文源自：<a href=\"https://www.bilibili.com/video/BV1V4411p7EF?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1V4411p7EF?spm_id_from=333.999.0.0</a></p>\n"},{"title":"elementUI合并相同数据列","date":"2022-05-13T08:42:19.000Z","author":"Evan","_content":"\n\n\n## elementUI 表格 如何合并相同数据的列？\n\n在编写表格table中，会出现合并数据相同的列这种需求，如图：\n\n![](/img/elementui-%E7%AC%94%E8%AE%B0/objectSpanMethod.PNG)\n\n### 实现方法\n\n添加span-method 方法，elementUI提供了span-method方法 让我们可以动态合并表格，其中有四个参数，分别是row, column, rowIndex, columnIndex\n\n```vue\n<!--   \nrow:代表当前行的值\ncolumn:代表当前列的值\nrowIndex:当前行的索引\ncolumnIndex:当前列的索引\n-->\n\n<el-table :data=\"tableData\" :span-method=\"objectSpanMethod\" >\n\n<!--objectSpanMethod是定义的逻辑方法，可以根据自己需求定义-->\n```\n\nobjectSpanMethod的具体实现\n\n```js\nsetdates(arr) {   //获取数组\n        var obj = {},\n          k, arr1 = [];\n        for(var i = 0, len = arr.length; i < len; i++) {\n          k = arr[i].date;//合并所需要的列\n          if(obj[k])\n            obj[k]++;\n          else\n            obj[k] = 1;\n        }\n        console.log(obj)\n        //保存结果{el-'元素'，count-出现次数}\n        for(var o in obj) {\n          for(let i=0;i<obj[o];i++){\n            if(i===0){\n              this.arr1.push(obj[o])\n            }else{\n              this.arr1.push(0)\n            }\n          }\n        }\n        console.log(this.arr1);\n\n      },\n      objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n        if (columnIndex === 0 ) {\n          let _row = this.arr1[rowIndex]\n          let _col = this.arr1[rowIndex] > 0 ? 1 : 0\n          return [_row,_col]\n        }\n      }\n```\n\n\n\n## 完整代码\n\n```vue\n<template>\n  <el-table\n    :data=\"tableData\"\n    border\n    style=\"width: 100%\"  :span-method=\"objectSpanMethod\" >\n    <el-table-column\n      prop=\"date\"\n      label=\"日期\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"name\"\n      label=\"姓名\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"address\"\n      label=\"地址\">\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    name: \"table\",\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1517 弄'\n        }, {\n          date: '2016-05-01',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1519 弄'\n        }, {\n          date: '2016-05-03',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1516 弄'\n        }],\n        arr1:[],\n        arr2:[]\n      }\n    },\n    created() {\n      this.setdates(this.tableData)\n    },\n    methods: {\n      setdates(arr) {\n        var obj = {},\n          k, arr1 = [];\n        for(var i = 0, len = arr.length; i < len; i++) {\n          k = arr[i].date;//需要合并的字段\n          if(obj[k])\n            obj[k]++;\n          else\n            obj[k] = 1;\n        }\n        console.log(obj)\n        //保存结果{el-'元素'，count-出现次数}\n        for(var o in obj) {\n          for(let i=0;i<obj[o];i++){\n            if(i===0){\n              this.arr1.push(obj[o])\n            }else{\n              this.arr1.push(0)\n            }\n          }\n        }\n        console.log(this.arr1);\n\n      },\n\n\n      objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n        if (columnIndex === 0 ) {\n          let _row = this.arr1[rowIndex]\n          let _col = this.arr1[rowIndex] > 0 ? 1 : 0\n          return [_row,_col]\n        }\n      }\n    }\n  };\n</script>\n\n\n\n<style scoped>\n\n</style>\n\n```\n\n","source":"_posts/elementUI合并相同数据列.md","raw":"---\ntitle: elementUI合并相同数据列\ndate: 2022-05-13 16:42:19\nauthor: Evan\ncategories: 笔记\ntags:\n- elementUI\n---\n\n\n\n## elementUI 表格 如何合并相同数据的列？\n\n在编写表格table中，会出现合并数据相同的列这种需求，如图：\n\n![](/img/elementui-%E7%AC%94%E8%AE%B0/objectSpanMethod.PNG)\n\n### 实现方法\n\n添加span-method 方法，elementUI提供了span-method方法 让我们可以动态合并表格，其中有四个参数，分别是row, column, rowIndex, columnIndex\n\n```vue\n<!--   \nrow:代表当前行的值\ncolumn:代表当前列的值\nrowIndex:当前行的索引\ncolumnIndex:当前列的索引\n-->\n\n<el-table :data=\"tableData\" :span-method=\"objectSpanMethod\" >\n\n<!--objectSpanMethod是定义的逻辑方法，可以根据自己需求定义-->\n```\n\nobjectSpanMethod的具体实现\n\n```js\nsetdates(arr) {   //获取数组\n        var obj = {},\n          k, arr1 = [];\n        for(var i = 0, len = arr.length; i < len; i++) {\n          k = arr[i].date;//合并所需要的列\n          if(obj[k])\n            obj[k]++;\n          else\n            obj[k] = 1;\n        }\n        console.log(obj)\n        //保存结果{el-'元素'，count-出现次数}\n        for(var o in obj) {\n          for(let i=0;i<obj[o];i++){\n            if(i===0){\n              this.arr1.push(obj[o])\n            }else{\n              this.arr1.push(0)\n            }\n          }\n        }\n        console.log(this.arr1);\n\n      },\n      objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n        if (columnIndex === 0 ) {\n          let _row = this.arr1[rowIndex]\n          let _col = this.arr1[rowIndex] > 0 ? 1 : 0\n          return [_row,_col]\n        }\n      }\n```\n\n\n\n## 完整代码\n\n```vue\n<template>\n  <el-table\n    :data=\"tableData\"\n    border\n    style=\"width: 100%\"  :span-method=\"objectSpanMethod\" >\n    <el-table-column\n      prop=\"date\"\n      label=\"日期\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"name\"\n      label=\"姓名\"\n      width=\"180\">\n    </el-table-column>\n    <el-table-column\n      prop=\"address\"\n      label=\"地址\">\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    name: \"table\",\n    data() {\n      return {\n        tableData: [{\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1518 弄'\n        }, {\n          date: '2016-05-02',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1517 弄'\n        }, {\n          date: '2016-05-01',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1519 弄'\n        }, {\n          date: '2016-05-03',\n          name: '王小虎',\n          address: '上海市普陀区金沙江路 1516 弄'\n        }],\n        arr1:[],\n        arr2:[]\n      }\n    },\n    created() {\n      this.setdates(this.tableData)\n    },\n    methods: {\n      setdates(arr) {\n        var obj = {},\n          k, arr1 = [];\n        for(var i = 0, len = arr.length; i < len; i++) {\n          k = arr[i].date;//需要合并的字段\n          if(obj[k])\n            obj[k]++;\n          else\n            obj[k] = 1;\n        }\n        console.log(obj)\n        //保存结果{el-'元素'，count-出现次数}\n        for(var o in obj) {\n          for(let i=0;i<obj[o];i++){\n            if(i===0){\n              this.arr1.push(obj[o])\n            }else{\n              this.arr1.push(0)\n            }\n          }\n        }\n        console.log(this.arr1);\n\n      },\n\n\n      objectSpanMethod({ row, column, rowIndex, columnIndex }) {\n        if (columnIndex === 0 ) {\n          let _row = this.arr1[rowIndex]\n          let _col = this.arr1[rowIndex] > 0 ? 1 : 0\n          return [_row,_col]\n        }\n      }\n    }\n  };\n</script>\n\n\n\n<style scoped>\n\n</style>\n\n```\n\n","slug":"elementUI合并相同数据列","published":1,"updated":"2022-05-30T08:53:28.061Z","_id":"cl3kwbmxi000b5cu35d555v76","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"elementUI-表格-如何合并相同数据的列？\"><a href=\"#elementUI-表格-如何合并相同数据的列？\" class=\"headerlink\" title=\"elementUI 表格 如何合并相同数据的列？\"></a>elementUI 表格 如何合并相同数据的列？</h2><p>在编写表格table中，会出现合并数据相同的列这种需求，如图：</p>\n<p><img src=\"/img/elementui-%E7%AC%94%E8%AE%B0/objectSpanMethod.PNG\"></p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>添加span-method 方法，elementUI提供了span-method方法 让我们可以动态合并表格，其中有四个参数，分别是row, column, rowIndex, columnIndex</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;!--   <br>row:代表当前行的值<br>column:代表当前列的值<br>rowIndex:当前行的索引<br>columnIndex:当前列的索引<br>--&gt;<br><br>&lt;el-table :data=&quot;tableData&quot; :span-method=&quot;objectSpanMethod&quot; &gt;<br><br>&lt;!--objectSpanMethod是定义的逻辑方法，可以根据自己需求定义--&gt;<br></code></pre></td></tr></table></figure>\n\n<p>objectSpanMethod的具体实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">setdates</span>(<span class=\"hljs-params\">arr</span>) &#123;   <span class=\"hljs-comment\">//获取数组</span><br>        <span class=\"hljs-keyword\">var</span> obj = &#123;&#125;,<br>          k, arr1 = [];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = arr.<span class=\"hljs-property\">length</span>; i &lt; len; i++) &#123;<br>          k = arr[i].<span class=\"hljs-property\">date</span>;<span class=\"hljs-comment\">//合并所需要的列</span><br>          <span class=\"hljs-keyword\">if</span>(obj[k])<br>            obj[k]++;<br>          <span class=\"hljs-keyword\">else</span><br>            obj[k] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj)<br>        <span class=\"hljs-comment\">//保存结果&#123;el-&#x27;元素&#x27;，count-出现次数&#125;</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> o <span class=\"hljs-keyword\">in</span> obj) &#123;<br>          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;obj[o];i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">0</span>)&#123;<br>              <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>.<span class=\"hljs-title function_\">push</span>(obj[o])<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>              <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">0</span>)<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>);<br><br>      &#125;,<br>      <span class=\"hljs-title function_\">objectSpanMethod</span>(<span class=\"hljs-params\">&#123; row, column, rowIndex, columnIndex &#125;</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (columnIndex === <span class=\"hljs-number\">0</span> ) &#123;<br>          <span class=\"hljs-keyword\">let</span> _row = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>[rowIndex]<br>          <span class=\"hljs-keyword\">let</span> _col = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>[rowIndex] &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span><br>          <span class=\"hljs-keyword\">return</span> [_row,_col]<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;el-table<br>    :data=&quot;tableData&quot;<br>    border<br>    style=&quot;width: 100%&quot;  :span-method=&quot;objectSpanMethod&quot; &gt;<br>    &lt;el-table-column<br>      prop=&quot;date&quot;<br>      label=&quot;日期&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;name&quot;<br>      label=&quot;姓名&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;address&quot;<br>      label=&quot;地址&quot;&gt;<br>    &lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    name: &quot;table&quot;,<br>    data() &#123;<br>      return &#123;<br>        tableData: [&#123;<br>          date: &#x27;2016-05-02&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-02&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1517 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-01&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1519 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-03&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1516 弄&#x27;<br>        &#125;],<br>        arr1:[],<br>        arr2:[]<br>      &#125;<br>    &#125;,<br>    created() &#123;<br>      this.setdates(this.tableData)<br>    &#125;,<br>    methods: &#123;<br>      setdates(arr) &#123;<br>        var obj = &#123;&#125;,<br>          k, arr1 = [];<br>        for(var i = 0, len = arr.length; i &lt; len; i++) &#123;<br>          k = arr[i].date;//需要合并的字段<br>          if(obj[k])<br>            obj[k]++;<br>          else<br>            obj[k] = 1;<br>        &#125;<br>        console.log(obj)<br>        //保存结果&#123;el-&#x27;元素&#x27;，count-出现次数&#125;<br>        for(var o in obj) &#123;<br>          for(let i=0;i&lt;obj[o];i++)&#123;<br>            if(i===0)&#123;<br>              this.arr1.push(obj[o])<br>            &#125;else&#123;<br>              this.arr1.push(0)<br>            &#125;<br>          &#125;<br>        &#125;<br>        console.log(this.arr1);<br><br>      &#125;,<br><br><br>      objectSpanMethod(&#123; row, column, rowIndex, columnIndex &#125;) &#123;<br>        if (columnIndex === 0 ) &#123;<br>          let _row = this.arr1[rowIndex]<br>          let _col = this.arr1[rowIndex] &gt; 0 ? 1 : 0<br>          return [_row,_col]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;;<br>&lt;/script&gt;<br><br><br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":2886,"excerpt":"","more":"<h2 id=\"elementUI-表格-如何合并相同数据的列？\"><a href=\"#elementUI-表格-如何合并相同数据的列？\" class=\"headerlink\" title=\"elementUI 表格 如何合并相同数据的列？\"></a>elementUI 表格 如何合并相同数据的列？</h2><p>在编写表格table中，会出现合并数据相同的列这种需求，如图：</p>\n<p><img src=\"/img/elementui-%E7%AC%94%E8%AE%B0/objectSpanMethod.PNG\"></p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>添加span-method 方法，elementUI提供了span-method方法 让我们可以动态合并表格，其中有四个参数，分别是row, column, rowIndex, columnIndex</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;!--   <br>row:代表当前行的值<br>column:代表当前列的值<br>rowIndex:当前行的索引<br>columnIndex:当前列的索引<br>--&gt;<br><br>&lt;el-table :data=&quot;tableData&quot; :span-method=&quot;objectSpanMethod&quot; &gt;<br><br>&lt;!--objectSpanMethod是定义的逻辑方法，可以根据自己需求定义--&gt;<br></code></pre></td></tr></table></figure>\n\n<p>objectSpanMethod的具体实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">setdates</span>(<span class=\"hljs-params\">arr</span>) &#123;   <span class=\"hljs-comment\">//获取数组</span><br>        <span class=\"hljs-keyword\">var</span> obj = &#123;&#125;,<br>          k, arr1 = [];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = arr.<span class=\"hljs-property\">length</span>; i &lt; len; i++) &#123;<br>          k = arr[i].<span class=\"hljs-property\">date</span>;<span class=\"hljs-comment\">//合并所需要的列</span><br>          <span class=\"hljs-keyword\">if</span>(obj[k])<br>            obj[k]++;<br>          <span class=\"hljs-keyword\">else</span><br>            obj[k] = <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj)<br>        <span class=\"hljs-comment\">//保存结果&#123;el-&#x27;元素&#x27;，count-出现次数&#125;</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> o <span class=\"hljs-keyword\">in</span> obj) &#123;<br>          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;obj[o];i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">0</span>)&#123;<br>              <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>.<span class=\"hljs-title function_\">push</span>(obj[o])<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>              <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">0</span>)<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>);<br><br>      &#125;,<br>      <span class=\"hljs-title function_\">objectSpanMethod</span>(<span class=\"hljs-params\">&#123; row, column, rowIndex, columnIndex &#125;</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (columnIndex === <span class=\"hljs-number\">0</span> ) &#123;<br>          <span class=\"hljs-keyword\">let</span> _row = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>[rowIndex]<br>          <span class=\"hljs-keyword\">let</span> _col = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">arr1</span>[rowIndex] &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span><br>          <span class=\"hljs-keyword\">return</span> [_row,_col]<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;el-table<br>    :data=&quot;tableData&quot;<br>    border<br>    style=&quot;width: 100%&quot;  :span-method=&quot;objectSpanMethod&quot; &gt;<br>    &lt;el-table-column<br>      prop=&quot;date&quot;<br>      label=&quot;日期&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;name&quot;<br>      label=&quot;姓名&quot;<br>      width=&quot;180&quot;&gt;<br>    &lt;/el-table-column&gt;<br>    &lt;el-table-column<br>      prop=&quot;address&quot;<br>      label=&quot;地址&quot;&gt;<br>    &lt;/el-table-column&gt;<br>  &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  export default &#123;<br>    name: &quot;table&quot;,<br>    data() &#123;<br>      return &#123;<br>        tableData: [&#123;<br>          date: &#x27;2016-05-02&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-02&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1517 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-01&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1519 弄&#x27;<br>        &#125;, &#123;<br>          date: &#x27;2016-05-03&#x27;,<br>          name: &#x27;王小虎&#x27;,<br>          address: &#x27;上海市普陀区金沙江路 1516 弄&#x27;<br>        &#125;],<br>        arr1:[],<br>        arr2:[]<br>      &#125;<br>    &#125;,<br>    created() &#123;<br>      this.setdates(this.tableData)<br>    &#125;,<br>    methods: &#123;<br>      setdates(arr) &#123;<br>        var obj = &#123;&#125;,<br>          k, arr1 = [];<br>        for(var i = 0, len = arr.length; i &lt; len; i++) &#123;<br>          k = arr[i].date;//需要合并的字段<br>          if(obj[k])<br>            obj[k]++;<br>          else<br>            obj[k] = 1;<br>        &#125;<br>        console.log(obj)<br>        //保存结果&#123;el-&#x27;元素&#x27;，count-出现次数&#125;<br>        for(var o in obj) &#123;<br>          for(let i=0;i&lt;obj[o];i++)&#123;<br>            if(i===0)&#123;<br>              this.arr1.push(obj[o])<br>            &#125;else&#123;<br>              this.arr1.push(0)<br>            &#125;<br>          &#125;<br>        &#125;<br>        console.log(this.arr1);<br><br>      &#125;,<br><br><br>      objectSpanMethod(&#123; row, column, rowIndex, columnIndex &#125;) &#123;<br>        if (columnIndex === 0 ) &#123;<br>          let _row = this.arr1[rowIndex]<br>          let _col = this.arr1[rowIndex] &gt; 0 ? 1 : 0<br>          return [_row,_col]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;;<br>&lt;/script&gt;<br><br><br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"<meta>标签name=viewport详解","date":"2022-04-02T09:44:17.000Z","author":"Evan","index_img":"/img/bg8.jpg","_content":"\n\n\n# `<meta>`标签 name=\"viewport\" 详解\n\n\n\n今天给老板做的驾驶舱基本完成了，准备投到电视机大屏上看下效果，结果出现页面显示大小不对，于是看看是不是分辨率的问题，最后发现了我html页面的`<meta>`标签设置了不能缩放，最后修改成下面语句，成功显示。\n\n```html\n<meta name=\"viewport\" content=\"width=1680\"> \n```\n\n记个笔记...\n\n#### 什么是Viewport\n\n通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。\n\n#### Viewport 基础\n\n一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：\n `<meta name=”viewport” content=”width=device-width, initial-scale=1, maximum-scale=1″>`\n `width`：控制 viewport 的大小，可以指定的一个值，如果 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）\n `height`：和 width 相对应，指定高度\n `initial-scale`：初始缩放比例，也即是当页面第一次 load 的时候缩放比例\n `maximum-scale`：允许用户缩放到的最大比例\n `minimum-scale`：允许用户缩放到的最小比例\n `user-scalable`：用户是否可以手动缩放\n\n下面的一行代码可以让网页的宽度自动适应手机屏幕的宽度:\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n\n\n\n\n","source":"_posts/meta-标签name-viewport详解.md","raw":"---\ntitle: <meta>标签name=viewport详解\ndate: 2022-04-02 17:44:17\nauthor: Evan\nindex_img: /img/bg8.jpg\ncategories: 笔记\ntags:\n---\n\n\n\n# `<meta>`标签 name=\"viewport\" 详解\n\n\n\n今天给老板做的驾驶舱基本完成了，准备投到电视机大屏上看下效果，结果出现页面显示大小不对，于是看看是不是分辨率的问题，最后发现了我html页面的`<meta>`标签设置了不能缩放，最后修改成下面语句，成功显示。\n\n```html\n<meta name=\"viewport\" content=\"width=1680\"> \n```\n\n记个笔记...\n\n#### 什么是Viewport\n\n通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。\n\n#### Viewport 基础\n\n一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：\n `<meta name=”viewport” content=”width=device-width, initial-scale=1, maximum-scale=1″>`\n `width`：控制 viewport 的大小，可以指定的一个值，如果 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）\n `height`：和 width 相对应，指定高度\n `initial-scale`：初始缩放比例，也即是当页面第一次 load 的时候缩放比例\n `maximum-scale`：允许用户缩放到的最大比例\n `minimum-scale`：允许用户缩放到的最小比例\n `user-scalable`：用户是否可以手动缩放\n\n下面的一行代码可以让网页的宽度自动适应手机屏幕的宽度:\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n\n\n\n\n","slug":"meta-标签name-viewport详解","published":1,"updated":"2022-05-23T06:49:06.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3kwbmxk000f5cu3gzlr4qt8","content":"<h1 id=\"lt-meta-gt-标签-name-”viewport”-详解\"><a href=\"#lt-meta-gt-标签-name-”viewport”-详解\" class=\"headerlink\" title=\"&lt;meta&gt;标签 name=”viewport” 详解\"></a><code>&lt;meta&gt;</code>标签 name=”viewport” 详解</h1><p>今天给老板做的驾驶舱基本完成了，准备投到电视机大屏上看下效果，结果出现页面显示大小不对，于是看看是不是分辨率的问题，最后发现了我html页面的<code>&lt;meta&gt;</code>标签设置了不能缩放，最后修改成下面语句，成功显示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=1680&quot;</span>&gt;</span> <br></code></pre></td></tr></table></figure>\n\n<p>记个笔记…</p>\n<h4 id=\"什么是Viewport\"><a href=\"#什么是Viewport\" class=\"headerlink\" title=\"什么是Viewport\"></a>什么是Viewport</h4><p>通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。</p>\n<h4 id=\"Viewport-基础\"><a href=\"#Viewport-基础\" class=\"headerlink\" title=\"Viewport 基础\"></a>Viewport 基础</h4><p>一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：<br> <code>&lt;meta name=”viewport” content=”width=device-width, initial-scale=1, maximum-scale=1″&gt;</code><br> <code>width</code>：控制 viewport 的大小，可以指定的一个值，如果 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）<br> <code>height</code>：和 width 相对应，指定高度<br> <code>initial-scale</code>：初始缩放比例，也即是当页面第一次 load 的时候缩放比例<br> <code>maximum-scale</code>：允许用户缩放到的最大比例<br> <code>minimum-scale</code>：允许用户缩放到的最小比例<br> <code>user-scalable</code>：用户是否可以手动缩放</p>\n<p>下面的一行代码可以让网页的宽度自动适应手机屏幕的宽度:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"wordcount":1083,"excerpt":"","more":"<h1 id=\"lt-meta-gt-标签-name-”viewport”-详解\"><a href=\"#lt-meta-gt-标签-name-”viewport”-详解\" class=\"headerlink\" title=\"&lt;meta&gt;标签 name=”viewport” 详解\"></a><code>&lt;meta&gt;</code>标签 name=”viewport” 详解</h1><p>今天给老板做的驾驶舱基本完成了，准备投到电视机大屏上看下效果，结果出现页面显示大小不对，于是看看是不是分辨率的问题，最后发现了我html页面的<code>&lt;meta&gt;</code>标签设置了不能缩放，最后修改成下面语句，成功显示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=1680&quot;</span>&gt;</span> <br></code></pre></td></tr></table></figure>\n\n<p>记个笔记…</p>\n<h4 id=\"什么是Viewport\"><a href=\"#什么是Viewport\" class=\"headerlink\" title=\"什么是Viewport\"></a>什么是Viewport</h4><p>通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。</p>\n<h4 id=\"Viewport-基础\"><a href=\"#Viewport-基础\" class=\"headerlink\" title=\"Viewport 基础\"></a>Viewport 基础</h4><p>一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：<br> <code>&lt;meta name=”viewport” content=”width=device-width, initial-scale=1, maximum-scale=1″&gt;</code><br> <code>width</code>：控制 viewport 的大小，可以指定的一个值，如果 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）<br> <code>height</code>：和 width 相对应，指定高度<br> <code>initial-scale</code>：初始缩放比例，也即是当页面第一次 load 的时候缩放比例<br> <code>maximum-scale</code>：允许用户缩放到的最大比例<br> <code>minimum-scale</code>：允许用户缩放到的最小比例<br> <code>user-scalable</code>：用户是否可以手动缩放</p>\n<p>下面的一行代码可以让网页的宽度自动适应手机屏幕的宽度:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"动态代理","date":"2022-03-16T01:19:23.000Z","author":"Evan","index_img":"/img/bg4.jpg","_content":"\n***\n\n\n\n## 动态代理（理解）： 基于反射机制。\n\n### 1.什么是动态代理 ？ \t\t\t\n\n```tex\n\t使用jdk的反射机制，创建对象的能力， 创建的是代理类的对象。 而不用你创建类文件。不用写java文件。\n\t动态：在程序执行时，调用jdk提供的方法才能创建代理类的对象。\n    jdk动态代理，必须有接口，目标类必须实现接口， 没有接口时，需要使用cglib动态代理\n```\n### 2.知道动态代理能做什么 ？ \n\n```tex\n可以在不改变原来目标方法功能的前提下， 可以在代理中增强自己的功能代码。\n在程序开发中的意思：\n   比如：你所在的项目中，有一个功能是其他人（公司的其它部门，其它小组的人）写好的，你可以使用。\n\tGoNong.class ,  GoNong gn = new GoNong(), gn.print();\n你发现这个功能，现在还缺点， 不能完全满足我项目的需要。 我需要在gn.print()执行后，需要自己在增加代码。\n用代理实现 gn.print（）调用时， 增加自己代码， 而不用去改原来的 GoNong文件。\n```\n\n![](/img/java%E6%A1%86%E6%9E%B6/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.PNG)\n\n\n\n------------------------------------------------------------------------\n#### 1.代理\n  代购， 中介，换ip，商家等等\n\n  比如有一家美国的大学， 可以对全世界招生。 留学中介（代理）\n\n  留学中介（代理）： 帮助这家美国的学校招生，  中介是学校的代理， 中介是代替学校完成招生功能。\n     代理特点：\n\n          1. 中介和代理他们要做的事情是一致的：  招生。\n          2. 中介是学校代理， 学校是目标。\n          3. 家长---中介（学校介绍，办入学手续）----美国学校\n          4. 中介是代理，不能白干活，需要收取费用。\n          5. 代理不让你访问到目标。\n\n* 为什么要找中介 ？ \n\n\n 1. 中介是专业的， 方便\n 2. 家长现在不能自己去找学校。 家长没有能力访问学校。 或者美国学校不接收个人来访。\n\n&nbsp;\n买东西都是商家卖， 商家是某个商品的代理， 你个人买东西， 肯定不会让你接触到厂家的。\n\n#### 2.在开发中也会有这样的情况，你有a类， 本来是调用c类的方法， 完成某个功能。 但是c不让a调用。 \n\na -----不能调用 c的方法。\n在a 和 c 直接 创建一个 b 代理，    c让b访问。 \na --访问b---访问c\n\n\n```tex\n实际的例子：登录，注册有验证码， 验证码是手机短信。\n\n中国移动，联通能发短信。 \n\n中国移动，联通能有子公司，或者关联公司，他们面向社会提供短信的发送功能\n\n张三项目发送短信----子公司，或者关联公司-----中国移动， 联通\n```\n\n#### 3.使用代理模式的作用\n ```\n  1.功能增强： 在你原有的功能上，增加了额外的功能。 新增加的功能，叫做功能增强。\n  2.控制访问： 代理类不让你访问目标，例如商家不让用户访问厂家。\n ```\n\n\n#### 4.实现代理的方式\n\n##### 1.静态代理 ：\n\n* 1） 代理类是自己手工实现的，自己创建一个java类，表示代理类。\n\n* 2）同时你所要代理的目标类是确定的。\n\n\t特点： 1）实现简单  2）容易理解。\n\t缺点：\n\t 当你的项目中，目标类和代理类很多时候，有以下的缺点：\n\t\t1）当目标类增加了， 代理类可能也需要成倍的增加。 代理类数量过多。\n\t    2）当你的接口中功能增加了， 或者修改了，会影响众多的实现类，厂家类，代理都需要修改。影响比较多。\n\n模拟一个用户购买u盘的行为。\n\n用户是客户端类\n\t商家：代理，代理某个品牌的u盘。\n\t厂家：目标类。\n\n三者的关系： 用户（客户端）---商家（代理）---厂家（目标）\n\n商家和厂家都是卖u盘的，他们完成的功能是一致的，都是卖u盘。\n\n\n      实现步骤：\n    \t 1. 创建一个接口，定义卖u盘的方法， 表示你的厂家和商家做的事情。\n    \t 2. 创建厂家类，实现1步骤的接口\n    \t 3. 创建商家，就是代理，也需要实现1步骤中的接口。\n    \t 4. 创建客户端类，调用商家的方法买一个u盘。\n    \n      代理类完成的功能： \n    \t  1. 目标类中方法的调用\n    \t  2. 功能增强\n\n ####  2.动态代理\n​    在静态代理中目标类很多时候，可以使用动态代理，避免静态代理的缺点。 \n​\t 动态代理中目标类即使很多， 1）代理类数量可以很少， 2）当你修改了接口中的方法时，不会影响代理类。\n\n\t动态代理： 在程序执行过程中，使用jdk的反射机制，创建代理类对象， 并动态的指定要代理目标类。\n\t            换句话说： 动态代理是一种创建java对象的能力，让你不用创建TaoBao类，就能创建代理类对象。\n\t\n\t\t\t\t\t 在java中，要想创建对象：\n\t\t\t\t\t  1.创建类文件， java文件编译为class\n\t\t\t\t\t  2.使用构造方法，创建类的对象。\n\n\n    动态代理的实现： \n    \t1. jdk动态代理（理解）： 使用java反射包中的类和接口实现动态代理的功能。\n    \t\t反射包 java.lang.reflect , 里面有三个类 ： InvocationHandler , Method, Proxy.\n    \t2. cglib动态代理（了解）: \n    \tcglib是第三方的工具库， 创建代理对象。 \n    \tcglib的原理是继承， cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法， 实现功能的修改。\n    \t因为cglib是继承，重写方法，所以要求目标类不能是final的， 方法也不能是final的。\n    \tcglib的要求目标类比较宽松， 只要能继承就可以了。\n    \tcglib在很多的框架中使用，  比如 mybatis ，spring框架中都有使用。\n\n\n​                        \n* jdk动态代理：\n\n  1. 反射， Method类，表示方法。类中的方法。 通过Method可以执行某个方法。\n\n  2. jdk动态代理的实现\n     反射包 java.lang.reflect , 里面有三个类 ：\n\n     ` InvocationHandler `\n\n     `Method`\n\n     ` Proxy`\n\n     1).InvocationHandler 接口（调用处理器）：就一个方法invoke（）\n     invoke（）:表示代理对象要执行的功能代码。你的代理类要完成的功能就写在invoke()方法中。\n\n     \n\n     代理类完成的功能：\n      1. 调用目标方法，执行目标方法的功能\n\n       2. 功能增强，在目标方法调用时，增加功能。\n\n          \n\n           方法原型：\n\n```tex\n\t\t参数： Object proxy:jdk创建的代理对象，无需赋值。\n \t\t      Method method:目标类中的方法，jdk提供method对象的\n              Object[] args：目标类中方法的参数， jdk提供的。\n              public Object invoke(Object proxy, Method method, Object[] args)\n```\n\n InvocationHandler 接口：表示你的代理要干什么。\n\n​\t怎么用： 1.创建类实现接口InvocationHandler\n​\t                2.重写invoke（）方法， 把原来静态代理中代理类要完成的功能，写在这。          \n\n\n​                   2）Method类：表示方法的， 确切的说就是目标类中的方法。\n​    \t         作用：通过Method可以执行某个目标类的方法，Method.invoke();\n​    \t\t        method.invoke(目标对象，方法的参数)\n​    \t\t\t\t  Object ret = method.invoke(service2, \"李四\");\n​    \n​    \t    说明： method.invoke（）就是用来执行目标方法的，等同于静态代理中的\n​    \t\t         //向厂家发送订单，告诉厂家，我买了u盘，厂家发货\n​                  float price = factory.sell(amount); //厂家的价格。\n\n\n\t\t 3）Proxy类：核心的对象，创建代理对象。之前创建对象都是 new 类的构造方法()\n\t\t       现在我们是使用Proxy类的方法，代替new的使用。 \n\t\n\t\t\t方法： 静态方法 newProxyInstance() \n\t\t\t作用是： 创建代理对象， 等同于静态代理中的TaoBao taoBao = new TaoBao();\n\n\n         参数：\n    \t\t 1. ClassLoader loader 类加载器，负责向内存中加载对象的。 使用反射获取对象的ClassLoader\n    \t\t      类a , a.getCalss().getClassLoader(),  目标对象的类加载器\n    \t    2. Class<?>[] interfaces： 接口， 目标对象实现的接口，也是反射获取的。\n          3. InvocationHandler h : 我们自己写的，代理类要完成的功能。 \n    \n    \t\t返回值：就是代理对象\n    \n    \t\tpublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n\n\n​\t\t\t\t\t\t\t\t\t\n  3. 实现动态代理的步骤：\n\t1. 创建接口，定义目标类要完成的功能\n\t 2. 创建目标类实现接口\n\t 3. 创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能\n\t     1.调用目标方法\n\t\t  2.增强功能\n\n\t 4.使用Proxy类的静态方法，创建代理对象。 并把返回值转为接口类型。\n","source":"_posts/动态代理.md","raw":"---\ntitle: 动态代理\ncategories: JAVA框架\ndate: 2022-03-16 09:19:23\nauthor: Evan\nindex_img: /img/bg4.jpg\ntags:\n- 动态代理\n---\n\n***\n\n\n\n## 动态代理（理解）： 基于反射机制。\n\n### 1.什么是动态代理 ？ \t\t\t\n\n```tex\n\t使用jdk的反射机制，创建对象的能力， 创建的是代理类的对象。 而不用你创建类文件。不用写java文件。\n\t动态：在程序执行时，调用jdk提供的方法才能创建代理类的对象。\n    jdk动态代理，必须有接口，目标类必须实现接口， 没有接口时，需要使用cglib动态代理\n```\n### 2.知道动态代理能做什么 ？ \n\n```tex\n可以在不改变原来目标方法功能的前提下， 可以在代理中增强自己的功能代码。\n在程序开发中的意思：\n   比如：你所在的项目中，有一个功能是其他人（公司的其它部门，其它小组的人）写好的，你可以使用。\n\tGoNong.class ,  GoNong gn = new GoNong(), gn.print();\n你发现这个功能，现在还缺点， 不能完全满足我项目的需要。 我需要在gn.print()执行后，需要自己在增加代码。\n用代理实现 gn.print（）调用时， 增加自己代码， 而不用去改原来的 GoNong文件。\n```\n\n![](/img/java%E6%A1%86%E6%9E%B6/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.PNG)\n\n\n\n------------------------------------------------------------------------\n#### 1.代理\n  代购， 中介，换ip，商家等等\n\n  比如有一家美国的大学， 可以对全世界招生。 留学中介（代理）\n\n  留学中介（代理）： 帮助这家美国的学校招生，  中介是学校的代理， 中介是代替学校完成招生功能。\n     代理特点：\n\n          1. 中介和代理他们要做的事情是一致的：  招生。\n          2. 中介是学校代理， 学校是目标。\n          3. 家长---中介（学校介绍，办入学手续）----美国学校\n          4. 中介是代理，不能白干活，需要收取费用。\n          5. 代理不让你访问到目标。\n\n* 为什么要找中介 ？ \n\n\n 1. 中介是专业的， 方便\n 2. 家长现在不能自己去找学校。 家长没有能力访问学校。 或者美国学校不接收个人来访。\n\n&nbsp;\n买东西都是商家卖， 商家是某个商品的代理， 你个人买东西， 肯定不会让你接触到厂家的。\n\n#### 2.在开发中也会有这样的情况，你有a类， 本来是调用c类的方法， 完成某个功能。 但是c不让a调用。 \n\na -----不能调用 c的方法。\n在a 和 c 直接 创建一个 b 代理，    c让b访问。 \na --访问b---访问c\n\n\n```tex\n实际的例子：登录，注册有验证码， 验证码是手机短信。\n\n中国移动，联通能发短信。 \n\n中国移动，联通能有子公司，或者关联公司，他们面向社会提供短信的发送功能\n\n张三项目发送短信----子公司，或者关联公司-----中国移动， 联通\n```\n\n#### 3.使用代理模式的作用\n ```\n  1.功能增强： 在你原有的功能上，增加了额外的功能。 新增加的功能，叫做功能增强。\n  2.控制访问： 代理类不让你访问目标，例如商家不让用户访问厂家。\n ```\n\n\n#### 4.实现代理的方式\n\n##### 1.静态代理 ：\n\n* 1） 代理类是自己手工实现的，自己创建一个java类，表示代理类。\n\n* 2）同时你所要代理的目标类是确定的。\n\n\t特点： 1）实现简单  2）容易理解。\n\t缺点：\n\t 当你的项目中，目标类和代理类很多时候，有以下的缺点：\n\t\t1）当目标类增加了， 代理类可能也需要成倍的增加。 代理类数量过多。\n\t    2）当你的接口中功能增加了， 或者修改了，会影响众多的实现类，厂家类，代理都需要修改。影响比较多。\n\n模拟一个用户购买u盘的行为。\n\n用户是客户端类\n\t商家：代理，代理某个品牌的u盘。\n\t厂家：目标类。\n\n三者的关系： 用户（客户端）---商家（代理）---厂家（目标）\n\n商家和厂家都是卖u盘的，他们完成的功能是一致的，都是卖u盘。\n\n\n      实现步骤：\n    \t 1. 创建一个接口，定义卖u盘的方法， 表示你的厂家和商家做的事情。\n    \t 2. 创建厂家类，实现1步骤的接口\n    \t 3. 创建商家，就是代理，也需要实现1步骤中的接口。\n    \t 4. 创建客户端类，调用商家的方法买一个u盘。\n    \n      代理类完成的功能： \n    \t  1. 目标类中方法的调用\n    \t  2. 功能增强\n\n ####  2.动态代理\n​    在静态代理中目标类很多时候，可以使用动态代理，避免静态代理的缺点。 \n​\t 动态代理中目标类即使很多， 1）代理类数量可以很少， 2）当你修改了接口中的方法时，不会影响代理类。\n\n\t动态代理： 在程序执行过程中，使用jdk的反射机制，创建代理类对象， 并动态的指定要代理目标类。\n\t            换句话说： 动态代理是一种创建java对象的能力，让你不用创建TaoBao类，就能创建代理类对象。\n\t\n\t\t\t\t\t 在java中，要想创建对象：\n\t\t\t\t\t  1.创建类文件， java文件编译为class\n\t\t\t\t\t  2.使用构造方法，创建类的对象。\n\n\n    动态代理的实现： \n    \t1. jdk动态代理（理解）： 使用java反射包中的类和接口实现动态代理的功能。\n    \t\t反射包 java.lang.reflect , 里面有三个类 ： InvocationHandler , Method, Proxy.\n    \t2. cglib动态代理（了解）: \n    \tcglib是第三方的工具库， 创建代理对象。 \n    \tcglib的原理是继承， cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法， 实现功能的修改。\n    \t因为cglib是继承，重写方法，所以要求目标类不能是final的， 方法也不能是final的。\n    \tcglib的要求目标类比较宽松， 只要能继承就可以了。\n    \tcglib在很多的框架中使用，  比如 mybatis ，spring框架中都有使用。\n\n\n​                        \n* jdk动态代理：\n\n  1. 反射， Method类，表示方法。类中的方法。 通过Method可以执行某个方法。\n\n  2. jdk动态代理的实现\n     反射包 java.lang.reflect , 里面有三个类 ：\n\n     ` InvocationHandler `\n\n     `Method`\n\n     ` Proxy`\n\n     1).InvocationHandler 接口（调用处理器）：就一个方法invoke（）\n     invoke（）:表示代理对象要执行的功能代码。你的代理类要完成的功能就写在invoke()方法中。\n\n     \n\n     代理类完成的功能：\n      1. 调用目标方法，执行目标方法的功能\n\n       2. 功能增强，在目标方法调用时，增加功能。\n\n          \n\n           方法原型：\n\n```tex\n\t\t参数： Object proxy:jdk创建的代理对象，无需赋值。\n \t\t      Method method:目标类中的方法，jdk提供method对象的\n              Object[] args：目标类中方法的参数， jdk提供的。\n              public Object invoke(Object proxy, Method method, Object[] args)\n```\n\n InvocationHandler 接口：表示你的代理要干什么。\n\n​\t怎么用： 1.创建类实现接口InvocationHandler\n​\t                2.重写invoke（）方法， 把原来静态代理中代理类要完成的功能，写在这。          \n\n\n​                   2）Method类：表示方法的， 确切的说就是目标类中的方法。\n​    \t         作用：通过Method可以执行某个目标类的方法，Method.invoke();\n​    \t\t        method.invoke(目标对象，方法的参数)\n​    \t\t\t\t  Object ret = method.invoke(service2, \"李四\");\n​    \n​    \t    说明： method.invoke（）就是用来执行目标方法的，等同于静态代理中的\n​    \t\t         //向厂家发送订单，告诉厂家，我买了u盘，厂家发货\n​                  float price = factory.sell(amount); //厂家的价格。\n\n\n\t\t 3）Proxy类：核心的对象，创建代理对象。之前创建对象都是 new 类的构造方法()\n\t\t       现在我们是使用Proxy类的方法，代替new的使用。 \n\t\n\t\t\t方法： 静态方法 newProxyInstance() \n\t\t\t作用是： 创建代理对象， 等同于静态代理中的TaoBao taoBao = new TaoBao();\n\n\n         参数：\n    \t\t 1. ClassLoader loader 类加载器，负责向内存中加载对象的。 使用反射获取对象的ClassLoader\n    \t\t      类a , a.getCalss().getClassLoader(),  目标对象的类加载器\n    \t    2. Class<?>[] interfaces： 接口， 目标对象实现的接口，也是反射获取的。\n          3. InvocationHandler h : 我们自己写的，代理类要完成的功能。 \n    \n    \t\t返回值：就是代理对象\n    \n    \t\tpublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n\n\n​\t\t\t\t\t\t\t\t\t\n  3. 实现动态代理的步骤：\n\t1. 创建接口，定义目标类要完成的功能\n\t 2. 创建目标类实现接口\n\t 3. 创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能\n\t     1.调用目标方法\n\t\t  2.增强功能\n\n\t 4.使用Proxy类的静态方法，创建代理对象。 并把返回值转为接口类型。\n","slug":"动态代理","published":1,"updated":"2022-05-30T08:52:58.173Z","_id":"cl3kwbmxl000h5cu3hlt72da3","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h2 id=\"动态代理（理解）：-基于反射机制。\"><a href=\"#动态代理（理解）：-基于反射机制。\" class=\"headerlink\" title=\"动态代理（理解）： 基于反射机制。\"></a>动态代理（理解）： 基于反射机制。</h2><h3 id=\"1-什么是动态代理-？\"><a href=\"#1-什么是动态代理-？\" class=\"headerlink\" title=\"1.什么是动态代理 ？\"></a>1.什么是动态代理 ？</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">使用jdk的反射机制，创建对象的能力， 创建的是代理类的对象。 而不用你创建类文件。不用写java文件。<br>动态：在程序执行时，调用jdk提供的方法才能创建代理类的对象。<br>   jdk动态代理，必须有接口，目标类必须实现接口， 没有接口时，需要使用cglib动态代理<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-知道动态代理能做什么-？\"><a href=\"#2-知道动态代理能做什么-？\" class=\"headerlink\" title=\"2.知道动态代理能做什么 ？\"></a>2.知道动态代理能做什么 ？</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">可以在不改变原来目标方法功能的前提下， 可以在代理中增强自己的功能代码。<br>在程序开发中的意思：<br>   比如：你所在的项目中，有一个功能是其他人（公司的其它部门，其它小组的人）写好的，你可以使用。<br>\tGoNong.class ,  GoNong gn = new GoNong(), gn.print();<br>你发现这个功能，现在还缺点， 不能完全满足我项目的需要。 我需要在gn.print()执行后，需要自己在增加代码。<br>用代理实现 gn.print（）调用时， 增加自己代码， 而不用去改原来的 GoNong文件。<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/java%E6%A1%86%E6%9E%B6/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.PNG\"></p>\n<hr>\n<h4 id=\"1-代理\"><a href=\"#1-代理\" class=\"headerlink\" title=\"1.代理\"></a>1.代理</h4><p>  代购， 中介，换ip，商家等等</p>\n<p>  比如有一家美国的大学， 可以对全世界招生。 留学中介（代理）</p>\n<p>  留学中介（代理）： 帮助这家美国的学校招生，  中介是学校的代理， 中介是代替学校完成招生功能。<br>     代理特点：</p>\n<pre><code class=\"hljs\">      1. 中介和代理他们要做的事情是一致的：  招生。\n      2. 中介是学校代理， 学校是目标。\n      3. 家长---中介（学校介绍，办入学手续）----美国学校\n      4. 中介是代理，不能白干活，需要收取费用。\n      5. 代理不让你访问到目标。\n</code></pre>\n<ul>\n<li>为什么要找中介 ？ </li>\n</ul>\n<ol>\n<li>中介是专业的， 方便</li>\n<li>家长现在不能自己去找学校。 家长没有能力访问学校。 或者美国学校不接收个人来访。</li>\n</ol>\n<p>&nbsp;<br>买东西都是商家卖， 商家是某个商品的代理， 你个人买东西， 肯定不会让你接触到厂家的。</p>\n<h4 id=\"2-在开发中也会有这样的情况，你有a类，-本来是调用c类的方法，-完成某个功能。-但是c不让a调用。\"><a href=\"#2-在开发中也会有这样的情况，你有a类，-本来是调用c类的方法，-完成某个功能。-但是c不让a调用。\" class=\"headerlink\" title=\"2.在开发中也会有这样的情况，你有a类， 本来是调用c类的方法， 完成某个功能。 但是c不让a调用。\"></a>2.在开发中也会有这样的情况，你有a类， 本来是调用c类的方法， 完成某个功能。 但是c不让a调用。</h4><p>a —–不能调用 c的方法。<br>在a 和 c 直接 创建一个 b 代理，    c让b访问。<br>a –访问b—访问c</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">实际的例子：登录，注册有验证码， 验证码是手机短信。<br><br>中国移动，联通能发短信。 <br><br>中国移动，联通能有子公司，或者关联公司，他们面向社会提供短信的发送功能<br><br>张三项目发送短信----子公司，或者关联公司-----中国移动， 联通<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-使用代理模式的作用\"><a href=\"#3-使用代理模式的作用\" class=\"headerlink\" title=\"3.使用代理模式的作用\"></a>3.使用代理模式的作用</h4> <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1.功能增强： 在你原有的功能上，增加了额外的功能。 新增加的功能，叫做功能增强。<br>2.控制访问： 代理类不让你访问目标，例如商家不让用户访问厂家。<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-实现代理的方式\"><a href=\"#4-实现代理的方式\" class=\"headerlink\" title=\"4.实现代理的方式\"></a>4.实现代理的方式</h4><h5 id=\"1-静态代理-：\"><a href=\"#1-静态代理-：\" class=\"headerlink\" title=\"1.静态代理 ：\"></a>1.静态代理 ：</h5><ul>\n<li><p>1） 代理类是自己手工实现的，自己创建一个java类，表示代理类。</p>\n</li>\n<li><p>2）同时你所要代理的目标类是确定的。</p>\n<p>  特点： 1）实现简单  2）容易理解。<br>  缺点：<br>   当你的项目中，目标类和代理类很多时候，有以下的缺点：</p>\n<pre><code class=\"hljs\">  1）当目标类增加了， 代理类可能也需要成倍的增加。 代理类数量过多。\n  2）当你的接口中功能增加了， 或者修改了，会影响众多的实现类，厂家类，代理都需要修改。影响比较多。\n</code></pre>\n</li>\n</ul>\n<p>模拟一个用户购买u盘的行为。</p>\n<p>用户是客户端类<br>    商家：代理，代理某个品牌的u盘。<br>    厂家：目标类。</p>\n<p>三者的关系： 用户（客户端）—商家（代理）—厂家（目标）</p>\n<p>商家和厂家都是卖u盘的，他们完成的功能是一致的，都是卖u盘。</p>\n<pre><code class=\"hljs\">  实现步骤：\n     1. 创建一个接口，定义卖u盘的方法， 表示你的厂家和商家做的事情。\n     2. 创建厂家类，实现1步骤的接口\n     3. 创建商家，就是代理，也需要实现1步骤中的接口。\n     4. 创建客户端类，调用商家的方法买一个u盘。\n\n  代理类完成的功能： \n      1. 目标类中方法的调用\n      2. 功能增强\n</code></pre>\n<h4 id=\"2-动态代理\"><a href=\"#2-动态代理\" class=\"headerlink\" title=\"2.动态代理\"></a>2.动态代理</h4><p>​    在静态代理中目标类很多时候，可以使用动态代理，避免静态代理的缺点。<br>​     动态代理中目标类即使很多， 1）代理类数量可以很少， 2）当你修改了接口中的方法时，不会影响代理类。</p>\n<pre><code class=\"hljs\">动态代理： 在程序执行过程中，使用jdk的反射机制，创建代理类对象， 并动态的指定要代理目标类。\n            换句话说： 动态代理是一种创建java对象的能力，让你不用创建TaoBao类，就能创建代理类对象。\n\n                 在java中，要想创建对象：\n                  1.创建类文件， java文件编译为class\n                  2.使用构造方法，创建类的对象。\n\n\n动态代理的实现： \n    1. jdk动态代理（理解）： 使用java反射包中的类和接口实现动态代理的功能。\n        反射包 java.lang.reflect , 里面有三个类 ： InvocationHandler , Method, Proxy.\n    2. cglib动态代理（了解）: \n    cglib是第三方的工具库， 创建代理对象。 \n    cglib的原理是继承， cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法， 实现功能的修改。\n    因为cglib是继承，重写方法，所以要求目标类不能是final的， 方法也不能是final的。\n    cglib的要求目标类比较宽松， 只要能继承就可以了。\n    cglib在很多的框架中使用，  比如 mybatis ，spring框架中都有使用。\n</code></pre>\n<p>​                        </p>\n<ul>\n<li><p>jdk动态代理：</p>\n<ol>\n<li><p>反射， Method类，表示方法。类中的方法。 通过Method可以执行某个方法。</p>\n</li>\n<li><p>jdk动态代理的实现<br>反射包 java.lang.reflect , 里面有三个类 ：</p>\n<p><code>InvocationHandler</code></p>\n<p><code>Method</code></p>\n<p><code> Proxy</code></p>\n<p>1).InvocationHandler 接口（调用处理器）：就一个方法invoke（）<br>invoke（）:表示代理对象要执行的功能代码。你的代理类要完成的功能就写在invoke()方法中。</p>\n<p>代理类完成的功能：</p>\n<ol>\n<li><p>调用目标方法，执行目标方法的功能</p>\n</li>\n<li><p>功能增强，在目标方法调用时，增加功能。</p>\n<p> 方法原型：</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">参数： Object proxy:jdk创建的代理对象，无需赋值。<br>\t      Method method:目标类中的方法，jdk提供method对象的<br>            Object[] args：目标类中方法的参数， jdk提供的。<br>            public Object invoke(Object proxy, Method method, Object[] args)<br></code></pre></td></tr></table></figure>\n\n<p> InvocationHandler 接口：表示你的代理要干什么。</p>\n<p>​    怎么用： 1.创建类实现接口InvocationHandler<br>​                    2.重写invoke（）方法， 把原来静态代理中代理类要完成的功能，写在这。          </p>\n<p>​                   2）Method类：表示方法的， 确切的说就是目标类中的方法。<br>​                 作用：通过Method可以执行某个目标类的方法，Method.invoke();<br>​                    method.invoke(目标对象，方法的参数)<br>​                      Object ret = method.invoke(service2, “李四”);<br>​<br>​            说明： method.invoke（）就是用来执行目标方法的，等同于静态代理中的<br>​                     //向厂家发送订单，告诉厂家，我买了u盘，厂家发货<br>​                  float price = factory.sell(amount); //厂家的价格。</p>\n<pre><code class=\"hljs\">     3）Proxy类：核心的对象，创建代理对象。之前创建对象都是 new 类的构造方法()\n           现在我们是使用Proxy类的方法，代替new的使用。 \n\n        方法： 静态方法 newProxyInstance() \n        作用是： 创建代理对象， 等同于静态代理中的TaoBao taoBao = new TaoBao();\n\n\n     参数：\n         1. ClassLoader loader 类加载器，负责向内存中加载对象的。 使用反射获取对象的ClassLoader\n              类a , a.getCalss().getClassLoader(),  目标对象的类加载器\n        2. Class&lt;?&gt;[] interfaces： 接口， 目标对象实现的接口，也是反射获取的。\n      3. InvocationHandler h : 我们自己写的，代理类要完成的功能。 \n\n        返回值：就是代理对象\n\n        public static Object newProxyInstance(ClassLoader loader,\n                                      Class&lt;?&gt;[] interfaces,\n                                      InvocationHandler h)\n</code></pre>\n<p>​<br>  3. 实现动态代理的步骤：<br>    1. 创建接口，定义目标类要完成的功能<br>     2. 创建目标类实现接口<br>     3. 创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能<br>         1.调用目标方法<br>          2.增强功能</p>\n<pre><code class=\"hljs\"> 4.使用Proxy类的静态方法，创建代理对象。 并把返回值转为接口类型。\n</code></pre>\n","site":{"data":{}},"wordcount":3280,"excerpt":"","more":"<hr>\n<h2 id=\"动态代理（理解）：-基于反射机制。\"><a href=\"#动态代理（理解）：-基于反射机制。\" class=\"headerlink\" title=\"动态代理（理解）： 基于反射机制。\"></a>动态代理（理解）： 基于反射机制。</h2><h3 id=\"1-什么是动态代理-？\"><a href=\"#1-什么是动态代理-？\" class=\"headerlink\" title=\"1.什么是动态代理 ？\"></a>1.什么是动态代理 ？</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">使用jdk的反射机制，创建对象的能力， 创建的是代理类的对象。 而不用你创建类文件。不用写java文件。<br>动态：在程序执行时，调用jdk提供的方法才能创建代理类的对象。<br>   jdk动态代理，必须有接口，目标类必须实现接口， 没有接口时，需要使用cglib动态代理<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-知道动态代理能做什么-？\"><a href=\"#2-知道动态代理能做什么-？\" class=\"headerlink\" title=\"2.知道动态代理能做什么 ？\"></a>2.知道动态代理能做什么 ？</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">可以在不改变原来目标方法功能的前提下， 可以在代理中增强自己的功能代码。<br>在程序开发中的意思：<br>   比如：你所在的项目中，有一个功能是其他人（公司的其它部门，其它小组的人）写好的，你可以使用。<br>\tGoNong.class ,  GoNong gn = new GoNong(), gn.print();<br>你发现这个功能，现在还缺点， 不能完全满足我项目的需要。 我需要在gn.print()执行后，需要自己在增加代码。<br>用代理实现 gn.print（）调用时， 增加自己代码， 而不用去改原来的 GoNong文件。<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/java%E6%A1%86%E6%9E%B6/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.PNG\"></p>\n<hr>\n<h4 id=\"1-代理\"><a href=\"#1-代理\" class=\"headerlink\" title=\"1.代理\"></a>1.代理</h4><p>  代购， 中介，换ip，商家等等</p>\n<p>  比如有一家美国的大学， 可以对全世界招生。 留学中介（代理）</p>\n<p>  留学中介（代理）： 帮助这家美国的学校招生，  中介是学校的代理， 中介是代替学校完成招生功能。<br>     代理特点：</p>\n<pre><code>      1. 中介和代理他们要做的事情是一致的：  招生。\n      2. 中介是学校代理， 学校是目标。\n      3. 家长---中介（学校介绍，办入学手续）----美国学校\n      4. 中介是代理，不能白干活，需要收取费用。\n      5. 代理不让你访问到目标。\n</code></pre>\n<ul>\n<li>为什么要找中介 ？ </li>\n</ul>\n<ol>\n<li>中介是专业的， 方便</li>\n<li>家长现在不能自己去找学校。 家长没有能力访问学校。 或者美国学校不接收个人来访。</li>\n</ol>\n<p>&nbsp;<br>买东西都是商家卖， 商家是某个商品的代理， 你个人买东西， 肯定不会让你接触到厂家的。</p>\n<h4 id=\"2-在开发中也会有这样的情况，你有a类，-本来是调用c类的方法，-完成某个功能。-但是c不让a调用。\"><a href=\"#2-在开发中也会有这样的情况，你有a类，-本来是调用c类的方法，-完成某个功能。-但是c不让a调用。\" class=\"headerlink\" title=\"2.在开发中也会有这样的情况，你有a类， 本来是调用c类的方法， 完成某个功能。 但是c不让a调用。\"></a>2.在开发中也会有这样的情况，你有a类， 本来是调用c类的方法， 完成某个功能。 但是c不让a调用。</h4><p>a —–不能调用 c的方法。<br>在a 和 c 直接 创建一个 b 代理，    c让b访问。<br>a –访问b—访问c</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">实际的例子：登录，注册有验证码， 验证码是手机短信。<br><br>中国移动，联通能发短信。 <br><br>中国移动，联通能有子公司，或者关联公司，他们面向社会提供短信的发送功能<br><br>张三项目发送短信----子公司，或者关联公司-----中国移动， 联通<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-使用代理模式的作用\"><a href=\"#3-使用代理模式的作用\" class=\"headerlink\" title=\"3.使用代理模式的作用\"></a>3.使用代理模式的作用</h4> <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1.功能增强： 在你原有的功能上，增加了额外的功能。 新增加的功能，叫做功能增强。<br>2.控制访问： 代理类不让你访问目标，例如商家不让用户访问厂家。<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"4-实现代理的方式\"><a href=\"#4-实现代理的方式\" class=\"headerlink\" title=\"4.实现代理的方式\"></a>4.实现代理的方式</h4><h5 id=\"1-静态代理-：\"><a href=\"#1-静态代理-：\" class=\"headerlink\" title=\"1.静态代理 ：\"></a>1.静态代理 ：</h5><ul>\n<li><p>1） 代理类是自己手工实现的，自己创建一个java类，表示代理类。</p>\n</li>\n<li><p>2）同时你所要代理的目标类是确定的。</p>\n<p>  特点： 1）实现简单  2）容易理解。<br>  缺点：<br>   当你的项目中，目标类和代理类很多时候，有以下的缺点：</p>\n<pre><code>  1）当目标类增加了， 代理类可能也需要成倍的增加。 代理类数量过多。\n  2）当你的接口中功能增加了， 或者修改了，会影响众多的实现类，厂家类，代理都需要修改。影响比较多。\n</code></pre>\n</li>\n</ul>\n<p>模拟一个用户购买u盘的行为。</p>\n<p>用户是客户端类<br>    商家：代理，代理某个品牌的u盘。<br>    厂家：目标类。</p>\n<p>三者的关系： 用户（客户端）—商家（代理）—厂家（目标）</p>\n<p>商家和厂家都是卖u盘的，他们完成的功能是一致的，都是卖u盘。</p>\n<pre><code>  实现步骤：\n     1. 创建一个接口，定义卖u盘的方法， 表示你的厂家和商家做的事情。\n     2. 创建厂家类，实现1步骤的接口\n     3. 创建商家，就是代理，也需要实现1步骤中的接口。\n     4. 创建客户端类，调用商家的方法买一个u盘。\n\n  代理类完成的功能： \n      1. 目标类中方法的调用\n      2. 功能增强\n</code></pre>\n<h4 id=\"2-动态代理\"><a href=\"#2-动态代理\" class=\"headerlink\" title=\"2.动态代理\"></a>2.动态代理</h4><p>​    在静态代理中目标类很多时候，可以使用动态代理，避免静态代理的缺点。<br>​     动态代理中目标类即使很多， 1）代理类数量可以很少， 2）当你修改了接口中的方法时，不会影响代理类。</p>\n<pre><code>动态代理： 在程序执行过程中，使用jdk的反射机制，创建代理类对象， 并动态的指定要代理目标类。\n            换句话说： 动态代理是一种创建java对象的能力，让你不用创建TaoBao类，就能创建代理类对象。\n\n                 在java中，要想创建对象：\n                  1.创建类文件， java文件编译为class\n                  2.使用构造方法，创建类的对象。\n\n\n动态代理的实现： \n    1. jdk动态代理（理解）： 使用java反射包中的类和接口实现动态代理的功能。\n        反射包 java.lang.reflect , 里面有三个类 ： InvocationHandler , Method, Proxy.\n    2. cglib动态代理（了解）: \n    cglib是第三方的工具库， 创建代理对象。 \n    cglib的原理是继承， cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法， 实现功能的修改。\n    因为cglib是继承，重写方法，所以要求目标类不能是final的， 方法也不能是final的。\n    cglib的要求目标类比较宽松， 只要能继承就可以了。\n    cglib在很多的框架中使用，  比如 mybatis ，spring框架中都有使用。\n</code></pre>\n<p>​                        </p>\n<ul>\n<li><p>jdk动态代理：</p>\n<ol>\n<li><p>反射， Method类，表示方法。类中的方法。 通过Method可以执行某个方法。</p>\n</li>\n<li><p>jdk动态代理的实现<br>反射包 java.lang.reflect , 里面有三个类 ：</p>\n<p><code>InvocationHandler</code></p>\n<p><code>Method</code></p>\n<p><code> Proxy</code></p>\n<p>1).InvocationHandler 接口（调用处理器）：就一个方法invoke（）<br>invoke（）:表示代理对象要执行的功能代码。你的代理类要完成的功能就写在invoke()方法中。</p>\n<p>代理类完成的功能：</p>\n<ol>\n<li><p>调用目标方法，执行目标方法的功能</p>\n</li>\n<li><p>功能增强，在目标方法调用时，增加功能。</p>\n<p> 方法原型：</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\">参数： Object proxy:jdk创建的代理对象，无需赋值。<br>\t      Method method:目标类中的方法，jdk提供method对象的<br>            Object[] args：目标类中方法的参数， jdk提供的。<br>            public Object invoke(Object proxy, Method method, Object[] args)<br></code></pre></td></tr></table></figure>\n\n<p> InvocationHandler 接口：表示你的代理要干什么。</p>\n<p>​    怎么用： 1.创建类实现接口InvocationHandler<br>​                    2.重写invoke（）方法， 把原来静态代理中代理类要完成的功能，写在这。          </p>\n<p>​                   2）Method类：表示方法的， 确切的说就是目标类中的方法。<br>​                 作用：通过Method可以执行某个目标类的方法，Method.invoke();<br>​                    method.invoke(目标对象，方法的参数)<br>​                      Object ret = method.invoke(service2, “李四”);<br>​<br>​            说明： method.invoke（）就是用来执行目标方法的，等同于静态代理中的<br>​                     //向厂家发送订单，告诉厂家，我买了u盘，厂家发货<br>​                  float price = factory.sell(amount); //厂家的价格。</p>\n<pre><code>     3）Proxy类：核心的对象，创建代理对象。之前创建对象都是 new 类的构造方法()\n           现在我们是使用Proxy类的方法，代替new的使用。 \n\n        方法： 静态方法 newProxyInstance() \n        作用是： 创建代理对象， 等同于静态代理中的TaoBao taoBao = new TaoBao();\n\n\n     参数：\n         1. ClassLoader loader 类加载器，负责向内存中加载对象的。 使用反射获取对象的ClassLoader\n              类a , a.getCalss().getClassLoader(),  目标对象的类加载器\n        2. Class&lt;?&gt;[] interfaces： 接口， 目标对象实现的接口，也是反射获取的。\n      3. InvocationHandler h : 我们自己写的，代理类要完成的功能。 \n\n        返回值：就是代理对象\n\n        public static Object newProxyInstance(ClassLoader loader,\n                                      Class&lt;?&gt;[] interfaces,\n                                      InvocationHandler h)\n</code></pre>\n<p>​<br>  3. 实现动态代理的步骤：<br>    1. 创建接口，定义目标类要完成的功能<br>     2. 创建目标类实现接口<br>     3. 创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能<br>         1.调用目标方法<br>          2.增强功能</p>\n<pre><code> 4.使用Proxy类的静态方法，创建代理对象。 并把返回值转为接口类型。\n</code></pre>\n"},{"title":"页面打印表格换页问题","date":"2022-05-18T07:55:29.000Z","author":"Evan","_content":"\n\n\n\n\n## 打印HTML页面时，表格table过长导致分页错行问题\n\n在打印一个html页面时，会出现table数据过长，需要分多个页面打印，这时候会出现一行切成两行，导致表格行错乱。\n\n\n\n## 解决办法\n\n可以在媒体打印中添加下面几行代码\n\n```html\n<style>\n@media print\n{\n  table { page-break-after:auto }\n  tr    { page-break-inside:avoid; page-break-after:auto }\n  td    { page-break-inside:avoid; page-break-after:auto }\n  thead { display:table-header-group }//表格的行头\n  tfoot { display:table-footer-group } //表格的行尾\n}\n</style>\n```\n\n最后会发现表格会根据打印页面的大小进行分行，不会出现一行数据被分成两页的情况了。\n","source":"_posts/页面打印表格换页问题.md","raw":"---\ntitle: 页面打印表格换页问题\ndate: 2022-05-18 15:55:29\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n\n\n\n\n## 打印HTML页面时，表格table过长导致分页错行问题\n\n在打印一个html页面时，会出现table数据过长，需要分多个页面打印，这时候会出现一行切成两行，导致表格行错乱。\n\n\n\n## 解决办法\n\n可以在媒体打印中添加下面几行代码\n\n```html\n<style>\n@media print\n{\n  table { page-break-after:auto }\n  tr    { page-break-inside:avoid; page-break-after:auto }\n  td    { page-break-inside:avoid; page-break-after:auto }\n  thead { display:table-header-group }//表格的行头\n  tfoot { display:table-footer-group } //表格的行尾\n}\n</style>\n```\n\n最后会发现表格会根据打印页面的大小进行分行，不会出现一行数据被分成两页的情况了。\n","slug":"页面打印表格换页问题","published":1,"updated":"2022-05-23T06:50:13.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3kwbmxn000m5cu34l3k884q","content":"<h2 id=\"打印HTML页面时，表格table过长导致分页错行问题\"><a href=\"#打印HTML页面时，表格table过长导致分页错行问题\" class=\"headerlink\" title=\"打印HTML页面时，表格table过长导致分页错行问题\"></a>打印HTML页面时，表格table过长导致分页错行问题</h2><p>在打印一个html页面时，会出现table数据过长，需要分多个页面打印，这时候会出现一行切成两行，导致表格行错乱。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>可以在媒体打印中添加下面几行代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-keyword\">@media</span> print</span><br><span class=\"language-css\">&#123;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">table</span> &#123; <span class=\"hljs-attribute\">page-break-after</span>:auto &#125;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">tr</span>    &#123; <span class=\"hljs-attribute\">page-break-inside</span>:avoid; <span class=\"hljs-attribute\">page-break-after</span>:auto &#125;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">td</span>    &#123; <span class=\"hljs-attribute\">page-break-inside</span>:avoid; <span class=\"hljs-attribute\">page-break-after</span>:auto &#125;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">thead</span> &#123; <span class=\"hljs-attribute\">display</span>:table-header-group &#125;//表格的行头</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">tfoot</span> &#123; <span class=\"hljs-attribute\">display</span>:table-footer-group &#125; //表格的行尾</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>最后会发现表格会根据打印页面的大小进行分行，不会出现一行数据被分成两页的情况了。</p>\n","site":{"data":{}},"wordcount":461,"excerpt":"","more":"<h2 id=\"打印HTML页面时，表格table过长导致分页错行问题\"><a href=\"#打印HTML页面时，表格table过长导致分页错行问题\" class=\"headerlink\" title=\"打印HTML页面时，表格table过长导致分页错行问题\"></a>打印HTML页面时，表格table过长导致分页错行问题</h2><p>在打印一个html页面时，会出现table数据过长，需要分多个页面打印，这时候会出现一行切成两行，导致表格行错乱。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>可以在媒体打印中添加下面几行代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"><span class=\"hljs-keyword\">@media</span> print</span><br><span class=\"language-css\">&#123;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">table</span> &#123; <span class=\"hljs-attribute\">page-break-after</span>:auto &#125;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">tr</span>    &#123; <span class=\"hljs-attribute\">page-break-inside</span>:avoid; <span class=\"hljs-attribute\">page-break-after</span>:auto &#125;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">td</span>    &#123; <span class=\"hljs-attribute\">page-break-inside</span>:avoid; <span class=\"hljs-attribute\">page-break-after</span>:auto &#125;</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">thead</span> &#123; <span class=\"hljs-attribute\">display</span>:table-header-group &#125;//表格的行头</span><br><span class=\"language-css\">  <span class=\"hljs-selector-tag\">tfoot</span> &#123; <span class=\"hljs-attribute\">display</span>:table-footer-group &#125; //表格的行尾</span><br><span class=\"language-css\">&#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>最后会发现表格会根据打印页面的大小进行分行，不会出现一行数据被分成两页的情况了。</p>\n"},{"layout":"vue","title":"qs序列化","author":"Evan","date":"2022-06-13T09:14:55.000Z","_content":"\n## vue使用axios结合qs进行序列化\n\n开发vue+elementUI项目时，使用axios进行前后端分离，会出现发送请求后端接收不到，原因在于后端接受的数据类型和axios发送的请求参数类型不一致，例如springboot中controller中的参数类型是字符串，而axios的请求参数是json格式。这时候就需要把参数类型设为一致。\n\n在vue的可以使用qs来对请求参数进行序列化。\n\n### 使用方法\n\n**安装**\n\n```\nnpm install qs\n```\n\n**引用**\n\n在main.js中全局引用\n\n```vue\nimport qs from'qs'\n//全局引用\nVue.prototype.$qs = qs\n```\n\n**使用**\n\n```js\n//例子 \nthis.$axios\n                    .post('/login', this.$qs.stringify({name: this.loginForm.name,\n                        password: this.loginForm.password\n                    }))\n                    .then(successResponse => {\n                        if (successResponse.data.code === 200) {\n                            localStorage.setItem('token',successResponse.data.data);\n                            this.$router.replace({path: '/dashboard'})\n                        }\n                        else{\n                            alert(successResponse.data.message);\n                        }\n                    })\n                    .catch(failResponse => {\n\n                    })\n```\n\n### qs的两种方法\n\n**qs.parse()**\n\n```\nqs.parse()是将URL解析成对象的形式\n//例\nconst url = 'name=admin&password=123'\nqs.parse(url) // 返回数据  {name:admin,password:123}\n```\n\n**qs.stringify()**\n\n```\nqs.stringify()将对象 序列化成URL的形式以&进行拼接\n//例\nconst obj = {\n\tname: 'admin',\n\tpassword: '123'\n}\nqs.stringify(obj) // 返回数据：name=admin&password=123\n```\n\n","source":"_posts/qs序列化.md","raw":"---\nlayout: vue\ntitle: qs序列化\nauthor: Evan\ncategories: 笔记\ndate: 2022-06-13 17:14:55\ntags:\n---\n\n## vue使用axios结合qs进行序列化\n\n开发vue+elementUI项目时，使用axios进行前后端分离，会出现发送请求后端接收不到，原因在于后端接受的数据类型和axios发送的请求参数类型不一致，例如springboot中controller中的参数类型是字符串，而axios的请求参数是json格式。这时候就需要把参数类型设为一致。\n\n在vue的可以使用qs来对请求参数进行序列化。\n\n### 使用方法\n\n**安装**\n\n```\nnpm install qs\n```\n\n**引用**\n\n在main.js中全局引用\n\n```vue\nimport qs from'qs'\n//全局引用\nVue.prototype.$qs = qs\n```\n\n**使用**\n\n```js\n//例子 \nthis.$axios\n                    .post('/login', this.$qs.stringify({name: this.loginForm.name,\n                        password: this.loginForm.password\n                    }))\n                    .then(successResponse => {\n                        if (successResponse.data.code === 200) {\n                            localStorage.setItem('token',successResponse.data.data);\n                            this.$router.replace({path: '/dashboard'})\n                        }\n                        else{\n                            alert(successResponse.data.message);\n                        }\n                    })\n                    .catch(failResponse => {\n\n                    })\n```\n\n### qs的两种方法\n\n**qs.parse()**\n\n```\nqs.parse()是将URL解析成对象的形式\n//例\nconst url = 'name=admin&password=123'\nqs.parse(url) // 返回数据  {name:admin,password:123}\n```\n\n**qs.stringify()**\n\n```\nqs.stringify()将对象 序列化成URL的形式以&进行拼接\n//例\nconst obj = {\n\tname: 'admin',\n\tpassword: '123'\n}\nqs.stringify(obj) // 返回数据：name=admin&password=123\n```\n\n","slug":"qs序列化","published":1,"updated":"2022-06-17T09:33:33.315Z","_id":"cl4cizl5z0000tou3hpnbeqby","comments":1,"photos":[],"link":"","content":"<h2 id=\"vue使用axios结合qs进行序列化\"><a href=\"#vue使用axios结合qs进行序列化\" class=\"headerlink\" title=\"vue使用axios结合qs进行序列化\"></a>vue使用axios结合qs进行序列化</h2><p>开发vue+elementUI项目时，使用axios进行前后端分离，会出现发送请求后端接收不到，原因在于后端接受的数据类型和axios发送的请求参数类型不一致，例如springboot中controller中的参数类型是字符串，而axios的请求参数是json格式。这时候就需要把参数类型设为一致。</p>\n<p>在vue的可以使用qs来对请求参数进行序列化。</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p><strong>安装</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">npm <span class=\"hljs-keyword\">install</span> qs<br></code></pre></td></tr></table></figure>\n\n<p><strong>引用</strong></p>\n<p>在main.js中全局引用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">import qs from&#x27;qs&#x27;<br>//全局引用<br>Vue.prototype.$qs = qs<br></code></pre></td></tr></table></figure>\n\n<p><strong>使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//例子 </span><br><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$axios</span><br>                    .<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">name</span>,<br>                        <span class=\"hljs-attr\">password</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">password</span><br>                    &#125;))<br>                    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">successResponse</span> =&gt;</span> &#123;<br>                        <span class=\"hljs-keyword\">if</span> (successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">200</span>) &#123;<br>                            <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>,successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">data</span>);<br>                            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-title function_\">replace</span>(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/dashboard&#x27;</span>&#125;)<br>                        &#125;<br>                        <span class=\"hljs-keyword\">else</span>&#123;<br>                            <span class=\"hljs-title function_\">alert</span>(successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">message</span>);<br>                        &#125;<br>                    &#125;)<br>                    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">failResponse</span> =&gt;</span> &#123;<br><br>                    &#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"qs的两种方法\"><a href=\"#qs的两种方法\" class=\"headerlink\" title=\"qs的两种方法\"></a>qs的两种方法</h3><p><strong>qs.parse()</strong></p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\">qs.parse()是将URL解析成对象的形式<br><span class=\"hljs-comment\">//例</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">url</span> = <span class=\"hljs-string\">&#x27;name=admin&amp;password=123&#x27;</span><br>qs.parse(<span class=\"hljs-built_in\">url</span>) <span class=\"hljs-comment\">// 返回数据  &#123;name:admin,password:123&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>qs.stringify()</strong></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">qs.stringify()将对象 序列化成URL的形式以&amp;进行拼接<br>//例<br>const obj = &#123;<br>\t<span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;admin&#x27;</span>,<br>\t<span class=\"hljs-keyword\">password</span>: <span class=\"hljs-string\">&#x27;123&#x27;</span><br>&#125;<br>qs.stringify(obj) // 返回数据：<span class=\"hljs-type\">name</span>=<span class=\"hljs-keyword\">admin</span>&amp;<span class=\"hljs-keyword\">password</span>=<span class=\"hljs-number\">123</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1068,"excerpt":"","more":"<h2 id=\"vue使用axios结合qs进行序列化\"><a href=\"#vue使用axios结合qs进行序列化\" class=\"headerlink\" title=\"vue使用axios结合qs进行序列化\"></a>vue使用axios结合qs进行序列化</h2><p>开发vue+elementUI项目时，使用axios进行前后端分离，会出现发送请求后端接收不到，原因在于后端接受的数据类型和axios发送的请求参数类型不一致，例如springboot中controller中的参数类型是字符串，而axios的请求参数是json格式。这时候就需要把参数类型设为一致。</p>\n<p>在vue的可以使用qs来对请求参数进行序列化。</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p><strong>安装</strong></p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">npm <span class=\"hljs-keyword\">install</span> qs<br></code></pre></td></tr></table></figure>\n\n<p><strong>引用</strong></p>\n<p>在main.js中全局引用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">import qs from&#x27;qs&#x27;<br>//全局引用<br>Vue.prototype.$qs = qs<br></code></pre></td></tr></table></figure>\n\n<p><strong>使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//例子 </span><br><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$axios</span><br>                    .<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">name</span>,<br>                        <span class=\"hljs-attr\">password</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">password</span><br>                    &#125;))<br>                    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">successResponse</span> =&gt;</span> &#123;<br>                        <span class=\"hljs-keyword\">if</span> (successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">200</span>) &#123;<br>                            <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>,successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">data</span>);<br>                            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-title function_\">replace</span>(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/dashboard&#x27;</span>&#125;)<br>                        &#125;<br>                        <span class=\"hljs-keyword\">else</span>&#123;<br>                            <span class=\"hljs-title function_\">alert</span>(successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">message</span>);<br>                        &#125;<br>                    &#125;)<br>                    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">failResponse</span> =&gt;</span> &#123;<br><br>                    &#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"qs的两种方法\"><a href=\"#qs的两种方法\" class=\"headerlink\" title=\"qs的两种方法\"></a>qs的两种方法</h3><p><strong>qs.parse()</strong></p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\">qs.parse()是将URL解析成对象的形式<br><span class=\"hljs-comment\">//例</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">url</span> = <span class=\"hljs-string\">&#x27;name=admin&amp;password=123&#x27;</span><br>qs.parse(<span class=\"hljs-built_in\">url</span>) <span class=\"hljs-comment\">// 返回数据  &#123;name:admin,password:123&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>qs.stringify()</strong></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">qs.stringify()将对象 序列化成URL的形式以&amp;进行拼接<br>//例<br>const obj = &#123;<br>\t<span class=\"hljs-type\">name</span>: <span class=\"hljs-string\">&#x27;admin&#x27;</span>,<br>\t<span class=\"hljs-keyword\">password</span>: <span class=\"hljs-string\">&#x27;123&#x27;</span><br>&#125;<br>qs.stringify(obj) // 返回数据：<span class=\"hljs-type\">name</span>=<span class=\"hljs-keyword\">admin</span>&amp;<span class=\"hljs-keyword\">password</span>=<span class=\"hljs-number\">123</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"sql数据库上传到服务器","date":"2022-06-16T08:40:35.000Z","author":"Evan","_content":"\n## 操作准备\n\nXshell、Xftp、已连接服务器。\n\n已安装mysql的服务器。\n\n## 操作步骤\n\n**1.将要上传的数据库导出为sql文件，保存到本地中。可以通过Navicat等sql工具导出，也可以本地电脑CMD命令导出。**\n\n**2.通过Xftp、Xshell连接远程服务器。**\n\n**3.将步骤1中保存的本地sql文件通过Xftp上传到服务器的文件夹中(路径随意)，记住这个上传路径。(例：/usr/mydatabase/shuju.sql)**\n\n#### 服务器中的操作\n\n**4.在Xshell中输入mysql -u root -p,输入正确密码进入服务器数据库中；**\n\n```mysql\nmysql -u root -p\n```\n\n**5.进入mysql后创建一个数据库，名字与导入的sql文件一致；**\n\n```mysql\ncreate database shuju;\n```\n\n**6.退出mysql**\n\n```mysql\nexit;\n```\n\n**7.执行命令sudo mysqldum完整如下**\n\n```Linux\n//sudo mysqldump -u root -p '数据库名' < 'sql文件的路径';\nsudo mysqldump -u root -p shuju < /usr/mydatabase/shuju.sql;\n```\n\n**8.进入mysql，执行use shuju**\n\n```mysql\nmysql -u root -p;\nuse shuju;\n```\n\n**9.然后执行source操作,source+sql路径**\n\n```mysql\n source  /usr/mydatabase/shuju.sql;\n```\n\n**到这里，已经完成了数据库的上传。**\n\n","source":"_posts/sql数据库上传到服务器.md","raw":"---\ntitle: sql数据库上传到服务器\ndate: 2022-06-16 16:40:35\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## 操作准备\n\nXshell、Xftp、已连接服务器。\n\n已安装mysql的服务器。\n\n## 操作步骤\n\n**1.将要上传的数据库导出为sql文件，保存到本地中。可以通过Navicat等sql工具导出，也可以本地电脑CMD命令导出。**\n\n**2.通过Xftp、Xshell连接远程服务器。**\n\n**3.将步骤1中保存的本地sql文件通过Xftp上传到服务器的文件夹中(路径随意)，记住这个上传路径。(例：/usr/mydatabase/shuju.sql)**\n\n#### 服务器中的操作\n\n**4.在Xshell中输入mysql -u root -p,输入正确密码进入服务器数据库中；**\n\n```mysql\nmysql -u root -p\n```\n\n**5.进入mysql后创建一个数据库，名字与导入的sql文件一致；**\n\n```mysql\ncreate database shuju;\n```\n\n**6.退出mysql**\n\n```mysql\nexit;\n```\n\n**7.执行命令sudo mysqldum完整如下**\n\n```Linux\n//sudo mysqldump -u root -p '数据库名' < 'sql文件的路径';\nsudo mysqldump -u root -p shuju < /usr/mydatabase/shuju.sql;\n```\n\n**8.进入mysql，执行use shuju**\n\n```mysql\nmysql -u root -p;\nuse shuju;\n```\n\n**9.然后执行source操作,source+sql路径**\n\n```mysql\n source  /usr/mydatabase/shuju.sql;\n```\n\n**到这里，已经完成了数据库的上传。**\n\n","slug":"sql数据库上传到服务器","published":1,"updated":"2022-06-23T07:46:33.118Z","_id":"cl4i98flu00018ku39vwo1mf8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"操作准备\"><a href=\"#操作准备\" class=\"headerlink\" title=\"操作准备\"></a>操作准备</h2><p>Xshell、Xftp、已连接服务器。</p>\n<p>已安装mysql的服务器。</p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><p><strong>1.将要上传的数据库导出为sql文件，保存到本地中。可以通过Navicat等sql工具导出，也可以本地电脑CMD命令导出。</strong></p>\n<p><strong>2.通过Xftp、Xshell连接远程服务器。</strong></p>\n<p><strong>3.将步骤1中保存的本地sql文件通过Xftp上传到服务器的文件夹中(路径随意)，记住这个上传路径。(例：/usr/mydatabase/shuju.sql)</strong></p>\n<h4 id=\"服务器中的操作\"><a href=\"#服务器中的操作\" class=\"headerlink\" title=\"服务器中的操作\"></a>服务器中的操作</h4><p><strong>4.在Xshell中输入mysql -u root -p,输入正确密码进入服务器数据库中；</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysql -u root -p<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.进入mysql后创建一个数据库，名字与导入的sql文件一致；</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create database shuju;<br></code></pre></td></tr></table></figure>\n\n<p><strong>6.退出mysql</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">exit;<br></code></pre></td></tr></table></figure>\n\n<p><strong>7.执行命令sudo mysqldum完整如下</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Linux\">//sudo mysqldump -u root -p &#x27;数据库名&#x27; &lt; &#x27;sql文件的路径&#x27;;<br>sudo mysqldump -u root -p shuju &lt; /usr/mydatabase/shuju.sql;<br></code></pre></td></tr></table></figure>\n\n<p><strong>8.进入mysql，执行use shuju</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysql -u root -p;<br>use shuju;<br></code></pre></td></tr></table></figure>\n\n<p><strong>9.然后执行source操作,source+sql路径</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">source  /usr/mydatabase/shuju.sql;<br></code></pre></td></tr></table></figure>\n\n<p><strong>到这里，已经完成了数据库的上传。</strong></p>\n","site":{"data":{}},"wordcount":599,"excerpt":"","more":"<h2 id=\"操作准备\"><a href=\"#操作准备\" class=\"headerlink\" title=\"操作准备\"></a>操作准备</h2><p>Xshell、Xftp、已连接服务器。</p>\n<p>已安装mysql的服务器。</p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><p><strong>1.将要上传的数据库导出为sql文件，保存到本地中。可以通过Navicat等sql工具导出，也可以本地电脑CMD命令导出。</strong></p>\n<p><strong>2.通过Xftp、Xshell连接远程服务器。</strong></p>\n<p><strong>3.将步骤1中保存的本地sql文件通过Xftp上传到服务器的文件夹中(路径随意)，记住这个上传路径。(例：/usr/mydatabase/shuju.sql)</strong></p>\n<h4 id=\"服务器中的操作\"><a href=\"#服务器中的操作\" class=\"headerlink\" title=\"服务器中的操作\"></a>服务器中的操作</h4><p><strong>4.在Xshell中输入mysql -u root -p,输入正确密码进入服务器数据库中；</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysql -u root -p<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.进入mysql后创建一个数据库，名字与导入的sql文件一致；</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create database shuju;<br></code></pre></td></tr></table></figure>\n\n<p><strong>6.退出mysql</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">exit;<br></code></pre></td></tr></table></figure>\n\n<p><strong>7.执行命令sudo mysqldum完整如下</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Linux\">//sudo mysqldump -u root -p &#x27;数据库名&#x27; &lt; &#x27;sql文件的路径&#x27;;<br>sudo mysqldump -u root -p shuju &lt; /usr/mydatabase/shuju.sql;<br></code></pre></td></tr></table></figure>\n\n<p><strong>8.进入mysql，执行use shuju</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysql -u root -p;<br>use shuju;<br></code></pre></td></tr></table></figure>\n\n<p><strong>9.然后执行source操作,source+sql路径</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">source  /usr/mydatabase/shuju.sql;<br></code></pre></td></tr></table></figure>\n\n<p><strong>到这里，已经完成了数据库的上传。</strong></p>\n"},{"title":"xml导出word图片不显示问题","date":"2022-06-23T07:23:15.000Z","author":"Evan","_content":"\n## xml导出word图片不显示问题\n\n最近写个需求，要求打印出word形式的报告文档。其中出现了使用officeword文档打开后图片没有正常显示。\n\n![](/img/随笔/图片显示失败.PNG)\n\n但是使用wps却可以正常显示。\n\n## 解决方法\n\n`<w:binData>` 与 `<\\binData>` 标签之间不能有其他任何字符。\n\n原因是我格式化文档时，代码工具把这个标签换行了，所以多了个回车符。\n\n**错误示范**\n\n![](/img/随笔/xml图片问题.PNG)\n\n**正确写法**\n\n![](/img/随笔/xml图片问题2.PNG)\n","source":"_posts/xml导出word图片不显示问题.md","raw":"---\ntitle: xml导出word图片不显示问题\ndate: 2022-06-23 15:23:15\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## xml导出word图片不显示问题\n\n最近写个需求，要求打印出word形式的报告文档。其中出现了使用officeword文档打开后图片没有正常显示。\n\n![](/img/随笔/图片显示失败.PNG)\n\n但是使用wps却可以正常显示。\n\n## 解决方法\n\n`<w:binData>` 与 `<\\binData>` 标签之间不能有其他任何字符。\n\n原因是我格式化文档时，代码工具把这个标签换行了，所以多了个回车符。\n\n**错误示范**\n\n![](/img/随笔/xml图片问题.PNG)\n\n**正确写法**\n\n![](/img/随笔/xml图片问题2.PNG)\n","slug":"xml导出word图片不显示问题","published":1,"updated":"2022-06-23T07:43:19.957Z","_id":"cl4qpv07d0000l8u3ctwbf1yq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"xml导出word图片不显示问题\"><a href=\"#xml导出word图片不显示问题\" class=\"headerlink\" title=\"xml导出word图片不显示问题\"></a>xml导出word图片不显示问题</h2><p>最近写个需求，要求打印出word形式的报告文档。其中出现了使用officeword文档打开后图片没有正常显示。</p>\n<p><img src=\"/img/%E9%9A%8F%E7%AC%94/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%A4%B1%E8%B4%A5.PNG\"></p>\n<p>但是使用wps却可以正常显示。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p><code>&lt;w:binData&gt;</code> 与 <code>&lt;\\binData&gt;</code> 标签之间不能有其他任何字符。</p>\n<p>原因是我格式化文档时，代码工具把这个标签换行了，所以多了个回车符。</p>\n<p><strong>错误示范</strong></p>\n<p><img src=\"/img/%E9%9A%8F%E7%AC%94/xml%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98.PNG\"></p>\n<p><strong>正确写法</strong></p>\n<p><img src=\"/img/%E9%9A%8F%E7%AC%94/xml%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%982.PNG\"></p>\n","site":{"data":{}},"wordcount":179,"excerpt":"","more":"<h2 id=\"xml导出word图片不显示问题\"><a href=\"#xml导出word图片不显示问题\" class=\"headerlink\" title=\"xml导出word图片不显示问题\"></a>xml导出word图片不显示问题</h2><p>最近写个需求，要求打印出word形式的报告文档。其中出现了使用officeword文档打开后图片没有正常显示。</p>\n<p><img src=\"/img/%E9%9A%8F%E7%AC%94/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%A4%B1%E8%B4%A5.PNG\"></p>\n<p>但是使用wps却可以正常显示。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p><code>&lt;w:binData&gt;</code> 与 <code>&lt;\\binData&gt;</code> 标签之间不能有其他任何字符。</p>\n<p>原因是我格式化文档时，代码工具把这个标签换行了，所以多了个回车符。</p>\n<p><strong>错误示范</strong></p>\n<p><img src=\"/img/%E9%9A%8F%E7%AC%94/xml%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98.PNG\"></p>\n<p><strong>正确写法</strong></p>\n<p><img src=\"/img/%E9%9A%8F%E7%AC%94/xml%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%982.PNG\"></p>\n"},{"title":"Linux常用命令","date":"2022-06-27T02:22:01.000Z","author":"Evan","_content":"\n# Linux的常用命令\n\n###  1.ls — List\n\nls列举出当前工作目录的内容（文件或文件夹）\n\n```Linux\nls\n```\n\n### 2.mkdir — Make Directory\n\nmkdir 用于新建一个新目录\n\n```\nmkdir 目录名\n```\n\n### 3.pwd — Print Working Directory\n\n显示当前工作目录\n\n```\npwd\n```\n\n### 4.cd — Change Directory\n\n切换文件路径，cd 将给定的文件夹（或目录）设置成当前工作目录。\n\n```\ncd 目录\n```\n\n### 5.rmdir— Remove Directory\n\n删除给定的目录。\n\n```\nrmdir 目录名\n```\n\n### 6. rm— Remove\n\nrm 会删除指定的文件\n\n```\nrm 文件名\n```\n\n### 7. cp— Copy\n\ncp 命令对文件进行复制\n\n```\ncp 文件名\n```\n\n### 8. mv— Move\n\nmv 命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名。\n\n```\nmv 文件名 路径\n```\n\n### 9. cat— concatenate and print files\n\ncat 用于在标准输出（监控器或屏幕）上查看文件内容\n\n```\ncat 文件名\n```\n\n### 10. tail — print TAIL(from last)\n\nail 默认在标准输出上显示给定文件的最后10行内容，可以使用tail -n N 指定在标准输出上显示文件的最后N行内容。\n\n```\ntail 文件名\n```\n\n### 11.less — print LESS\n\nless 按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。你可以使用Ctrl+F向前翻页，Ctrl+B向后翻页。\n\n```\nless 文件名\n```\n\n### 12.grep\n\ngrep 在给定的文件中搜寻指定的字符串。grep -i “” 在搜寻时会忽略字符串的大小写，而grep -r “” 则会在当前工作目录的文件中递归搜寻指定的字符串。\n\n```\ngrep 字符串 文件名\n```\n\n### 13.find\n\n这个命令会在给定位置搜寻与条件匹配的文件。你可以使用find -name 的-name选项来进行区分大小写的搜寻，find -iname 来进行不区分大小写的搜寻。\n\n```\nfind 文件名\n```\n\n### 14.tar\n\ntar命令能创建、查看和提取tar压缩文件。tar -cvf 是创建对应压缩文件，tar -tvf 来查看对应压缩文件，tar -xvf 来提取对应压缩文件。\n\n```\ntar -cvf \ntar -tvf \n```\n\n### 15. gzip\n\ngzip 命令创建和提取gzip压缩文件，还可以用gzip -d 来提取压缩文件。\n\n```\ngzip 文件名\n```\n\n### 16. unzip\n\nunzip 对gzip文档进行解压。在解压之前，可以使用unzip -l 命令查看文件内容。\n\n```\nunzip 文档名\n```\n\n### 17.help\n\nhelp会在终端列出所有可用的命令,可以使用任何命令的-h或-help选项来查看该命令的具体用法。图就省略啦，会有详细列表显示出来的。\n\n```\nhelp\n```\n\n### 18.whatis — What is this command\n\n```\nwhatis cd\n```\n\n### 19.exit\n\nexit用于结束当前的终端会话。\n\n```\nexit\n```\n\n### 20.ping\n\nping 通过发送数据包ping远程主机(服务器)，常用与检测网络连接和服务器状态。\n\n```\nping yangyewen.xyz\n```\n\n### 21.who — Who Is logged in\n\nwho能列出当前登录的用户名。\n\n```\nwho\n```\n\n### 22.su — Switch User\n\nsu 用于切换不同的用户。即使没有使用密码，超级用户也能切换到其它用户。\n\n```\nsu Evan\n```\n\n### 23.uname\n\nuname会显示出关于系统的重要信息，如内核名称、主机名、内核版本、处理机类型等等，使用uname -a可以查看所有信息。\n\n```\nuname\nuname -a\n```\n\n### 24.df — Disk space Free\n\ndf查看文件系统中磁盘的使用情况–硬盘已用和可用的存储空间以及其它存储设备。你可以使用df -h将结果以人类可读的方式显示。\n\n```\ndf\n```\n\n### 25.ps — ProcesseS\n\nps显示系统的运行进程。\n\n```\nps \n```\n\n### 26.top — Top processes\n\ntop命令会默认按照CPU的占用情况，显示占用量较大的进程,可以使用top -u 查看某个用户的CPU使用排名情况。\n\n### 27. shutdown\n\nshutdown用于关闭计算机，而shutdown -r用于重启计算机。\n\n```\nshutdown\nshutdown -r\n```\n\n","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ndate: 2022-06-27 10:22:01\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n# Linux的常用命令\n\n###  1.ls — List\n\nls列举出当前工作目录的内容（文件或文件夹）\n\n```Linux\nls\n```\n\n### 2.mkdir — Make Directory\n\nmkdir 用于新建一个新目录\n\n```\nmkdir 目录名\n```\n\n### 3.pwd — Print Working Directory\n\n显示当前工作目录\n\n```\npwd\n```\n\n### 4.cd — Change Directory\n\n切换文件路径，cd 将给定的文件夹（或目录）设置成当前工作目录。\n\n```\ncd 目录\n```\n\n### 5.rmdir— Remove Directory\n\n删除给定的目录。\n\n```\nrmdir 目录名\n```\n\n### 6. rm— Remove\n\nrm 会删除指定的文件\n\n```\nrm 文件名\n```\n\n### 7. cp— Copy\n\ncp 命令对文件进行复制\n\n```\ncp 文件名\n```\n\n### 8. mv— Move\n\nmv 命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名。\n\n```\nmv 文件名 路径\n```\n\n### 9. cat— concatenate and print files\n\ncat 用于在标准输出（监控器或屏幕）上查看文件内容\n\n```\ncat 文件名\n```\n\n### 10. tail — print TAIL(from last)\n\nail 默认在标准输出上显示给定文件的最后10行内容，可以使用tail -n N 指定在标准输出上显示文件的最后N行内容。\n\n```\ntail 文件名\n```\n\n### 11.less — print LESS\n\nless 按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。你可以使用Ctrl+F向前翻页，Ctrl+B向后翻页。\n\n```\nless 文件名\n```\n\n### 12.grep\n\ngrep 在给定的文件中搜寻指定的字符串。grep -i “” 在搜寻时会忽略字符串的大小写，而grep -r “” 则会在当前工作目录的文件中递归搜寻指定的字符串。\n\n```\ngrep 字符串 文件名\n```\n\n### 13.find\n\n这个命令会在给定位置搜寻与条件匹配的文件。你可以使用find -name 的-name选项来进行区分大小写的搜寻，find -iname 来进行不区分大小写的搜寻。\n\n```\nfind 文件名\n```\n\n### 14.tar\n\ntar命令能创建、查看和提取tar压缩文件。tar -cvf 是创建对应压缩文件，tar -tvf 来查看对应压缩文件，tar -xvf 来提取对应压缩文件。\n\n```\ntar -cvf \ntar -tvf \n```\n\n### 15. gzip\n\ngzip 命令创建和提取gzip压缩文件，还可以用gzip -d 来提取压缩文件。\n\n```\ngzip 文件名\n```\n\n### 16. unzip\n\nunzip 对gzip文档进行解压。在解压之前，可以使用unzip -l 命令查看文件内容。\n\n```\nunzip 文档名\n```\n\n### 17.help\n\nhelp会在终端列出所有可用的命令,可以使用任何命令的-h或-help选项来查看该命令的具体用法。图就省略啦，会有详细列表显示出来的。\n\n```\nhelp\n```\n\n### 18.whatis — What is this command\n\n```\nwhatis cd\n```\n\n### 19.exit\n\nexit用于结束当前的终端会话。\n\n```\nexit\n```\n\n### 20.ping\n\nping 通过发送数据包ping远程主机(服务器)，常用与检测网络连接和服务器状态。\n\n```\nping yangyewen.xyz\n```\n\n### 21.who — Who Is logged in\n\nwho能列出当前登录的用户名。\n\n```\nwho\n```\n\n### 22.su — Switch User\n\nsu 用于切换不同的用户。即使没有使用密码，超级用户也能切换到其它用户。\n\n```\nsu Evan\n```\n\n### 23.uname\n\nuname会显示出关于系统的重要信息，如内核名称、主机名、内核版本、处理机类型等等，使用uname -a可以查看所有信息。\n\n```\nuname\nuname -a\n```\n\n### 24.df — Disk space Free\n\ndf查看文件系统中磁盘的使用情况–硬盘已用和可用的存储空间以及其它存储设备。你可以使用df -h将结果以人类可读的方式显示。\n\n```\ndf\n```\n\n### 25.ps — ProcesseS\n\nps显示系统的运行进程。\n\n```\nps \n```\n\n### 26.top — Top processes\n\ntop命令会默认按照CPU的占用情况，显示占用量较大的进程,可以使用top -u 查看某个用户的CPU使用排名情况。\n\n### 27. shutdown\n\nshutdown用于关闭计算机，而shutdown -r用于重启计算机。\n\n```\nshutdown\nshutdown -r\n```\n\n","slug":"Linux常用命令","published":1,"updated":"2022-06-27T02:41:54.461Z","_id":"cl4w4vgin0000qku397d62hjp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux的常用命令\"><a href=\"#Linux的常用命令\" class=\"headerlink\" title=\"Linux的常用命令\"></a>Linux的常用命令</h1><h3 id=\"1-ls-—-List\"><a href=\"#1-ls-—-List\" class=\"headerlink\" title=\"1.ls — List\"></a>1.ls — List</h3><p>ls列举出当前工作目录的内容（文件或文件夹）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Linux\">ls<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-mkdir-—-Make-Directory\"><a href=\"#2-mkdir-—-Make-Directory\" class=\"headerlink\" title=\"2.mkdir — Make Directory\"></a>2.mkdir — Make Directory</h3><p>mkdir 用于新建一个新目录</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">mkdir 目录名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-pwd-—-Print-Working-Directory\"><a href=\"#3-pwd-—-Print-Working-Directory\" class=\"headerlink\" title=\"3.pwd — Print Working Directory\"></a>3.pwd — Print Working Directory</h3><p>显示当前工作目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">pwd</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-cd-—-Change-Directory\"><a href=\"#4-cd-—-Change-Directory\" class=\"headerlink\" title=\"4.cd — Change Directory\"></a>4.cd — Change Directory</h3><p>切换文件路径，cd 将给定的文件夹（或目录）设置成当前工作目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> 目录<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-rmdir—-Remove-Directory\"><a href=\"#5-rmdir—-Remove-Directory\" class=\"headerlink\" title=\"5.rmdir— Remove Directory\"></a>5.rmdir— Remove Directory</h3><p>删除给定的目录。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">rmdir 目录名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-rm—-Remove\"><a href=\"#6-rm—-Remove\" class=\"headerlink\" title=\"6. rm— Remove\"></a>6. rm— Remove</h3><p>rm 会删除指定的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">rm</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-cp—-Copy\"><a href=\"#7-cp—-Copy\" class=\"headerlink\" title=\"7. cp— Copy\"></a>7. cp— Copy</h3><p>cp 命令对文件进行复制</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-keyword\">cp</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"8-mv—-Move\"><a href=\"#8-mv—-Move\" class=\"headerlink\" title=\"8. mv— Move\"></a>8. mv— Move</h3><p>mv 命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mv</span> 文件名 路径<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"9-cat—-concatenate-and-print-files\"><a href=\"#9-cat—-concatenate-and-print-files\" class=\"headerlink\" title=\"9. cat— concatenate and print files\"></a>9. cat— concatenate and print files</h3><p>cat 用于在标准输出（监控器或屏幕）上查看文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"10-tail-—-print-TAIL-from-last\"><a href=\"#10-tail-—-print-TAIL-from-last\" class=\"headerlink\" title=\"10. tail — print TAIL(from last)\"></a>10. tail — print TAIL(from last)</h3><p>ail 默认在标准输出上显示给定文件的最后10行内容，可以使用tail -n N 指定在标准输出上显示文件的最后N行内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">tail</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"11-less-—-print-LESS\"><a href=\"#11-less-—-print-LESS\" class=\"headerlink\" title=\"11.less — print LESS\"></a>11.less — print LESS</h3><p>less 按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。你可以使用Ctrl+F向前翻页，Ctrl+B向后翻页。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">less</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"12-grep\"><a href=\"#12-grep\" class=\"headerlink\" title=\"12.grep\"></a>12.grep</h3><p>grep 在给定的文件中搜寻指定的字符串。grep -i “” 在搜寻时会忽略字符串的大小写，而grep -r “” 则会在当前工作目录的文件中递归搜寻指定的字符串。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-keyword\">grep</span> 字符串 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"13-find\"><a href=\"#13-find\" class=\"headerlink\" title=\"13.find\"></a>13.find</h3><p>这个命令会在给定位置搜寻与条件匹配的文件。你可以使用find -name 的-name选项来进行区分大小写的搜寻，find -iname 来进行不区分大小写的搜寻。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">find</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"14-tar\"><a href=\"#14-tar\" class=\"headerlink\" title=\"14.tar\"></a>14.tar</h3><p>tar命令能创建、查看和提取tar压缩文件。tar -cvf 是创建对应压缩文件，tar -tvf 来查看对应压缩文件，tar -xvf 来提取对应压缩文件。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">tar -cvf </span><br><span class=\"hljs-attribute\">tar -tvf</span> <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"15-gzip\"><a href=\"#15-gzip\" class=\"headerlink\" title=\"15. gzip\"></a>15. gzip</h3><p>gzip 命令创建和提取gzip压缩文件，还可以用gzip -d 来提取压缩文件。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">gzip</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"16-unzip\"><a href=\"#16-unzip\" class=\"headerlink\" title=\"16. unzip\"></a>16. unzip</h3><p>unzip 对gzip文档进行解压。在解压之前，可以使用unzip -l 命令查看文件内容。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">unzip</span> 文档名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"17-help\"><a href=\"#17-help\" class=\"headerlink\" title=\"17.help\"></a>17.help</h3><p>help会在终端列出所有可用的命令,可以使用任何命令的-h或-help选项来查看该命令的具体用法。图就省略啦，会有详细列表显示出来的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">help</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"18-whatis-—-What-is-this-command\"><a href=\"#18-whatis-—-What-is-this-command\" class=\"headerlink\" title=\"18.whatis — What is this command\"></a>18.whatis — What is this command</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">whatis <span class=\"hljs-built_in\">cd</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"19-exit\"><a href=\"#19-exit\" class=\"headerlink\" title=\"19.exit\"></a>19.exit</h3><p>exit用于结束当前的终端会话。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-keyword\">exit</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"20-ping\"><a href=\"#20-ping\" class=\"headerlink\" title=\"20.ping\"></a>20.ping</h3><p>ping 通过发送数据包ping远程主机(服务器)，常用与检测网络连接和服务器状态。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\"><span class=\"hljs-built_in\">ping</span> yangyewen.xyz<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"21-who-—-Who-Is-logged-in\"><a href=\"#21-who-—-Who-Is-logged-in\" class=\"headerlink\" title=\"21.who — Who Is logged in\"></a>21.who — Who Is logged in</h3><p>who能列出当前登录的用户名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">who</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"22-su-—-Switch-User\"><a href=\"#22-su-—-Switch-User\" class=\"headerlink\" title=\"22.su — Switch User\"></a>22.su — Switch User</h3><p>su 用于切换不同的用户。即使没有使用密码，超级用户也能切换到其它用户。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">su Evan</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"23-uname\"><a href=\"#23-uname\" class=\"headerlink\" title=\"23.uname\"></a>23.uname</h3><p>uname会显示出关于系统的重要信息，如内核名称、主机名、内核版本、处理机类型等等，使用uname -a可以查看所有信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">uname</span><br><span class=\"hljs-built_in\">uname</span> -a<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"24-df-—-Disk-space-Free\"><a href=\"#24-df-—-Disk-space-Free\" class=\"headerlink\" title=\"24.df — Disk space Free\"></a>24.df — Disk space Free</h3><p>df查看文件系统中磁盘的使用情况–硬盘已用和可用的存储空间以及其它存储设备。你可以使用df -h将结果以人类可读的方式显示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">df</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"25-ps-—-ProcesseS\"><a href=\"#25-ps-—-ProcesseS\" class=\"headerlink\" title=\"25.ps — ProcesseS\"></a>25.ps — ProcesseS</h3><p>ps显示系统的运行进程。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">ps</span> <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"26-top-—-Top-processes\"><a href=\"#26-top-—-Top-processes\" class=\"headerlink\" title=\"26.top — Top processes\"></a>26.top — Top processes</h3><p>top命令会默认按照CPU的占用情况，显示占用量较大的进程,可以使用top -u 查看某个用户的CPU使用排名情况。</p>\n<h3 id=\"27-shutdown\"><a href=\"#27-shutdown\" class=\"headerlink\" title=\"27. shutdown\"></a>27. shutdown</h3><p>shutdown用于关闭计算机，而shutdown -r用于重启计算机。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">shutdown<br>shutdown -r<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1629,"excerpt":"","more":"<h1 id=\"Linux的常用命令\"><a href=\"#Linux的常用命令\" class=\"headerlink\" title=\"Linux的常用命令\"></a>Linux的常用命令</h1><h3 id=\"1-ls-—-List\"><a href=\"#1-ls-—-List\" class=\"headerlink\" title=\"1.ls — List\"></a>1.ls — List</h3><p>ls列举出当前工作目录的内容（文件或文件夹）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Linux\">ls<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-mkdir-—-Make-Directory\"><a href=\"#2-mkdir-—-Make-Directory\" class=\"headerlink\" title=\"2.mkdir — Make Directory\"></a>2.mkdir — Make Directory</h3><p>mkdir 用于新建一个新目录</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">mkdir 目录名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-pwd-—-Print-Working-Directory\"><a href=\"#3-pwd-—-Print-Working-Directory\" class=\"headerlink\" title=\"3.pwd — Print Working Directory\"></a>3.pwd — Print Working Directory</h3><p>显示当前工作目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">pwd</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-cd-—-Change-Directory\"><a href=\"#4-cd-—-Change-Directory\" class=\"headerlink\" title=\"4.cd — Change Directory\"></a>4.cd — Change Directory</h3><p>切换文件路径，cd 将给定的文件夹（或目录）设置成当前工作目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> 目录<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-rmdir—-Remove-Directory\"><a href=\"#5-rmdir—-Remove-Directory\" class=\"headerlink\" title=\"5.rmdir— Remove Directory\"></a>5.rmdir— Remove Directory</h3><p>删除给定的目录。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">rmdir 目录名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-rm—-Remove\"><a href=\"#6-rm—-Remove\" class=\"headerlink\" title=\"6. rm— Remove\"></a>6. rm— Remove</h3><p>rm 会删除指定的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">rm</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-cp—-Copy\"><a href=\"#7-cp—-Copy\" class=\"headerlink\" title=\"7. cp— Copy\"></a>7. cp— Copy</h3><p>cp 命令对文件进行复制</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-keyword\">cp</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"8-mv—-Move\"><a href=\"#8-mv—-Move\" class=\"headerlink\" title=\"8. mv— Move\"></a>8. mv— Move</h3><p>mv 命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">mv</span> 文件名 路径<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"9-cat—-concatenate-and-print-files\"><a href=\"#9-cat—-concatenate-and-print-files\" class=\"headerlink\" title=\"9. cat— concatenate and print files\"></a>9. cat— concatenate and print files</h3><p>cat 用于在标准输出（监控器或屏幕）上查看文件内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cat</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"10-tail-—-print-TAIL-from-last\"><a href=\"#10-tail-—-print-TAIL-from-last\" class=\"headerlink\" title=\"10. tail — print TAIL(from last)\"></a>10. tail — print TAIL(from last)</h3><p>ail 默认在标准输出上显示给定文件的最后10行内容，可以使用tail -n N 指定在标准输出上显示文件的最后N行内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">tail</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"11-less-—-print-LESS\"><a href=\"#11-less-—-print-LESS\" class=\"headerlink\" title=\"11.less — print LESS\"></a>11.less — print LESS</h3><p>less 按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。你可以使用Ctrl+F向前翻页，Ctrl+B向后翻页。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">less</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"12-grep\"><a href=\"#12-grep\" class=\"headerlink\" title=\"12.grep\"></a>12.grep</h3><p>grep 在给定的文件中搜寻指定的字符串。grep -i “” 在搜寻时会忽略字符串的大小写，而grep -r “” 则会在当前工作目录的文件中递归搜寻指定的字符串。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-keyword\">grep</span> 字符串 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"13-find\"><a href=\"#13-find\" class=\"headerlink\" title=\"13.find\"></a>13.find</h3><p>这个命令会在给定位置搜寻与条件匹配的文件。你可以使用find -name 的-name选项来进行区分大小写的搜寻，find -iname 来进行不区分大小写的搜寻。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">find</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"14-tar\"><a href=\"#14-tar\" class=\"headerlink\" title=\"14.tar\"></a>14.tar</h3><p>tar命令能创建、查看和提取tar压缩文件。tar -cvf 是创建对应压缩文件，tar -tvf 来查看对应压缩文件，tar -xvf 来提取对应压缩文件。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">tar -cvf </span><br><span class=\"hljs-attribute\">tar -tvf</span> <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"15-gzip\"><a href=\"#15-gzip\" class=\"headerlink\" title=\"15. gzip\"></a>15. gzip</h3><p>gzip 命令创建和提取gzip压缩文件，还可以用gzip -d 来提取压缩文件。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">gzip</span> 文件名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"16-unzip\"><a href=\"#16-unzip\" class=\"headerlink\" title=\"16. unzip\"></a>16. unzip</h3><p>unzip 对gzip文档进行解压。在解压之前，可以使用unzip -l 命令查看文件内容。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">unzip</span> 文档名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"17-help\"><a href=\"#17-help\" class=\"headerlink\" title=\"17.help\"></a>17.help</h3><p>help会在终端列出所有可用的命令,可以使用任何命令的-h或-help选项来查看该命令的具体用法。图就省略啦，会有详细列表显示出来的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">help</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"18-whatis-—-What-is-this-command\"><a href=\"#18-whatis-—-What-is-this-command\" class=\"headerlink\" title=\"18.whatis — What is this command\"></a>18.whatis — What is this command</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">whatis <span class=\"hljs-built_in\">cd</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"19-exit\"><a href=\"#19-exit\" class=\"headerlink\" title=\"19.exit\"></a>19.exit</h3><p>exit用于结束当前的终端会话。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-keyword\">exit</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"20-ping\"><a href=\"#20-ping\" class=\"headerlink\" title=\"20.ping\"></a>20.ping</h3><p>ping 通过发送数据包ping远程主机(服务器)，常用与检测网络连接和服务器状态。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\"><span class=\"hljs-built_in\">ping</span> yangyewen.xyz<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"21-who-—-Who-Is-logged-in\"><a href=\"#21-who-—-Who-Is-logged-in\" class=\"headerlink\" title=\"21.who — Who Is logged in\"></a>21.who — Who Is logged in</h3><p>who能列出当前登录的用户名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">who</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"22-su-—-Switch-User\"><a href=\"#22-su-—-Switch-User\" class=\"headerlink\" title=\"22.su — Switch User\"></a>22.su — Switch User</h3><p>su 用于切换不同的用户。即使没有使用密码，超级用户也能切换到其它用户。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">su Evan</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"23-uname\"><a href=\"#23-uname\" class=\"headerlink\" title=\"23.uname\"></a>23.uname</h3><p>uname会显示出关于系统的重要信息，如内核名称、主机名、内核版本、处理机类型等等，使用uname -a可以查看所有信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">uname</span><br><span class=\"hljs-built_in\">uname</span> -a<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"24-df-—-Disk-space-Free\"><a href=\"#24-df-—-Disk-space-Free\" class=\"headerlink\" title=\"24.df — Disk space Free\"></a>24.df — Disk space Free</h3><p>df查看文件系统中磁盘的使用情况–硬盘已用和可用的存储空间以及其它存储设备。你可以使用df -h将结果以人类可读的方式显示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">df</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"25-ps-—-ProcesseS\"><a href=\"#25-ps-—-ProcesseS\" class=\"headerlink\" title=\"25.ps — ProcesseS\"></a>25.ps — ProcesseS</h3><p>ps显示系统的运行进程。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">ps</span> <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"26-top-—-Top-processes\"><a href=\"#26-top-—-Top-processes\" class=\"headerlink\" title=\"26.top — Top processes\"></a>26.top — Top processes</h3><p>top命令会默认按照CPU的占用情况，显示占用量较大的进程,可以使用top -u 查看某个用户的CPU使用排名情况。</p>\n<h3 id=\"27-shutdown\"><a href=\"#27-shutdown\" class=\"headerlink\" title=\"27. shutdown\"></a>27. shutdown</h3><p>shutdown用于关闭计算机，而shutdown -r用于重启计算机。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">shutdown<br>shutdown -r<br></code></pre></td></tr></table></figure>\n\n"},{"title":"享疗共享医生系统","date":"2022-06-27T08:20:49.000Z","author":"Evan","_content":"\n# 享疗共享医生系统\n\n本系统使用B/S结构设计，运用了Bootstrap、JSP等前端页面技术，后台使用Java语言、Spring、SpringMVC、Mybatis框架技术，并使用MySql数据库技术为数据存储提供支持。包括用户模块，医生模块，管理员模块。主要的功能为用户注册，线上问诊，医生进驻，浏览医院信息，浏览医学新闻，用户的信息管理等。本选题旨在促进移动医疗行业的转型和发展, 缓解社会医疗保障系统的压力，提高医疗资源配置的合理性。\n\n## 开发技术与工具\n\n**工具**：IntelliJ IDEA、Navicat\n\n**开发语言：**Java\n\n**前端技术：**JSP、Ajax、bootstrap\n\n**后端技术：**SSM框架（Spring、SpringMVC、Mybatis）\n\n**数据存储**：MySQL\n\n## 功能描述\n\n**患者：**\n\n(1) 用户登录注册功能\n\n患者用户可以通过注册获取登录账号，通过账号密码登录进入系统。\n\n(2) 找医院模块\n\n患者可以查看享疗共享医生系统中已经收录的医院信息，点击医院图片查看医院详细信息。并选择医院进行预约功能，可以查看该医院的已入驻的共享医生。\n\n(3) 找医生模块\n\n患者可以通过选择科室从而选择合适专家的医生，点击医生头像进去医生详情页面，浏览医生的职业信息，通过选择对比，选择合适自己的医生，并发送病情给医生，医生诊断后给出治疗方案，从而达到线上“面对面”问诊功能。\n\n(4) 个人信息模块\n\n可以通过该模块，修改用户的个人信息，修改账号密码。\n\n(5) 新闻模块\n\n用户可以查看最新的医疗新闻。\n\n \n\n**医生：**\n\n(1) 医生入驻\n\n医生用户可以通过注册获取登录账号，通过账号密码登录进入系统，提交相关信息，审核通过便成为享疗系统共享医生。\n\n(2) 问诊\n\n医生用户登录系统后便可以接收患者的信息，并进行回复。\n\n \n\n**管理员：**\n\n(1) 登录\n\n管理员输入账号密码登录系统\n\n(2) 用户管理模块\n\n可以查看所有用户信息，并对用户账号进行删除，批量删除，修改用户信息等功能。\n\n(3) 医生管理模块\n\n可以查看所有医生信息，对医生进行审核，修改医生的信息和医生照片，对医生账号进行删除。\n\n(4) 医院管理模块\n\n上传各大医院的相关信息，更换医院图片，对医院信息进行修改、删除、添加操作。\n\n(5) 新闻模块\n\n上传新闻图片和文字，对新闻进行增加、删除、修改操作。\n\n## 系统架构\n\n本系统系统使用的架构模型为MVC模型\n\n## 模块结构\n\n![]()![模块结构](/img/享疗共享医生系统/模块结构.png)\n\n## 数据库设计\n\n![](/img/享疗共享医生系统/数据库设计.PNG)\n\n## 系统设计\n\n![](/img/享疗共享医生系统/流程图.png)\n","source":"_posts/享疗共享医生系统.md","raw":"---\ntitle: 享疗共享医生系统\ndate: 2022-06-27 16:20:49\ncategories: 项目\nauthor: Evan\ntags:\n---\n\n# 享疗共享医生系统\n\n本系统使用B/S结构设计，运用了Bootstrap、JSP等前端页面技术，后台使用Java语言、Spring、SpringMVC、Mybatis框架技术，并使用MySql数据库技术为数据存储提供支持。包括用户模块，医生模块，管理员模块。主要的功能为用户注册，线上问诊，医生进驻，浏览医院信息，浏览医学新闻，用户的信息管理等。本选题旨在促进移动医疗行业的转型和发展, 缓解社会医疗保障系统的压力，提高医疗资源配置的合理性。\n\n## 开发技术与工具\n\n**工具**：IntelliJ IDEA、Navicat\n\n**开发语言：**Java\n\n**前端技术：**JSP、Ajax、bootstrap\n\n**后端技术：**SSM框架（Spring、SpringMVC、Mybatis）\n\n**数据存储**：MySQL\n\n## 功能描述\n\n**患者：**\n\n(1) 用户登录注册功能\n\n患者用户可以通过注册获取登录账号，通过账号密码登录进入系统。\n\n(2) 找医院模块\n\n患者可以查看享疗共享医生系统中已经收录的医院信息，点击医院图片查看医院详细信息。并选择医院进行预约功能，可以查看该医院的已入驻的共享医生。\n\n(3) 找医生模块\n\n患者可以通过选择科室从而选择合适专家的医生，点击医生头像进去医生详情页面，浏览医生的职业信息，通过选择对比，选择合适自己的医生，并发送病情给医生，医生诊断后给出治疗方案，从而达到线上“面对面”问诊功能。\n\n(4) 个人信息模块\n\n可以通过该模块，修改用户的个人信息，修改账号密码。\n\n(5) 新闻模块\n\n用户可以查看最新的医疗新闻。\n\n \n\n**医生：**\n\n(1) 医生入驻\n\n医生用户可以通过注册获取登录账号，通过账号密码登录进入系统，提交相关信息，审核通过便成为享疗系统共享医生。\n\n(2) 问诊\n\n医生用户登录系统后便可以接收患者的信息，并进行回复。\n\n \n\n**管理员：**\n\n(1) 登录\n\n管理员输入账号密码登录系统\n\n(2) 用户管理模块\n\n可以查看所有用户信息，并对用户账号进行删除，批量删除，修改用户信息等功能。\n\n(3) 医生管理模块\n\n可以查看所有医生信息，对医生进行审核，修改医生的信息和医生照片，对医生账号进行删除。\n\n(4) 医院管理模块\n\n上传各大医院的相关信息，更换医院图片，对医院信息进行修改、删除、添加操作。\n\n(5) 新闻模块\n\n上传新闻图片和文字，对新闻进行增加、删除、修改操作。\n\n## 系统架构\n\n本系统系统使用的架构模型为MVC模型\n\n## 模块结构\n\n![]()![模块结构](/img/享疗共享医生系统/模块结构.png)\n\n## 数据库设计\n\n![](/img/享疗共享医生系统/数据库设计.PNG)\n\n## 系统设计\n\n![](/img/享疗共享医生系统/流程图.png)\n","slug":"享疗共享医生系统","published":1,"updated":"2022-06-29T02:29:01.208Z","_id":"cl4wh45d90000u8u3gsnz878i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"享疗共享医生系统\"><a href=\"#享疗共享医生系统\" class=\"headerlink\" title=\"享疗共享医生系统\"></a>享疗共享医生系统</h1><p>本系统使用B/S结构设计，运用了Bootstrap、JSP等前端页面技术，后台使用Java语言、Spring、SpringMVC、Mybatis框架技术，并使用MySql数据库技术为数据存储提供支持。包括用户模块，医生模块，管理员模块。主要的功能为用户注册，线上问诊，医生进驻，浏览医院信息，浏览医学新闻，用户的信息管理等。本选题旨在促进移动医疗行业的转型和发展, 缓解社会医疗保障系统的压力，提高医疗资源配置的合理性。</p>\n<h2 id=\"开发技术与工具\"><a href=\"#开发技术与工具\" class=\"headerlink\" title=\"开发技术与工具\"></a>开发技术与工具</h2><p><strong>工具</strong>：IntelliJ IDEA、Navicat</p>\n<p><strong>开发语言：</strong>Java</p>\n<p><strong>前端技术：</strong>JSP、Ajax、bootstrap</p>\n<p><strong>后端技术：</strong>SSM框架（Spring、SpringMVC、Mybatis）</p>\n<p><strong>数据存储</strong>：MySQL</p>\n<h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述\"></a>功能描述</h2><p><strong>患者：</strong></p>\n<p>(1) 用户登录注册功能</p>\n<p>患者用户可以通过注册获取登录账号，通过账号密码登录进入系统。</p>\n<p>(2) 找医院模块</p>\n<p>患者可以查看享疗共享医生系统中已经收录的医院信息，点击医院图片查看医院详细信息。并选择医院进行预约功能，可以查看该医院的已入驻的共享医生。</p>\n<p>(3) 找医生模块</p>\n<p>患者可以通过选择科室从而选择合适专家的医生，点击医生头像进去医生详情页面，浏览医生的职业信息，通过选择对比，选择合适自己的医生，并发送病情给医生，医生诊断后给出治疗方案，从而达到线上“面对面”问诊功能。</p>\n<p>(4) 个人信息模块</p>\n<p>可以通过该模块，修改用户的个人信息，修改账号密码。</p>\n<p>(5) 新闻模块</p>\n<p>用户可以查看最新的医疗新闻。</p>\n<p><strong>医生：</strong></p>\n<p>(1) 医生入驻</p>\n<p>医生用户可以通过注册获取登录账号，通过账号密码登录进入系统，提交相关信息，审核通过便成为享疗系统共享医生。</p>\n<p>(2) 问诊</p>\n<p>医生用户登录系统后便可以接收患者的信息，并进行回复。</p>\n<p><strong>管理员：</strong></p>\n<p>(1) 登录</p>\n<p>管理员输入账号密码登录系统</p>\n<p>(2) 用户管理模块</p>\n<p>可以查看所有用户信息，并对用户账号进行删除，批量删除，修改用户信息等功能。</p>\n<p>(3) 医生管理模块</p>\n<p>可以查看所有医生信息，对医生进行审核，修改医生的信息和医生照片，对医生账号进行删除。</p>\n<p>(4) 医院管理模块</p>\n<p>上传各大医院的相关信息，更换医院图片，对医院信息进行修改、删除、添加操作。</p>\n<p>(5) 新闻模块</p>\n<p>上传新闻图片和文字，对新闻进行增加、删除、修改操作。</p>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>本系统系统使用的架构模型为MVC模型</p>\n<h2 id=\"模块结构\"><a href=\"#模块结构\" class=\"headerlink\" title=\"模块结构\"></a>模块结构</h2><p><img src=\"\"><img src=\"/img/%E4%BA%AB%E7%96%97%E5%85%B1%E4%BA%AB%E5%8C%BB%E7%94%9F%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84.png\" alt=\"模块结构\"></p>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p><img src=\"/img/%E4%BA%AB%E7%96%97%E5%85%B1%E4%BA%AB%E5%8C%BB%E7%94%9F%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.PNG\"></p>\n<h2 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h2><p><img src=\"/img/%E4%BA%AB%E7%96%97%E5%85%B1%E4%BA%AB%E5%8C%BB%E7%94%9F%E7%B3%BB%E7%BB%9F/%E6%B5%81%E7%A8%8B%E5%9B%BE.png\"></p>\n","site":{"data":{}},"wordcount":941,"excerpt":"","more":"<h1 id=\"享疗共享医生系统\"><a href=\"#享疗共享医生系统\" class=\"headerlink\" title=\"享疗共享医生系统\"></a>享疗共享医生系统</h1><p>本系统使用B/S结构设计，运用了Bootstrap、JSP等前端页面技术，后台使用Java语言、Spring、SpringMVC、Mybatis框架技术，并使用MySql数据库技术为数据存储提供支持。包括用户模块，医生模块，管理员模块。主要的功能为用户注册，线上问诊，医生进驻，浏览医院信息，浏览医学新闻，用户的信息管理等。本选题旨在促进移动医疗行业的转型和发展, 缓解社会医疗保障系统的压力，提高医疗资源配置的合理性。</p>\n<h2 id=\"开发技术与工具\"><a href=\"#开发技术与工具\" class=\"headerlink\" title=\"开发技术与工具\"></a>开发技术与工具</h2><p><strong>工具</strong>：IntelliJ IDEA、Navicat</p>\n<p><strong>开发语言：</strong>Java</p>\n<p><strong>前端技术：</strong>JSP、Ajax、bootstrap</p>\n<p><strong>后端技术：</strong>SSM框架（Spring、SpringMVC、Mybatis）</p>\n<p><strong>数据存储</strong>：MySQL</p>\n<h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述\"></a>功能描述</h2><p><strong>患者：</strong></p>\n<p>(1) 用户登录注册功能</p>\n<p>患者用户可以通过注册获取登录账号，通过账号密码登录进入系统。</p>\n<p>(2) 找医院模块</p>\n<p>患者可以查看享疗共享医生系统中已经收录的医院信息，点击医院图片查看医院详细信息。并选择医院进行预约功能，可以查看该医院的已入驻的共享医生。</p>\n<p>(3) 找医生模块</p>\n<p>患者可以通过选择科室从而选择合适专家的医生，点击医生头像进去医生详情页面，浏览医生的职业信息，通过选择对比，选择合适自己的医生，并发送病情给医生，医生诊断后给出治疗方案，从而达到线上“面对面”问诊功能。</p>\n<p>(4) 个人信息模块</p>\n<p>可以通过该模块，修改用户的个人信息，修改账号密码。</p>\n<p>(5) 新闻模块</p>\n<p>用户可以查看最新的医疗新闻。</p>\n<p><strong>医生：</strong></p>\n<p>(1) 医生入驻</p>\n<p>医生用户可以通过注册获取登录账号，通过账号密码登录进入系统，提交相关信息，审核通过便成为享疗系统共享医生。</p>\n<p>(2) 问诊</p>\n<p>医生用户登录系统后便可以接收患者的信息，并进行回复。</p>\n<p><strong>管理员：</strong></p>\n<p>(1) 登录</p>\n<p>管理员输入账号密码登录系统</p>\n<p>(2) 用户管理模块</p>\n<p>可以查看所有用户信息，并对用户账号进行删除，批量删除，修改用户信息等功能。</p>\n<p>(3) 医生管理模块</p>\n<p>可以查看所有医生信息，对医生进行审核，修改医生的信息和医生照片，对医生账号进行删除。</p>\n<p>(4) 医院管理模块</p>\n<p>上传各大医院的相关信息，更换医院图片，对医院信息进行修改、删除、添加操作。</p>\n<p>(5) 新闻模块</p>\n<p>上传新闻图片和文字，对新闻进行增加、删除、修改操作。</p>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>本系统系统使用的架构模型为MVC模型</p>\n<h2 id=\"模块结构\"><a href=\"#模块结构\" class=\"headerlink\" title=\"模块结构\"></a>模块结构</h2><p><img src=\"\"><img src=\"/img/%E4%BA%AB%E7%96%97%E5%85%B1%E4%BA%AB%E5%8C%BB%E7%94%9F%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84.png\" alt=\"模块结构\"></p>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p><img src=\"/img/%E4%BA%AB%E7%96%97%E5%85%B1%E4%BA%AB%E5%8C%BB%E7%94%9F%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.PNG\"></p>\n<h2 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h2><p><img src=\"/img/%E4%BA%AB%E7%96%97%E5%85%B1%E4%BA%AB%E5%8C%BB%E7%94%9F%E7%B3%BB%E7%BB%9F/%E6%B5%81%E7%A8%8B%E5%9B%BE.png\"></p>\n"},{"title":"Java后端实现token的生成和验证","date":"2022-06-27T08:47:58.000Z","author":"Evan","_content":"\n# Java后端实现token的生成和验证\n\n在Java后端实现token登录功能\n\n## 什么是token？\n\ntoken的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。\n\n当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。\n\n简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）。\n\n## 为什么要用token？\n\nToken的目的是为了验证用户登录情况以及减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。\n\n避免CSRF跨站伪造攻击，支持跨域，适合前后端分离项目。\n\n## 使用方法\n\n**基于JWT的token认证实现**\n\n**1.引入依赖**\n\n```\n<dependency>\n      <groupId>com.auth0</groupId>\n      <artifactId>java-jwt</artifactId>\n      <version>3.8.2</version>\n    </dependency>\n```\n\n**2.创建工具类TokenUtil**\n\n```java\npublic class TokenUtil {\n\t//设置过期时间\n    private static final long EXPIRE_TIME= 15*60*1000;\n    //token秘钥\n    private static final String TOKEN_SECRET=\"tokenqkj\";  \n\n    //实现签名方法\n    public static String sign(Admin admin){\n\n        String token = null;\n        try {\n            Date expiresAt = new Date(System.currentTimeMillis() + EXPIRE_TIME);\n            token = JWT.create()\n                    .withIssuer(\"auth0\")\n                    .withClaim(\"name\", admin.getName())\n                    .withExpiresAt(expiresAt)\n                    // 使用了HMAC256加密算法。\n                    .sign(Algorithm.HMAC256(TOKEN_SECRET));\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        return token;\n    }\n\n    \n    //签名验证\n    public static boolean verify(String token){\n      try {\n            JWTVerifier verifier = JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(\"auth0\").build();\n            DecodedJWT jwt = verifier.verify(token);\n            System.out.println(\"认证通过：\");//控制台打印信息\n            System.out.println(\"issuer: \" + jwt.getIssuer());\n            System.out.println(\"name: \" + jwt.getClaim(\"name\").asString());\n            System.out.println(\"过期时间：      \" + jwt.getExpiresAt());\n            return true;\n        } catch (Exception e){\n            return false;\n        }\n    }\n}\n\n```\n\n**3.创建token拦截器TokenInterceptor** **\n\n```java\n@Component\npublic class TokenInterceptor implements HandlerInterceptor {\n\n\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)throws Exception{\n\n        if(request.getMethod().equals(\"OPTIONS\")){\n            response.setStatus(HttpServletResponse.SC_OK);\n            return true;\n        }\n\n        response.setCharacterEncoding(\"utf-8\");\n\n        String token = request.getHeader(\"token\");\n        if(token != null){\n            boolean result = TokenUtil.verify(token);\n            if(result){\n                System.out.println(\"通过拦截器\");\n                return true;\n            }\n        }\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json; charset=utf-8\");\n        PrintWriter out = null;\n        try{\n            JSONObject json = new JSONObject();\n            json.put(\"success\",\"false\");\n            json.put(\"msg\",\"认证失败，未通过拦截器\");\n            json.put(\"code\",\"50000\");\n            response.getWriter().append(json.toJSONString());\n            System.out.println(\"认证失败，未通过拦截器\");\n            //        response.getWriter().write(\"50000\");\n        }catch (Exception e){\n            e.printStackTrace();\n            response.sendError(500);\n            return false;\n        }\n\n        return false;\n\n    }\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        response.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Authorization,Content-Type,X-Requested-With,token\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"GET,HEAD,OPTIONS,POST,PUT,DELETE\");\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n//        System.out.println(\"方法处理后==========\");\n    }\n}\n```\n\n**4.创建入口拦截器IntercepterConfig**\n\n```java\n@Configuration\npublic class IntercepterConfig implements WebMvcConfigurer {\n\n    private TokenInterceptor tokenInterceptor;\n\n    //构造方法\n    public IntercepterConfig(TokenInterceptor tokenInterceptor){\n        this.tokenInterceptor = tokenInterceptor;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry){\n        List<String> excludePath = new ArrayList<>();//excludePath开放不需要token验证的资源\n        excludePath.add(\"/register\"); //注册\n        excludePath.add(\"/api/login\"); //登录\n        excludePath.add(\"/logout\"); //登出\n        excludePath.add(\"/static/**\");  //静态资源\n        excludePath.add(\"/swagger-ui.html/**\");  //静态资源\n        excludePath.add(\"/assets/**\");  //静态资源\n\n        registry.addInterceptor(tokenInterceptor)\n                .addPathPatterns(\"/**\")\n                .excludePathPatterns(excludePath);\n        WebMvcConfigurer.super.addInterceptors(registry);\n\n    }\n    \n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"*\")\n                .allowCredentials(true)\n                .allowedMethods(\"GET\", \"POST\", \"DELETE\", \"PUT\", \"PATCH\", \"OPTIONS\", \"HEAD\")\n                .maxAge(3600 * 24);\n    }\n}\n```\n\n**5.控制类的编写**\n\n```Java\n@PostMapping(value = \"/api/login\")\n    @CrossOrigin\n    public Result login (String name, String password, HttpServletResponse response){\n        String token=null;\n        Admin admin = service.login(name, password);\n        if (admin != null) {\n            token = TokenUtil.sign(admin);//用户存在就生成token\n        }\n        if(token != null){\n            return new Result(200,\"\",token);\n        }\n        else {\n            return new Result(400,\"账号密码错误\",\"\");\n        }\n\n    }\n```\n\n","source":"_posts/Java后端实现token的生成和验证.md","raw":"---\ntitle: Java后端实现token的生成和验证\ndate: 2022-06-27 16:47:58\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n# Java后端实现token的生成和验证\n\n在Java后端实现token登录功能\n\n## 什么是token？\n\ntoken的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。\n\n当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。\n\n简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）。\n\n## 为什么要用token？\n\nToken的目的是为了验证用户登录情况以及减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。\n\n避免CSRF跨站伪造攻击，支持跨域，适合前后端分离项目。\n\n## 使用方法\n\n**基于JWT的token认证实现**\n\n**1.引入依赖**\n\n```\n<dependency>\n      <groupId>com.auth0</groupId>\n      <artifactId>java-jwt</artifactId>\n      <version>3.8.2</version>\n    </dependency>\n```\n\n**2.创建工具类TokenUtil**\n\n```java\npublic class TokenUtil {\n\t//设置过期时间\n    private static final long EXPIRE_TIME= 15*60*1000;\n    //token秘钥\n    private static final String TOKEN_SECRET=\"tokenqkj\";  \n\n    //实现签名方法\n    public static String sign(Admin admin){\n\n        String token = null;\n        try {\n            Date expiresAt = new Date(System.currentTimeMillis() + EXPIRE_TIME);\n            token = JWT.create()\n                    .withIssuer(\"auth0\")\n                    .withClaim(\"name\", admin.getName())\n                    .withExpiresAt(expiresAt)\n                    // 使用了HMAC256加密算法。\n                    .sign(Algorithm.HMAC256(TOKEN_SECRET));\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        return token;\n    }\n\n    \n    //签名验证\n    public static boolean verify(String token){\n      try {\n            JWTVerifier verifier = JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(\"auth0\").build();\n            DecodedJWT jwt = verifier.verify(token);\n            System.out.println(\"认证通过：\");//控制台打印信息\n            System.out.println(\"issuer: \" + jwt.getIssuer());\n            System.out.println(\"name: \" + jwt.getClaim(\"name\").asString());\n            System.out.println(\"过期时间：      \" + jwt.getExpiresAt());\n            return true;\n        } catch (Exception e){\n            return false;\n        }\n    }\n}\n\n```\n\n**3.创建token拦截器TokenInterceptor** **\n\n```java\n@Component\npublic class TokenInterceptor implements HandlerInterceptor {\n\n\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)throws Exception{\n\n        if(request.getMethod().equals(\"OPTIONS\")){\n            response.setStatus(HttpServletResponse.SC_OK);\n            return true;\n        }\n\n        response.setCharacterEncoding(\"utf-8\");\n\n        String token = request.getHeader(\"token\");\n        if(token != null){\n            boolean result = TokenUtil.verify(token);\n            if(result){\n                System.out.println(\"通过拦截器\");\n                return true;\n            }\n        }\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json; charset=utf-8\");\n        PrintWriter out = null;\n        try{\n            JSONObject json = new JSONObject();\n            json.put(\"success\",\"false\");\n            json.put(\"msg\",\"认证失败，未通过拦截器\");\n            json.put(\"code\",\"50000\");\n            response.getWriter().append(json.toJSONString());\n            System.out.println(\"认证失败，未通过拦截器\");\n            //        response.getWriter().write(\"50000\");\n        }catch (Exception e){\n            e.printStackTrace();\n            response.sendError(500);\n            return false;\n        }\n\n        return false;\n\n    }\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        response.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Authorization,Content-Type,X-Requested-With,token\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"GET,HEAD,OPTIONS,POST,PUT,DELETE\");\n        response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n//        System.out.println(\"方法处理后==========\");\n    }\n}\n```\n\n**4.创建入口拦截器IntercepterConfig**\n\n```java\n@Configuration\npublic class IntercepterConfig implements WebMvcConfigurer {\n\n    private TokenInterceptor tokenInterceptor;\n\n    //构造方法\n    public IntercepterConfig(TokenInterceptor tokenInterceptor){\n        this.tokenInterceptor = tokenInterceptor;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry){\n        List<String> excludePath = new ArrayList<>();//excludePath开放不需要token验证的资源\n        excludePath.add(\"/register\"); //注册\n        excludePath.add(\"/api/login\"); //登录\n        excludePath.add(\"/logout\"); //登出\n        excludePath.add(\"/static/**\");  //静态资源\n        excludePath.add(\"/swagger-ui.html/**\");  //静态资源\n        excludePath.add(\"/assets/**\");  //静态资源\n\n        registry.addInterceptor(tokenInterceptor)\n                .addPathPatterns(\"/**\")\n                .excludePathPatterns(excludePath);\n        WebMvcConfigurer.super.addInterceptors(registry);\n\n    }\n    \n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"*\")\n                .allowCredentials(true)\n                .allowedMethods(\"GET\", \"POST\", \"DELETE\", \"PUT\", \"PATCH\", \"OPTIONS\", \"HEAD\")\n                .maxAge(3600 * 24);\n    }\n}\n```\n\n**5.控制类的编写**\n\n```Java\n@PostMapping(value = \"/api/login\")\n    @CrossOrigin\n    public Result login (String name, String password, HttpServletResponse response){\n        String token=null;\n        Admin admin = service.login(name, password);\n        if (admin != null) {\n            token = TokenUtil.sign(admin);//用户存在就生成token\n        }\n        if(token != null){\n            return new Result(200,\"\",token);\n        }\n        else {\n            return new Result(400,\"账号密码错误\",\"\");\n        }\n\n    }\n```\n\n","slug":"Java后端实现token的生成和验证","published":1,"updated":"2022-06-27T09:47:56.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wk4lji0000b4u38gmfbscj","content":"<h1 id=\"Java后端实现token的生成和验证\"><a href=\"#Java后端实现token的生成和验证\" class=\"headerlink\" title=\"Java后端实现token的生成和验证\"></a>Java后端实现token的生成和验证</h1><p>在Java后端实现token登录功能</p>\n<h2 id=\"什么是token？\"><a href=\"#什么是token？\" class=\"headerlink\" title=\"什么是token？\"></a>什么是token？</h2><p>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</p>\n<p>当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p>\n<p>简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）。</p>\n<h2 id=\"为什么要用token？\"><a href=\"#为什么要用token？\" class=\"headerlink\" title=\"为什么要用token？\"></a>为什么要用token？</h2><p>Token的目的是为了验证用户登录情况以及减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>\n<p>避免CSRF跨站伪造攻击，支持跨域，适合前后端分离项目。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p><strong>基于JWT的token认证实现</strong></p>\n<p><strong>1.引入依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.auth0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>java-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>2.创建工具类TokenUtil</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TokenUtil</span> &#123;<br>\t<span class=\"hljs-comment\">//设置过期时间</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> EXPIRE_TIME= <span class=\"hljs-number\">15</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>;<br>    <span class=\"hljs-comment\">//token秘钥</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String TOKEN_SECRET=<span class=\"hljs-string\">&quot;tokenqkj&quot;</span>;  <br><br>    <span class=\"hljs-comment\">//实现签名方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">sign</span><span class=\"hljs-params\">(Admin admin)</span>&#123;<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">expiresAt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(System.currentTimeMillis() + EXPIRE_TIME);<br>            token = JWT.create()<br>                    .withIssuer(<span class=\"hljs-string\">&quot;auth0&quot;</span>)<br>                    .withClaim(<span class=\"hljs-string\">&quot;name&quot;</span>, admin.getName())<br>                    .withExpiresAt(expiresAt)<br>                    <span class=\"hljs-comment\">// 使用了HMAC256加密算法。</span><br>                    .sign(Algorithm.HMAC256(TOKEN_SECRET));<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> token;<br>    &#125;<br><br>    <br>    <span class=\"hljs-comment\">//签名验证</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(String token)</span>&#123;<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">JWTVerifier</span> <span class=\"hljs-variable\">verifier</span> <span class=\"hljs-operator\">=</span> JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(<span class=\"hljs-string\">&quot;auth0&quot;</span>).build();<br>            <span class=\"hljs-type\">DecodedJWT</span> <span class=\"hljs-variable\">jwt</span> <span class=\"hljs-operator\">=</span> verifier.verify(token);<br>            System.out.println(<span class=\"hljs-string\">&quot;认证通过：&quot;</span>);<span class=\"hljs-comment\">//控制台打印信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;issuer: &quot;</span> + jwt.getIssuer());<br>            System.out.println(<span class=\"hljs-string\">&quot;name: &quot;</span> + jwt.getClaim(<span class=\"hljs-string\">&quot;name&quot;</span>).asString());<br>            System.out.println(<span class=\"hljs-string\">&quot;过期时间：      &quot;</span> + jwt.getExpiresAt());<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>3.创建token拦截器TokenInterceptor</strong> **</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TokenInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br><br><br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><span class=\"hljs-keyword\">throws</span> Exception&#123;<br><br>        <span class=\"hljs-keyword\">if</span>(request.getMethod().equals(<span class=\"hljs-string\">&quot;OPTIONS&quot;</span>))&#123;<br>            response.setStatus(HttpServletResponse.SC_OK);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br><br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span>(token != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> TokenUtil.verify(token);<br>            <span class=\"hljs-keyword\">if</span>(result)&#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;通过拦截器&quot;</span>);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>        &#125;<br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>);<br>        <span class=\"hljs-type\">PrintWriter</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">json</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JSONObject</span>();<br>            json.put(<span class=\"hljs-string\">&quot;success&quot;</span>,<span class=\"hljs-string\">&quot;false&quot;</span>);<br>            json.put(<span class=\"hljs-string\">&quot;msg&quot;</span>,<span class=\"hljs-string\">&quot;认证失败，未通过拦截器&quot;</span>);<br>            json.put(<span class=\"hljs-string\">&quot;code&quot;</span>,<span class=\"hljs-string\">&quot;50000&quot;</span>);<br>            response.getWriter().append(json.toJSONString());<br>            System.out.println(<span class=\"hljs-string\">&quot;认证失败，未通过拦截器&quot;</span>);<br>            <span class=\"hljs-comment\">//        response.getWriter().write(&quot;50000&quot;);</span><br>        &#125;<span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            response.sendError(<span class=\"hljs-number\">500</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br><br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCompletion</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Authorization,Content-Type,X-Requested-With,token&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;GET,HEAD,OPTIONS,POST,PUT,DELETE&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"hljs-string\">&quot;3600&quot;</span>);<br><span class=\"hljs-comment\">//        System.out.println(&quot;方法处理后==========&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.创建入口拦截器IntercepterConfig</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IntercepterConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> TokenInterceptor tokenInterceptor;<br><br>    <span class=\"hljs-comment\">//构造方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">IntercepterConfig</span><span class=\"hljs-params\">(TokenInterceptor tokenInterceptor)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.tokenInterceptor = tokenInterceptor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span>&#123;<br>        List&lt;String&gt; excludePath = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<span class=\"hljs-comment\">//excludePath开放不需要token验证的资源</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/register&quot;</span>); <span class=\"hljs-comment\">//注册</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/api/login&quot;</span>); <span class=\"hljs-comment\">//登录</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/logout&quot;</span>); <span class=\"hljs-comment\">//登出</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/static/**&quot;</span>);  <span class=\"hljs-comment\">//静态资源</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/swagger-ui.html/**&quot;</span>);  <span class=\"hljs-comment\">//静态资源</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/assets/**&quot;</span>);  <span class=\"hljs-comment\">//静态资源</span><br><br>        registry.addInterceptor(tokenInterceptor)<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>)<br>                .excludePathPatterns(excludePath);<br>        WebMvcConfigurer.<span class=\"hljs-built_in\">super</span>.addInterceptors(registry);<br><br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addCorsMappings</span><span class=\"hljs-params\">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class=\"hljs-string\">&quot;/**&quot;</span>)<br>                .allowedOrigins(<span class=\"hljs-string\">&quot;*&quot;</span>)<br>                .allowCredentials(<span class=\"hljs-literal\">true</span>)<br>                .allowedMethods(<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-string\">&quot;DELETE&quot;</span>, <span class=\"hljs-string\">&quot;PUT&quot;</span>, <span class=\"hljs-string\">&quot;PATCH&quot;</span>, <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>, <span class=\"hljs-string\">&quot;HEAD&quot;</span>)<br>                .maxAge(<span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">24</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.控制类的编写</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-meta\">@PostMapping(value = &quot;/api/login&quot;)</span><br>    <span class=\"hljs-meta\">@CrossOrigin</span><br>    <span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title function_\">login</span> <span class=\"hljs-params\">(String name, String password, HttpServletResponse response)</span>&#123;<br>        String token=<span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Admin</span> <span class=\"hljs-variable\">admin</span> <span class=\"hljs-operator\">=</span> service.login(name, password);<br>        <span class=\"hljs-keyword\">if</span> (admin != <span class=\"hljs-literal\">null</span>) &#123;<br>            token = TokenUtil.sign(admin);<span class=\"hljs-comment\">//用户存在就生成token</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(token != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-string\">&quot;&quot;</span>,token);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>(<span class=\"hljs-number\">400</span>,<span class=\"hljs-string\">&quot;账号密码错误&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":5211,"excerpt":"","more":"<h1 id=\"Java后端实现token的生成和验证\"><a href=\"#Java后端实现token的生成和验证\" class=\"headerlink\" title=\"Java后端实现token的生成和验证\"></a>Java后端实现token的生成和验证</h1><p>在Java后端实现token登录功能</p>\n<h2 id=\"什么是token？\"><a href=\"#什么是token？\" class=\"headerlink\" title=\"什么是token？\"></a>什么是token？</h2><p>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</p>\n<p>当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p>\n<p>简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）。</p>\n<h2 id=\"为什么要用token？\"><a href=\"#为什么要用token？\" class=\"headerlink\" title=\"为什么要用token？\"></a>为什么要用token？</h2><p>Token的目的是为了验证用户登录情况以及减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>\n<p>避免CSRF跨站伪造攻击，支持跨域，适合前后端分离项目。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p><strong>基于JWT的token认证实现</strong></p>\n<p><strong>1.引入依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.auth0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>java-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>2.创建工具类TokenUtil</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TokenUtil</span> &#123;<br>\t<span class=\"hljs-comment\">//设置过期时间</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> EXPIRE_TIME= <span class=\"hljs-number\">15</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">1000</span>;<br>    <span class=\"hljs-comment\">//token秘钥</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String TOKEN_SECRET=<span class=\"hljs-string\">&quot;tokenqkj&quot;</span>;  <br><br>    <span class=\"hljs-comment\">//实现签名方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">sign</span><span class=\"hljs-params\">(Admin admin)</span>&#123;<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">expiresAt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(System.currentTimeMillis() + EXPIRE_TIME);<br>            token = JWT.create()<br>                    .withIssuer(<span class=\"hljs-string\">&quot;auth0&quot;</span>)<br>                    .withClaim(<span class=\"hljs-string\">&quot;name&quot;</span>, admin.getName())<br>                    .withExpiresAt(expiresAt)<br>                    <span class=\"hljs-comment\">// 使用了HMAC256加密算法。</span><br>                    .sign(Algorithm.HMAC256(TOKEN_SECRET));<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> token;<br>    &#125;<br><br>    <br>    <span class=\"hljs-comment\">//签名验证</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(String token)</span>&#123;<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">JWTVerifier</span> <span class=\"hljs-variable\">verifier</span> <span class=\"hljs-operator\">=</span> JWT.require(Algorithm.HMAC256(TOKEN_SECRET)).withIssuer(<span class=\"hljs-string\">&quot;auth0&quot;</span>).build();<br>            <span class=\"hljs-type\">DecodedJWT</span> <span class=\"hljs-variable\">jwt</span> <span class=\"hljs-operator\">=</span> verifier.verify(token);<br>            System.out.println(<span class=\"hljs-string\">&quot;认证通过：&quot;</span>);<span class=\"hljs-comment\">//控制台打印信息</span><br>            System.out.println(<span class=\"hljs-string\">&quot;issuer: &quot;</span> + jwt.getIssuer());<br>            System.out.println(<span class=\"hljs-string\">&quot;name: &quot;</span> + jwt.getClaim(<span class=\"hljs-string\">&quot;name&quot;</span>).asString());<br>            System.out.println(<span class=\"hljs-string\">&quot;过期时间：      &quot;</span> + jwt.getExpiresAt());<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>3.创建token拦截器TokenInterceptor</strong> **</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TokenInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br><br><br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><span class=\"hljs-keyword\">throws</span> Exception&#123;<br><br>        <span class=\"hljs-keyword\">if</span>(request.getMethod().equals(<span class=\"hljs-string\">&quot;OPTIONS&quot;</span>))&#123;<br>            response.setStatus(HttpServletResponse.SC_OK);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br><br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span>(token != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> TokenUtil.verify(token);<br>            <span class=\"hljs-keyword\">if</span>(result)&#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;通过拦截器&quot;</span>);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>        &#125;<br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class=\"hljs-string\">&quot;application/json; charset=utf-8&quot;</span>);<br>        <span class=\"hljs-type\">PrintWriter</span> <span class=\"hljs-variable\">out</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span>&#123;<br>            <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">json</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JSONObject</span>();<br>            json.put(<span class=\"hljs-string\">&quot;success&quot;</span>,<span class=\"hljs-string\">&quot;false&quot;</span>);<br>            json.put(<span class=\"hljs-string\">&quot;msg&quot;</span>,<span class=\"hljs-string\">&quot;认证失败，未通过拦截器&quot;</span>);<br>            json.put(<span class=\"hljs-string\">&quot;code&quot;</span>,<span class=\"hljs-string\">&quot;50000&quot;</span>);<br>            response.getWriter().append(json.toJSONString());<br>            System.out.println(<span class=\"hljs-string\">&quot;认证失败，未通过拦截器&quot;</span>);<br>            <span class=\"hljs-comment\">//        response.getWriter().write(&quot;50000&quot;);</span><br>        &#125;<span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            response.sendError(<span class=\"hljs-number\">500</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br><br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCompletion</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Authorization,Content-Type,X-Requested-With,token&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;GET,HEAD,OPTIONS,POST,PUT,DELETE&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>);<br>        response.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"hljs-string\">&quot;3600&quot;</span>);<br><span class=\"hljs-comment\">//        System.out.println(&quot;方法处理后==========&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.创建入口拦截器IntercepterConfig</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IntercepterConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> TokenInterceptor tokenInterceptor;<br><br>    <span class=\"hljs-comment\">//构造方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">IntercepterConfig</span><span class=\"hljs-params\">(TokenInterceptor tokenInterceptor)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.tokenInterceptor = tokenInterceptor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span>&#123;<br>        List&lt;String&gt; excludePath = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<span class=\"hljs-comment\">//excludePath开放不需要token验证的资源</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/register&quot;</span>); <span class=\"hljs-comment\">//注册</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/api/login&quot;</span>); <span class=\"hljs-comment\">//登录</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/logout&quot;</span>); <span class=\"hljs-comment\">//登出</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/static/**&quot;</span>);  <span class=\"hljs-comment\">//静态资源</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/swagger-ui.html/**&quot;</span>);  <span class=\"hljs-comment\">//静态资源</span><br>        excludePath.add(<span class=\"hljs-string\">&quot;/assets/**&quot;</span>);  <span class=\"hljs-comment\">//静态资源</span><br><br>        registry.addInterceptor(tokenInterceptor)<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>)<br>                .excludePathPatterns(excludePath);<br>        WebMvcConfigurer.<span class=\"hljs-built_in\">super</span>.addInterceptors(registry);<br><br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addCorsMappings</span><span class=\"hljs-params\">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class=\"hljs-string\">&quot;/**&quot;</span>)<br>                .allowedOrigins(<span class=\"hljs-string\">&quot;*&quot;</span>)<br>                .allowCredentials(<span class=\"hljs-literal\">true</span>)<br>                .allowedMethods(<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-string\">&quot;DELETE&quot;</span>, <span class=\"hljs-string\">&quot;PUT&quot;</span>, <span class=\"hljs-string\">&quot;PATCH&quot;</span>, <span class=\"hljs-string\">&quot;OPTIONS&quot;</span>, <span class=\"hljs-string\">&quot;HEAD&quot;</span>)<br>                .maxAge(<span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">24</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.控制类的编写</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-meta\">@PostMapping(value = &quot;/api/login&quot;)</span><br>    <span class=\"hljs-meta\">@CrossOrigin</span><br>    <span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title function_\">login</span> <span class=\"hljs-params\">(String name, String password, HttpServletResponse response)</span>&#123;<br>        String token=<span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Admin</span> <span class=\"hljs-variable\">admin</span> <span class=\"hljs-operator\">=</span> service.login(name, password);<br>        <span class=\"hljs-keyword\">if</span> (admin != <span class=\"hljs-literal\">null</span>) &#123;<br>            token = TokenUtil.sign(admin);<span class=\"hljs-comment\">//用户存在就生成token</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(token != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-string\">&quot;&quot;</span>,token);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Result</span>(<span class=\"hljs-number\">400</span>,<span class=\"hljs-string\">&quot;账号密码错误&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Vue编写token的登录验证","date":"2022-06-27T09:52:34.000Z","author":"Evan","_content":"\n## 实现Vue根据token拦截访问页面\n\n### 实现步骤\n\n1.前端登录，把用户信息传到后端。\n\n2.后端验证通过后生成token返回前端。\n\n3.前端获取token后用vuex和localStorage管理，进入其他页面。\n\n4.之后前端每一次权限操作如跳转路由，都需要判断是否存在token，若不存在，跳转至登录页。\n\n5.前端的请求操作都要在请求头带上token，后端验证请求头有token之后才开放接口。\n\n6.如果token已过期，清除token信息，跳转至登录页。\n\n\n\n## vue实现\n\n**1.获取后端传来的token**\n\n```js\nlogin () {\n                this.$axios\n                    .post('/login', this.$qs.stringify({name: this.loginForm.name,\n                        password: this.loginForm.password\n                    }))\n                    .then(successResponse => {\n                        if (successResponse.data.code === 200) {\n                            localStorage.setItem('token',successResponse.data.data);//存储token信息\n                            this.$router.replace({path: '/dashboard'})\n                        }\n                        else{\n                            alert(successResponse.data.message);\n                        }\n                    })\n                    .catch(failResponse => {\n\n                    })\n            }\n```\n\n**2.在路由中添加拦截**\n\nrequireAuth属性作用是表明该路由是否需要登录验证，在进行全局拦截时，我们将通过该属性判断路由的跳转，该属性包含在meta属性中:\n\n```js\nroutes = [\n    {\n        name: 'dashboard',\n        path: '/dashboard',\n        meta: {\n            requireAuth: true\n        }\n    },\n    {\n        name: 'login',\n        path: '/login'\n    }\n]\n```\n\n**3.在router/index.js添加路由守卫**\n\n```js\n\n// 使用 router.beforeEach 注册一个全局前置守卫，判断用户是否登陆\nrouter.beforeEach((to,from,next)=>{\n    //to 将要访问的路径\n    //from 代表从哪个路径而来\n    //next() 代表放行 next('xxx') 强制放行的xxx的路径\n    if(to.path==='/'||to.path==='/Login'){\n        next();\n    }else{\n        const tokenStr=window.localStorage.getItem('token')\n        if(!tokenStr){\n            return next('/Login')\n        }\n        next()\n    }\n})\n```\n\n**4.在main.js设置token请求头**\n\n```js\n//将token添加到axios请求头部\naxios.interceptors.request.use(\n    config => {\n        if (localStorage.getItem('token')) {\n            config.headers.token = localStorage.getItem('token')\n        }\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    }\n)\n\n```\n\n**5.结合后端写好的token方法即完成**\n","source":"_posts/Vue编写token的登录验证.md","raw":"---\ntitle: Vue编写token的登录验证\ndate: 2022-06-27 17:52:34\nauthor: Evan\ncategories: 笔记\ntags: \n---\n\n## 实现Vue根据token拦截访问页面\n\n### 实现步骤\n\n1.前端登录，把用户信息传到后端。\n\n2.后端验证通过后生成token返回前端。\n\n3.前端获取token后用vuex和localStorage管理，进入其他页面。\n\n4.之后前端每一次权限操作如跳转路由，都需要判断是否存在token，若不存在，跳转至登录页。\n\n5.前端的请求操作都要在请求头带上token，后端验证请求头有token之后才开放接口。\n\n6.如果token已过期，清除token信息，跳转至登录页。\n\n\n\n## vue实现\n\n**1.获取后端传来的token**\n\n```js\nlogin () {\n                this.$axios\n                    .post('/login', this.$qs.stringify({name: this.loginForm.name,\n                        password: this.loginForm.password\n                    }))\n                    .then(successResponse => {\n                        if (successResponse.data.code === 200) {\n                            localStorage.setItem('token',successResponse.data.data);//存储token信息\n                            this.$router.replace({path: '/dashboard'})\n                        }\n                        else{\n                            alert(successResponse.data.message);\n                        }\n                    })\n                    .catch(failResponse => {\n\n                    })\n            }\n```\n\n**2.在路由中添加拦截**\n\nrequireAuth属性作用是表明该路由是否需要登录验证，在进行全局拦截时，我们将通过该属性判断路由的跳转，该属性包含在meta属性中:\n\n```js\nroutes = [\n    {\n        name: 'dashboard',\n        path: '/dashboard',\n        meta: {\n            requireAuth: true\n        }\n    },\n    {\n        name: 'login',\n        path: '/login'\n    }\n]\n```\n\n**3.在router/index.js添加路由守卫**\n\n```js\n\n// 使用 router.beforeEach 注册一个全局前置守卫，判断用户是否登陆\nrouter.beforeEach((to,from,next)=>{\n    //to 将要访问的路径\n    //from 代表从哪个路径而来\n    //next() 代表放行 next('xxx') 强制放行的xxx的路径\n    if(to.path==='/'||to.path==='/Login'){\n        next();\n    }else{\n        const tokenStr=window.localStorage.getItem('token')\n        if(!tokenStr){\n            return next('/Login')\n        }\n        next()\n    }\n})\n```\n\n**4.在main.js设置token请求头**\n\n```js\n//将token添加到axios请求头部\naxios.interceptors.request.use(\n    config => {\n        if (localStorage.getItem('token')) {\n            config.headers.token = localStorage.getItem('token')\n        }\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    }\n)\n\n```\n\n**5.结合后端写好的token方法即完成**\n","slug":"Vue编写token的登录验证","published":1,"updated":"2022-06-27T10:17:22.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4wl6dpd00009gu3clmdazbn","content":"<h2 id=\"实现Vue根据token拦截访问页面\"><a href=\"#实现Vue根据token拦截访问页面\" class=\"headerlink\" title=\"实现Vue根据token拦截访问页面\"></a>实现Vue根据token拦截访问页面</h2><h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><p>1.前端登录，把用户信息传到后端。</p>\n<p>2.后端验证通过后生成token返回前端。</p>\n<p>3.前端获取token后用vuex和localStorage管理，进入其他页面。</p>\n<p>4.之后前端每一次权限操作如跳转路由，都需要判断是否存在token，若不存在，跳转至登录页。</p>\n<p>5.前端的请求操作都要在请求头带上token，后端验证请求头有token之后才开放接口。</p>\n<p>6.如果token已过期，清除token信息，跳转至登录页。</p>\n<h2 id=\"vue实现\"><a href=\"#vue实现\" class=\"headerlink\" title=\"vue实现\"></a>vue实现</h2><p><strong>1.获取后端传来的token</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">login () &#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$axios</span><br>                    .<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">name</span>,<br>                        <span class=\"hljs-attr\">password</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">password</span><br>                    &#125;))<br>                    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">successResponse</span> =&gt;</span> &#123;<br>                        <span class=\"hljs-keyword\">if</span> (successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">200</span>) &#123;<br>                            <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>,successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">data</span>);<span class=\"hljs-comment\">//存储token信息</span><br>                            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-title function_\">replace</span>(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/dashboard&#x27;</span>&#125;)<br>                        &#125;<br>                        <span class=\"hljs-keyword\">else</span>&#123;<br>                            <span class=\"hljs-title function_\">alert</span>(successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">message</span>);<br>                        &#125;<br>                    &#125;)<br>                    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">failResponse</span> =&gt;</span> &#123;<br><br>                    &#125;)<br>            &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.在路由中添加拦截</strong></p>\n<p>requireAuth属性作用是表明该路由是否需要登录验证，在进行全局拦截时，我们将通过该属性判断路由的跳转，该属性包含在meta属性中:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">routes = [<br>    &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;dashboard&#x27;</span>,<br>        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/dashboard&#x27;</span>,<br>        <span class=\"hljs-attr\">meta</span>: &#123;<br>            <span class=\"hljs-attr\">requireAuth</span>: <span class=\"hljs-literal\">true</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;login&#x27;</span>,<br>        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/login&#x27;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.在router/index.js添加路由守卫</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// 使用 router.beforeEach 注册一个全局前置守卫，判断用户是否登陆</span><br>router.<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">to,<span class=\"hljs-keyword\">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//to 将要访问的路径</span><br>    <span class=\"hljs-comment\">//from 代表从哪个路径而来</span><br>    <span class=\"hljs-comment\">//next() 代表放行 next(&#x27;xxx&#x27;) 强制放行的xxx的路径</span><br>    <span class=\"hljs-keyword\">if</span>(to.<span class=\"hljs-property\">path</span>===<span class=\"hljs-string\">&#x27;/&#x27;</span>||to.<span class=\"hljs-property\">path</span>===<span class=\"hljs-string\">&#x27;/Login&#x27;</span>)&#123;<br>        <span class=\"hljs-title function_\">next</span>();<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">const</span> tokenStr=<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>)<br>        <span class=\"hljs-keyword\">if</span>(!tokenStr)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-string\">&#x27;/Login&#x27;</span>)<br>        &#125;<br>        <span class=\"hljs-title function_\">next</span>()<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.在main.js设置token请求头</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//将token添加到axios请求头部</span><br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">config</span> =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>)) &#123;<br>            config.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">token</span> = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>)<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> config<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(error)<br>    &#125;<br>)<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>5.结合后端写好的token方法即完成</strong></p>\n","site":{"data":{}},"wordcount":1716,"excerpt":"","more":"<h2 id=\"实现Vue根据token拦截访问页面\"><a href=\"#实现Vue根据token拦截访问页面\" class=\"headerlink\" title=\"实现Vue根据token拦截访问页面\"></a>实现Vue根据token拦截访问页面</h2><h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><p>1.前端登录，把用户信息传到后端。</p>\n<p>2.后端验证通过后生成token返回前端。</p>\n<p>3.前端获取token后用vuex和localStorage管理，进入其他页面。</p>\n<p>4.之后前端每一次权限操作如跳转路由，都需要判断是否存在token，若不存在，跳转至登录页。</p>\n<p>5.前端的请求操作都要在请求头带上token，后端验证请求头有token之后才开放接口。</p>\n<p>6.如果token已过期，清除token信息，跳转至登录页。</p>\n<h2 id=\"vue实现\"><a href=\"#vue实现\" class=\"headerlink\" title=\"vue实现\"></a>vue实现</h2><p><strong>1.获取后端传来的token</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">login () &#123;<br>                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$axios</span><br>                    .<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">name</span>,<br>                        <span class=\"hljs-attr\">password</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loginForm</span>.<span class=\"hljs-property\">password</span><br>                    &#125;))<br>                    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">successResponse</span> =&gt;</span> &#123;<br>                        <span class=\"hljs-keyword\">if</span> (successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">code</span> === <span class=\"hljs-number\">200</span>) &#123;<br>                            <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>,successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">data</span>);<span class=\"hljs-comment\">//存储token信息</span><br>                            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-title function_\">replace</span>(&#123;<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/dashboard&#x27;</span>&#125;)<br>                        &#125;<br>                        <span class=\"hljs-keyword\">else</span>&#123;<br>                            <span class=\"hljs-title function_\">alert</span>(successResponse.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">message</span>);<br>                        &#125;<br>                    &#125;)<br>                    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">failResponse</span> =&gt;</span> &#123;<br><br>                    &#125;)<br>            &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.在路由中添加拦截</strong></p>\n<p>requireAuth属性作用是表明该路由是否需要登录验证，在进行全局拦截时，我们将通过该属性判断路由的跳转，该属性包含在meta属性中:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">routes = [<br>    &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;dashboard&#x27;</span>,<br>        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/dashboard&#x27;</span>,<br>        <span class=\"hljs-attr\">meta</span>: &#123;<br>            <span class=\"hljs-attr\">requireAuth</span>: <span class=\"hljs-literal\">true</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;login&#x27;</span>,<br>        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/login&#x27;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.在router/index.js添加路由守卫</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// 使用 router.beforeEach 注册一个全局前置守卫，判断用户是否登陆</span><br>router.<span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">to,<span class=\"hljs-keyword\">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">//to 将要访问的路径</span><br>    <span class=\"hljs-comment\">//from 代表从哪个路径而来</span><br>    <span class=\"hljs-comment\">//next() 代表放行 next(&#x27;xxx&#x27;) 强制放行的xxx的路径</span><br>    <span class=\"hljs-keyword\">if</span>(to.<span class=\"hljs-property\">path</span>===<span class=\"hljs-string\">&#x27;/&#x27;</span>||to.<span class=\"hljs-property\">path</span>===<span class=\"hljs-string\">&#x27;/Login&#x27;</span>)&#123;<br>        <span class=\"hljs-title function_\">next</span>();<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">const</span> tokenStr=<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>)<br>        <span class=\"hljs-keyword\">if</span>(!tokenStr)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-string\">&#x27;/Login&#x27;</span>)<br>        &#125;<br>        <span class=\"hljs-title function_\">next</span>()<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.在main.js设置token请求头</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//将token添加到axios请求头部</span><br>axios.<span class=\"hljs-property\">interceptors</span>.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">use</span>(<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">config</span> =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>)) &#123;<br>            config.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-property\">token</span> = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;token&#x27;</span>)<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> config<br>    &#125;,<br>    <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">reject</span>(error)<br>    &#125;<br>)<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>5.结合后端写好的token方法即完成</strong></p>\n"},{"title":"npm install错误之node版本问题","date":"2022-05-22T01:11:27.000Z","author":"Evan","_content":"\n## npm install时报错\n\n```cmd\nnpm ERR! code 1\nnpm ERR! path C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass\nnpm ERR! command failed\nnpm ERR! command C:\\Windows\\system32\\cmd.exe /d /s /c node scripts/build.js\nnpm ERR! Building: D:\\work\\nodejs\\node.exe C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\bin\\node-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsa\nss_library=\nnpm ERR! gyp info it worked if it ends with ok\nnpm ERR! gyp verb cli [\nnpm ERR! gyp verb cli   'D:\\\\work\\\\nodejs\\\\node.exe',\nnpm ERR! gyp verb cli   'C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js',\nnpm ERR! gyp verb cli   'rebuild',\nnpm ERR! gyp verb cli   '--verbose',\nnpm ERR! gyp verb cli   '--libsass_ext=',\nnpm ERR! gyp verb cli   '--libsass_cflags=',\nnpm ERR! gyp verb cli   '--libsass_ldflags=',\nnpm ERR! gyp verb cli   '--libsass_library='\nnpm ERR! gyp verb cli ]\nnpm ERR! gyp info using node-gyp@3.8.0\nnpm ERR! gyp info using node@16.15.0 | win32 | x64\nnpm ERR! gyp verb command rebuild []\nnpm ERR! gyp verb command clean []\nnpm ERR! gyp verb clean removing \"build\" directory\nnpm ERR! gyp verb command configure []\nnpm ERR! gyp verb check python checking for Python executable \"python2\" in the PATH\nnpm ERR! gyp verb `which` failed Error: not found: python2\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21)\nnpm ERR! gyp verb `which` failed  python2 Error: not found: python2\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21) {\nnpm ERR! gyp verb `which` failed   code: 'ENOENT'\nnpm ERR! gyp verb `which` failed }\nnpm ERR! gyp verb check python checking for Python executable \"python\" in the PATH\nnpm ERR! gyp verb `which` failed Error: not found: python\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21)\nnpm ERR! gyp verb `which` failed  python Error: not found: python\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21) {\nnpm ERR! gyp verb `which` failed   code: 'ENOENT'\nnpm ERR! gyp verb `which` failed }\nnpm ERR! gyp verb could not find \"python\". checking python launcher\nnpm ERR! gyp verb could not find \"python\". guessing location\nnpm ERR! gyp verb ensuring that file exists: C:\\Python27\\python.exe\nnpm ERR! gyp ERR! configure error\nnpm ERR! gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable.\nnpm ERR! gyp ERR! stack     at PythonFinder.failNoPython (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:484:19)\nnpm ERR! gyp ERR! stack     at PythonFinder.<anonymous> (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:509:16)\nnpm ERR! gyp ERR! stack     at callback (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\graceful-fs\\polyfills.js:295:20)\nnpm ERR! gyp ERR! stack     at FSReqCallback.oncomplete (node:fs:198:21)\nnpm ERR! gyp ERR! System Windows_NT 10.0.16299\nnpm ERR! gyp ERR! command \"D:\\\\work\\\\nodejs\\\\node.exe\" \"C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\" \"rebuild\" \"--verbose\" \"--libsass_ext=\" \"--libsass_cfl\nags=\" \"--libsass_ldflags=\" \"--libsass_library=\"\nnpm ERR! gyp ERR! cwd C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass\nnpm ERR! gyp ERR! node -v v16.15.0\nnpm ERR! gyp ERR! node-gyp -v v3.8.0\nnpm ERR! gyp ERR! not ok\nnpm ERR! Build failed with error code: 1\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\2022-06-30T02_19_44_135Z-debug-0.log\n\n```\n\n### 出错原因\n\nnode版本过高导致，可以通过node -v查看版本\n\n### 解决方法\n\n重新安装node.js\n\n**1.找到node.js，卸载**\n\n**2.到官网重新下载版本更低的node.js**\n\n[官网地址](https://nodejs.org/zh-cn/download/releases/)\n\n### 新的错误\n\n这时候重新运行npm install，又出现新的报错\n\n```cmd\nnpm ERR! cb() never called! \nnpm ERR! This is an error with npm itself. \n```\n\n### 解决方法\n\n**1.删除项目文件的node_modules**\n**2.删除package-lock.json文件**\n **3.清除npm缓存，执行npm cache clean --force**\n **4.再运行npm install**\n\n## 成功\n\n","source":"_posts/npm install错误之node-js版本问题.md","raw":"---\ntitle: npm install错误之node版本问题\ndate: 2022-05-22 09:11:27\nauthor: Evan\ncategories: 笔记\ntags:\n\n\n---\n\n## npm install时报错\n\n```cmd\nnpm ERR! code 1\nnpm ERR! path C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass\nnpm ERR! command failed\nnpm ERR! command C:\\Windows\\system32\\cmd.exe /d /s /c node scripts/build.js\nnpm ERR! Building: D:\\work\\nodejs\\node.exe C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\bin\\node-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsa\nss_library=\nnpm ERR! gyp info it worked if it ends with ok\nnpm ERR! gyp verb cli [\nnpm ERR! gyp verb cli   'D:\\\\work\\\\nodejs\\\\node.exe',\nnpm ERR! gyp verb cli   'C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js',\nnpm ERR! gyp verb cli   'rebuild',\nnpm ERR! gyp verb cli   '--verbose',\nnpm ERR! gyp verb cli   '--libsass_ext=',\nnpm ERR! gyp verb cli   '--libsass_cflags=',\nnpm ERR! gyp verb cli   '--libsass_ldflags=',\nnpm ERR! gyp verb cli   '--libsass_library='\nnpm ERR! gyp verb cli ]\nnpm ERR! gyp info using node-gyp@3.8.0\nnpm ERR! gyp info using node@16.15.0 | win32 | x64\nnpm ERR! gyp verb command rebuild []\nnpm ERR! gyp verb command clean []\nnpm ERR! gyp verb clean removing \"build\" directory\nnpm ERR! gyp verb command configure []\nnpm ERR! gyp verb check python checking for Python executable \"python2\" in the PATH\nnpm ERR! gyp verb `which` failed Error: not found: python2\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21)\nnpm ERR! gyp verb `which` failed  python2 Error: not found: python2\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21) {\nnpm ERR! gyp verb `which` failed   code: 'ENOENT'\nnpm ERR! gyp verb `which` failed }\nnpm ERR! gyp verb check python checking for Python executable \"python\" in the PATH\nnpm ERR! gyp verb `which` failed Error: not found: python\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21)\nnpm ERR! gyp verb `which` failed  python Error: not found: python\nnpm ERR! gyp verb `which` failed     at getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:13:12)\nnpm ERR! gyp verb `which` failed     at F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:68:19)\nnpm ERR! gyp verb `which` failed     at E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:80:29)\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:89:16\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:42:5\nnpm ERR! gyp verb `which` failed     at C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:36:5\nnpm ERR! gyp verb `which` failed     at FSReqCallback.oncomplete (node:fs:198:21) {\nnpm ERR! gyp verb `which` failed   code: 'ENOENT'\nnpm ERR! gyp verb `which` failed }\nnpm ERR! gyp verb could not find \"python\". checking python launcher\nnpm ERR! gyp verb could not find \"python\". guessing location\nnpm ERR! gyp verb ensuring that file exists: C:\\Python27\\python.exe\nnpm ERR! gyp ERR! configure error\nnpm ERR! gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON env variable.\nnpm ERR! gyp ERR! stack     at PythonFinder.failNoPython (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:484:19)\nnpm ERR! gyp ERR! stack     at PythonFinder.<anonymous> (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:509:16)\nnpm ERR! gyp ERR! stack     at callback (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\graceful-fs\\polyfills.js:295:20)\nnpm ERR! gyp ERR! stack     at FSReqCallback.oncomplete (node:fs:198:21)\nnpm ERR! gyp ERR! System Windows_NT 10.0.16299\nnpm ERR! gyp ERR! command \"D:\\\\work\\\\nodejs\\\\node.exe\" \"C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\" \"rebuild\" \"--verbose\" \"--libsass_ext=\" \"--libsass_cfl\nags=\" \"--libsass_ldflags=\" \"--libsass_library=\"\nnpm ERR! gyp ERR! cwd C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass\nnpm ERR! gyp ERR! node -v v16.15.0\nnpm ERR! gyp ERR! node-gyp -v v3.8.0\nnpm ERR! gyp ERR! not ok\nnpm ERR! Build failed with error code: 1\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\2022-06-30T02_19_44_135Z-debug-0.log\n\n```\n\n### 出错原因\n\nnode版本过高导致，可以通过node -v查看版本\n\n### 解决方法\n\n重新安装node.js\n\n**1.找到node.js，卸载**\n\n**2.到官网重新下载版本更低的node.js**\n\n[官网地址](https://nodejs.org/zh-cn/download/releases/)\n\n### 新的错误\n\n这时候重新运行npm install，又出现新的报错\n\n```cmd\nnpm ERR! cb() never called! \nnpm ERR! This is an error with npm itself. \n```\n\n### 解决方法\n\n**1.删除项目文件的node_modules**\n**2.删除package-lock.json文件**\n **3.清除npm缓存，执行npm cache clean --force**\n **4.再运行npm install**\n\n## 成功\n\n","slug":"npm install错误之node-js版本问题","published":1,"updated":"2022-06-30T03:23:11.367Z","_id":"cl50gn1yn0000gou38ovu7tv4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"npm-install时报错\"><a href=\"#npm-install时报错\" class=\"headerlink\" title=\"npm install时报错\"></a>npm install时报错</h2><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm ERR! code <span class=\"hljs-number\">1</span><br>npm ERR! <span class=\"hljs-built_in\">path</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass<br>npm ERR! command failed<br>npm ERR! command C:\\Windows\\system32\\<span class=\"hljs-built_in\">cmd</span>.exe /d /s /c node scripts/build.js<br>npm ERR! Building: D:\\work\\nodejs\\node.exe C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\bin\\node-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsa<br>ss_library=<br>npm ERR! gyp info it worked <span class=\"hljs-keyword\">if</span> it ends with ok<br>npm ERR! gyp verb cli [<br>npm ERR! gyp verb cli   &#x27;D:\\\\work\\\\nodejs\\\\node.exe&#x27;,<br>npm ERR! gyp verb cli   &#x27;C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js&#x27;,<br>npm ERR! gyp verb cli   &#x27;rebuild&#x27;,<br>npm ERR! gyp verb cli   &#x27;--verbose&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_ext=&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_cflags=&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_ldflags=&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_library=&#x27;<br>npm ERR! gyp verb cli ]<br>npm ERR! gyp info using node-gyp@<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span><br>npm ERR! gyp info using node@<span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">0</span> | win32 | x64<br>npm ERR! gyp verb command rebuild []<br>npm ERR! gyp verb command clean []<br>npm ERR! gyp verb clean removing &quot;build&quot; directory<br>npm ERR! gyp verb command configure []<br>npm ERR! gyp verb check python checking <span class=\"hljs-keyword\">for</span> Python executable &quot;python2&quot; <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-built_in\">PATH</span><br>npm ERR! gyp verb `which` failed Error: <span class=\"hljs-keyword\">not</span> found: python2<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>)<br>npm ERR! gyp verb `which` failed  python2 Error: <span class=\"hljs-keyword\">not</span> found: python2<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>) &#123;<br>npm ERR! gyp verb `which` failed   code: &#x27;ENOENT&#x27;<br>npm ERR! gyp verb `which` failed &#125;<br>npm ERR! gyp verb check python checking <span class=\"hljs-keyword\">for</span> Python executable &quot;python&quot; <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-built_in\">PATH</span><br>npm ERR! gyp verb `which` failed Error: <span class=\"hljs-keyword\">not</span> found: python<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>)<br>npm ERR! gyp verb `which` failed  python Error: <span class=\"hljs-keyword\">not</span> found: python<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>) &#123;<br>npm ERR! gyp verb `which` failed   code: &#x27;ENOENT&#x27;<br>npm ERR! gyp verb `which` failed &#125;<br>npm ERR! gyp verb could <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">find</span> &quot;python&quot;. checking python launcher<br>npm ERR! gyp verb could <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">find</span> &quot;python&quot;. guessing location<br>npm ERR! gyp verb ensuring that file exists: C:\\Python27\\python.exe<br>npm ERR! gyp ERR! configure error<br>npm ERR! gyp ERR! stack Error: Can&#x27;t <span class=\"hljs-built_in\">find</span> Python executable &quot;python&quot;, you can <span class=\"hljs-built_in\">set</span> the PYTHON env variable.<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> PythonFinder.failNoPython (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> PythonFinder.&lt;anonymous&gt; (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:<span class=\"hljs-number\">509</span>:<span class=\"hljs-number\">16</span>)<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> callback (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\graceful-<span class=\"hljs-built_in\">fs</span>\\polyfills.js:<span class=\"hljs-number\">295</span>:<span class=\"hljs-number\">20</span>)<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>)<br>npm ERR! gyp ERR! System Windows_NT <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">16299</span><br>npm ERR! gyp ERR! command &quot;D:\\\\work\\\\nodejs\\\\node.exe&quot; &quot;C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js&quot; &quot;rebuild&quot; &quot;--verbose&quot; &quot;--libsass_ext=&quot; &quot;--libsass_cfl<br>ags=&quot; &quot;--libsass_ldflags=&quot; &quot;--libsass_library=&quot;<br>npm ERR! gyp ERR! cwd C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass<br>npm ERR! gyp ERR! node -v v16.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">0</span><br>npm ERR! gyp ERR! node-gyp -v v3.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span><br>npm ERR! gyp ERR! <span class=\"hljs-keyword\">not</span> ok<br>npm ERR! Build failed with error code: <span class=\"hljs-number\">1</span><br><br>npm ERR! A complete log of this run can be found <span class=\"hljs-keyword\">in</span>:<br>npm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">30</span>T02_19_44_135Z-debug-<span class=\"hljs-number\">0</span>.log<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"出错原因\"><a href=\"#出错原因\" class=\"headerlink\" title=\"出错原因\"></a>出错原因</h3><p>node版本过高导致，可以通过node -v查看版本</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>重新安装node.js</p>\n<p><strong>1.找到node.js，卸载</strong></p>\n<p><strong>2.到官网重新下载版本更低的node.js</strong></p>\n<p><a href=\"https://nodejs.org/zh-cn/download/releases/\">官网地址</a></p>\n<h3 id=\"新的错误\"><a href=\"#新的错误\" class=\"headerlink\" title=\"新的错误\"></a>新的错误</h3><p>这时候重新运行npm install，又出现新的报错</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm ERR! cb() never called! <br>npm ERR! This is an error with npm itself. <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p><strong>1.删除项目文件的node_modules</strong><br><strong>2.删除package-lock.json文件</strong><br> <strong>3.清除npm缓存，执行npm cache clean –force</strong><br> <strong>4.再运行npm install</strong></p>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2>","site":{"data":{}},"wordcount":6714,"excerpt":"","more":"<h2 id=\"npm-install时报错\"><a href=\"#npm-install时报错\" class=\"headerlink\" title=\"npm install时报错\"></a>npm install时报错</h2><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm ERR! code <span class=\"hljs-number\">1</span><br>npm ERR! <span class=\"hljs-built_in\">path</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass<br>npm ERR! command failed<br>npm ERR! command C:\\Windows\\system32\\<span class=\"hljs-built_in\">cmd</span>.exe /d /s /c node scripts/build.js<br>npm ERR! Building: D:\\work\\nodejs\\node.exe C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\bin\\node-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsa<br>ss_library=<br>npm ERR! gyp info it worked <span class=\"hljs-keyword\">if</span> it ends with ok<br>npm ERR! gyp verb cli [<br>npm ERR! gyp verb cli   &#x27;D:\\\\work\\\\nodejs\\\\node.exe&#x27;,<br>npm ERR! gyp verb cli   &#x27;C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js&#x27;,<br>npm ERR! gyp verb cli   &#x27;rebuild&#x27;,<br>npm ERR! gyp verb cli   &#x27;--verbose&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_ext=&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_cflags=&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_ldflags=&#x27;,<br>npm ERR! gyp verb cli   &#x27;--libsass_library=&#x27;<br>npm ERR! gyp verb cli ]<br>npm ERR! gyp info using node-gyp@<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span><br>npm ERR! gyp info using node@<span class=\"hljs-number\">16</span>.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">0</span> | win32 | x64<br>npm ERR! gyp verb command rebuild []<br>npm ERR! gyp verb command clean []<br>npm ERR! gyp verb clean removing &quot;build&quot; directory<br>npm ERR! gyp verb command configure []<br>npm ERR! gyp verb check python checking <span class=\"hljs-keyword\">for</span> Python executable &quot;python2&quot; <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-built_in\">PATH</span><br>npm ERR! gyp verb `which` failed Error: <span class=\"hljs-keyword\">not</span> found: python2<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>)<br>npm ERR! gyp verb `which` failed  python2 Error: <span class=\"hljs-keyword\">not</span> found: python2<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>) &#123;<br>npm ERR! gyp verb `which` failed   code: &#x27;ENOENT&#x27;<br>npm ERR! gyp verb `which` failed &#125;<br>npm ERR! gyp verb check python checking <span class=\"hljs-keyword\">for</span> Python executable &quot;python&quot; <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-built_in\">PATH</span><br>npm ERR! gyp verb `which` failed Error: <span class=\"hljs-keyword\">not</span> found: python<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>)<br>npm ERR! gyp verb `which` failed  python Error: <span class=\"hljs-keyword\">not</span> found: python<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> getNotFoundError (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">12</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> F (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">68</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> E (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">29</span>)<br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\which\\which.js:<span class=\"hljs-number\">89</span>:<span class=\"hljs-number\">16</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\index.js:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\isexe\\windows.js:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">5</span><br>npm ERR! gyp verb `which` failed     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>) &#123;<br>npm ERR! gyp verb `which` failed   code: &#x27;ENOENT&#x27;<br>npm ERR! gyp verb `which` failed &#125;<br>npm ERR! gyp verb could <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">find</span> &quot;python&quot;. checking python launcher<br>npm ERR! gyp verb could <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">find</span> &quot;python&quot;. guessing location<br>npm ERR! gyp verb ensuring that file exists: C:\\Python27\\python.exe<br>npm ERR! gyp ERR! configure error<br>npm ERR! gyp ERR! stack Error: Can&#x27;t <span class=\"hljs-built_in\">find</span> Python executable &quot;python&quot;, you can <span class=\"hljs-built_in\">set</span> the PYTHON env variable.<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> PythonFinder.failNoPython (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">19</span>)<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> PythonFinder.&lt;anonymous&gt; (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-gyp\\lib\\configure.js:<span class=\"hljs-number\">509</span>:<span class=\"hljs-number\">16</span>)<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> callback (C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\graceful-<span class=\"hljs-built_in\">fs</span>\\polyfills.js:<span class=\"hljs-number\">295</span>:<span class=\"hljs-number\">20</span>)<br>npm ERR! gyp ERR! stack     <span class=\"hljs-built_in\">at</span> FSReqCallback.oncomplete (node:<span class=\"hljs-built_in\">fs</span>:<span class=\"hljs-number\">198</span>:<span class=\"hljs-number\">21</span>)<br>npm ERR! gyp ERR! System Windows_NT <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">16299</span><br>npm ERR! gyp ERR! command &quot;D:\\\\work\\\\nodejs\\\\node.exe&quot; &quot;C:\\\\Users\\\\Evan\\\\Downloads\\\\vhr-master\\\\vhr-master\\\\vuehr\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js&quot; &quot;rebuild&quot; &quot;--verbose&quot; &quot;--libsass_ext=&quot; &quot;--libsass_cfl<br>ags=&quot; &quot;--libsass_ldflags=&quot; &quot;--libsass_library=&quot;<br>npm ERR! gyp ERR! cwd C:\\Users\\Evan\\Downloads\\vhr-master\\vhr-master\\vuehr\\node_modules\\node-sass<br>npm ERR! gyp ERR! node -v v16.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">0</span><br>npm ERR! gyp ERR! node-gyp -v v3.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span><br>npm ERR! gyp ERR! <span class=\"hljs-keyword\">not</span> ok<br>npm ERR! Build failed with error code: <span class=\"hljs-number\">1</span><br><br>npm ERR! A complete log of this run can be found <span class=\"hljs-keyword\">in</span>:<br>npm ERR!     C:\\Users\\Evan\\AppData\\Local\\npm-cache\\_logs\\<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">30</span>T02_19_44_135Z-debug-<span class=\"hljs-number\">0</span>.log<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"出错原因\"><a href=\"#出错原因\" class=\"headerlink\" title=\"出错原因\"></a>出错原因</h3><p>node版本过高导致，可以通过node -v查看版本</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>重新安装node.js</p>\n<p><strong>1.找到node.js，卸载</strong></p>\n<p><strong>2.到官网重新下载版本更低的node.js</strong></p>\n<p><a href=\"https://nodejs.org/zh-cn/download/releases/\">官网地址</a></p>\n<h3 id=\"新的错误\"><a href=\"#新的错误\" class=\"headerlink\" title=\"新的错误\"></a>新的错误</h3><p>这时候重新运行npm install，又出现新的报错</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">npm ERR! cb() never called! <br>npm ERR! This is an error with npm itself. <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p><strong>1.删除项目文件的node_modules</strong><br><strong>2.删除package-lock.json文件</strong><br> <strong>3.清除npm缓存，执行npm cache clean –force</strong><br> <strong>4.再运行npm install</strong></p>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2>"},{"title":"redisTemplate操作redis","date":"2022-06-30T08:47:59.000Z","author":"Evan","_content":"\n\n\n# redisTemplate操作redis\n\n**1.String操作**\n\n```java\n//String传入redis \nredisTemplate.opsForValue().set(key, value);\n\n//从redis获取 \nObject value = redisTemplate.opsForValue().get(key);\n\n//设置过期时间\nlong time =60;\nredisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n```\n\n**2.key操作**\n\n```java\n//判断key是否存在\nBoolean exist =redisTemplate.hasKey(key);\n\n//设置key过期时间\nlong time = 60;\nredisTemplate.expire(key, time, TimeUnit.SECONDS);\n\n//获取key过期时间\nLong expire = redisTemplate.getExpire(key, TimeUnit.SECONDS);\n\n// 删除key\nredisTemplate.delete(key);\n```\n\n**3.散列操作**\n\n```java\n// 放入一个 hash ( key value ) item是hash的key\nredisTemplate.opsForHash().put(key, item, value);\n\n// 向hash中存放一个map\nredisTemplate.opsForHash().putAll(key, map);\n\n// 获取一个hash 的 所有key-value\nMap<Object, Object> entries = redisTemplate.opsForHash().entries(key);\n\n // 获取一个hash 的 指定key 的value\nObject value = redisTemplate.opsForHash().get(key, item);\n\n// 删除指定 hash key 的value\nredisTemplate.opsForHash().delete(key, item);\n\n // 是否存在 指定 hash 的key\nBoolean exist = redisTemplate.opsForHash().hasKey(key, item);\n```\n\n**4.列表操作**\n\n```java\n// 列表右推入\nredisTemplate.opsForList().rightPush(key, value);\n\n// 列表左推入\nredisTemplate.opsForList().leftPush(key, value);\n\n// 列表左弹出\nObject value = redisTemplate.opsForList().leftPop(key);\n\n// 列表右弹出\nObject value = redisTemplate.opsForList().rightPop(key);\n\n// 将list右推入列表\nredisTemplate.opsForList().rightPushAll(key, list);\n\n// 修改列表指定索引的值\nredisTemplate.opsForList().set(key, index, value);\n \n// 获取列表指定索引的值\nObject value = redisTemplate.opsForList().index(key, index);\n```\n\n**5.set 操作**\n\n```java\n// set 中存储值\nredisTemplate.opsForSet().add(key, value1, value2);\n\n// 从 set 中取值\nSet<Object> members = redisTemplate.opsForSet().members(key);\n\n// 判定 set 中是否存在 key-value\n Boolean member = redisTemplate.opsForSet().isMember(key, value);\n\n//查询set长度\nredisTemplate.opsForSet().size(key);\n\n//从set中移除某些个元素\nredisTemplate.opsForSet().remove(key,values);\n\n//移除整个set\nredisTemplate.delete(key);\n```\n\n**6.zset操作**\n\n```java\n//往Zset中添加元素\nredisTemplate.opsForZSet().add(key, value, score);\n\n//根据索引获取Zset的元素\nredisTemplate.opsForZSet().range(key,begin,end);\n\n//获取Zset的所有元素\ngetZset(key,0,-1);\n\n// 往Zset中添加多个元素\n// DefaultTypedTuple<String> p1 = new DefaultTypedTuple<>(\"value1\", 1.0);\nHashSet<DefaultTypedTuple<String>> defaultTypedTuples = new HashSet<>(list);\nredisTemplate.opsForZSet().add(key,defaultTypedTuples);\n\n//获取Zset中指定元素的分数\nredisTemplate.opsForZSet().score(key,value);\n    \n//获取Zset集合的大小\nredisTemplate.opsForZSet().size(key);\n    \n//获取Zset指定分数内集合的大小\nredisTemplate.opsForZSet().count(key,begin,end);\n    \n//获取Zset指定分数内的集合\nredisTemplate.opsForZSet().rangeByScore(key,begin,end);\n    \n//根据 Index 获取Zset集合 (包括分数)\nredisTemplate.opsForZSet().rangeWithScores(key,begin, end);\n    \n//获取Zset集合\ngetZsetWithScore(key,0L, -1L);\n\n//获取指定成员的排名   从大到小排   a,b,c,d     a排0\nredisTemplate.opsForZSet().rank(key,value);\n\n//获取指定成员的排名   从大到小排   a,b,c,d     a排3\nredisTemplate.opsForZSet().reverseRank(key,value);\n \n//从集合中删除指定元素\nredisTemplate.opsForZSet().remove(key,value);\n    \n//从集合中删除指定范围索引元素\nredisTemplate.opsForZSet().removeRange(key,begin,end);\n  \n//从集合中删除指定范围分数元素\nredisTemplate.opsForZSet().removeRangeByScore(key,begin,end);\n   \n//修改指定元素的分数\nredisTemplate.opsForZSet().incrementScore(key,value,score);\n \n```\n\n","source":"_posts/redisTemplate操作redis.md","raw":"---\ntitle: redisTemplate操作redis\ndate: 2022-06-30 16:47:59\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n\n\n# redisTemplate操作redis\n\n**1.String操作**\n\n```java\n//String传入redis \nredisTemplate.opsForValue().set(key, value);\n\n//从redis获取 \nObject value = redisTemplate.opsForValue().get(key);\n\n//设置过期时间\nlong time =60;\nredisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n```\n\n**2.key操作**\n\n```java\n//判断key是否存在\nBoolean exist =redisTemplate.hasKey(key);\n\n//设置key过期时间\nlong time = 60;\nredisTemplate.expire(key, time, TimeUnit.SECONDS);\n\n//获取key过期时间\nLong expire = redisTemplate.getExpire(key, TimeUnit.SECONDS);\n\n// 删除key\nredisTemplate.delete(key);\n```\n\n**3.散列操作**\n\n```java\n// 放入一个 hash ( key value ) item是hash的key\nredisTemplate.opsForHash().put(key, item, value);\n\n// 向hash中存放一个map\nredisTemplate.opsForHash().putAll(key, map);\n\n// 获取一个hash 的 所有key-value\nMap<Object, Object> entries = redisTemplate.opsForHash().entries(key);\n\n // 获取一个hash 的 指定key 的value\nObject value = redisTemplate.opsForHash().get(key, item);\n\n// 删除指定 hash key 的value\nredisTemplate.opsForHash().delete(key, item);\n\n // 是否存在 指定 hash 的key\nBoolean exist = redisTemplate.opsForHash().hasKey(key, item);\n```\n\n**4.列表操作**\n\n```java\n// 列表右推入\nredisTemplate.opsForList().rightPush(key, value);\n\n// 列表左推入\nredisTemplate.opsForList().leftPush(key, value);\n\n// 列表左弹出\nObject value = redisTemplate.opsForList().leftPop(key);\n\n// 列表右弹出\nObject value = redisTemplate.opsForList().rightPop(key);\n\n// 将list右推入列表\nredisTemplate.opsForList().rightPushAll(key, list);\n\n// 修改列表指定索引的值\nredisTemplate.opsForList().set(key, index, value);\n \n// 获取列表指定索引的值\nObject value = redisTemplate.opsForList().index(key, index);\n```\n\n**5.set 操作**\n\n```java\n// set 中存储值\nredisTemplate.opsForSet().add(key, value1, value2);\n\n// 从 set 中取值\nSet<Object> members = redisTemplate.opsForSet().members(key);\n\n// 判定 set 中是否存在 key-value\n Boolean member = redisTemplate.opsForSet().isMember(key, value);\n\n//查询set长度\nredisTemplate.opsForSet().size(key);\n\n//从set中移除某些个元素\nredisTemplate.opsForSet().remove(key,values);\n\n//移除整个set\nredisTemplate.delete(key);\n```\n\n**6.zset操作**\n\n```java\n//往Zset中添加元素\nredisTemplate.opsForZSet().add(key, value, score);\n\n//根据索引获取Zset的元素\nredisTemplate.opsForZSet().range(key,begin,end);\n\n//获取Zset的所有元素\ngetZset(key,0,-1);\n\n// 往Zset中添加多个元素\n// DefaultTypedTuple<String> p1 = new DefaultTypedTuple<>(\"value1\", 1.0);\nHashSet<DefaultTypedTuple<String>> defaultTypedTuples = new HashSet<>(list);\nredisTemplate.opsForZSet().add(key,defaultTypedTuples);\n\n//获取Zset中指定元素的分数\nredisTemplate.opsForZSet().score(key,value);\n    \n//获取Zset集合的大小\nredisTemplate.opsForZSet().size(key);\n    \n//获取Zset指定分数内集合的大小\nredisTemplate.opsForZSet().count(key,begin,end);\n    \n//获取Zset指定分数内的集合\nredisTemplate.opsForZSet().rangeByScore(key,begin,end);\n    \n//根据 Index 获取Zset集合 (包括分数)\nredisTemplate.opsForZSet().rangeWithScores(key,begin, end);\n    \n//获取Zset集合\ngetZsetWithScore(key,0L, -1L);\n\n//获取指定成员的排名   从大到小排   a,b,c,d     a排0\nredisTemplate.opsForZSet().rank(key,value);\n\n//获取指定成员的排名   从大到小排   a,b,c,d     a排3\nredisTemplate.opsForZSet().reverseRank(key,value);\n \n//从集合中删除指定元素\nredisTemplate.opsForZSet().remove(key,value);\n    \n//从集合中删除指定范围索引元素\nredisTemplate.opsForZSet().removeRange(key,begin,end);\n  \n//从集合中删除指定范围分数元素\nredisTemplate.opsForZSet().removeRangeByScore(key,begin,end);\n   \n//修改指定元素的分数\nredisTemplate.opsForZSet().incrementScore(key,value,score);\n \n```\n\n","slug":"redisTemplate操作redis","published":1,"updated":"2022-06-30T09:15:18.179Z","_id":"cl50slzfj00005wu3eisa66cc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"redisTemplate操作redis\"><a href=\"#redisTemplate操作redis\" class=\"headerlink\" title=\"redisTemplate操作redis\"></a>redisTemplate操作redis</h1><p><strong>1.String操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//String传入redis </span><br>redisTemplate.opsForValue().set(key, value);<br><br><span class=\"hljs-comment\">//从redis获取 </span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForValue().get(key);<br><br><span class=\"hljs-comment\">//设置过期时间</span><br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">60</span>;<br>redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.key操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//判断key是否存在</span><br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">exist</span> <span class=\"hljs-operator\">=</span>redisTemplate.hasKey(key);<br><br><span class=\"hljs-comment\">//设置key过期时间</span><br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">60</span>;<br>redisTemplate.expire(key, time, TimeUnit.SECONDS);<br><br><span class=\"hljs-comment\">//获取key过期时间</span><br><span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">expire</span> <span class=\"hljs-operator\">=</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br><br><span class=\"hljs-comment\">// 删除key</span><br>redisTemplate.delete(key);<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.散列操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 放入一个 hash ( key value ) item是hash的key</span><br>redisTemplate.opsForHash().put(key, item, value);<br><br><span class=\"hljs-comment\">// 向hash中存放一个map</span><br>redisTemplate.opsForHash().putAll(key, map);<br><br><span class=\"hljs-comment\">// 获取一个hash 的 所有key-value</span><br>Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(key);<br><br> <span class=\"hljs-comment\">// 获取一个hash 的 指定key 的value</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForHash().get(key, item);<br><br><span class=\"hljs-comment\">// 删除指定 hash key 的value</span><br>redisTemplate.opsForHash().delete(key, item);<br><br> <span class=\"hljs-comment\">// 是否存在 指定 hash 的key</span><br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">exist</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForHash().hasKey(key, item);<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.列表操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 列表右推入</span><br>redisTemplate.opsForList().rightPush(key, value);<br><br><span class=\"hljs-comment\">// 列表左推入</span><br>redisTemplate.opsForList().leftPush(key, value);<br><br><span class=\"hljs-comment\">// 列表左弹出</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForList().leftPop(key);<br><br><span class=\"hljs-comment\">// 列表右弹出</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForList().rightPop(key);<br><br><span class=\"hljs-comment\">// 将list右推入列表</span><br>redisTemplate.opsForList().rightPushAll(key, list);<br><br><span class=\"hljs-comment\">// 修改列表指定索引的值</span><br>redisTemplate.opsForList().set(key, index, value);<br> <br><span class=\"hljs-comment\">// 获取列表指定索引的值</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForList().index(key, index);<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.set 操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// set 中存储值</span><br>redisTemplate.opsForSet().add(key, value1, value2);<br><br><span class=\"hljs-comment\">// 从 set 中取值</span><br>Set&lt;Object&gt; members = redisTemplate.opsForSet().members(key);<br><br><span class=\"hljs-comment\">// 判定 set 中是否存在 key-value</span><br> <span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">member</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForSet().isMember(key, value);<br><br><span class=\"hljs-comment\">//查询set长度</span><br>redisTemplate.opsForSet().size(key);<br><br><span class=\"hljs-comment\">//从set中移除某些个元素</span><br>redisTemplate.opsForSet().remove(key,values);<br><br><span class=\"hljs-comment\">//移除整个set</span><br>redisTemplate.delete(key);<br></code></pre></td></tr></table></figure>\n\n<p><strong>6.zset操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//往Zset中添加元素</span><br>redisTemplate.opsForZSet().add(key, value, score);<br><br><span class=\"hljs-comment\">//根据索引获取Zset的元素</span><br>redisTemplate.opsForZSet().range(key,begin,end);<br><br><span class=\"hljs-comment\">//获取Zset的所有元素</span><br>getZset(key,<span class=\"hljs-number\">0</span>,-<span class=\"hljs-number\">1</span>);<br><br><span class=\"hljs-comment\">// 往Zset中添加多个元素</span><br><span class=\"hljs-comment\">// DefaultTypedTuple&lt;String&gt; p1 = new DefaultTypedTuple&lt;&gt;(&quot;value1&quot;, 1.0);</span><br>HashSet&lt;DefaultTypedTuple&lt;String&gt;&gt; defaultTypedTuples = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;(list);<br>redisTemplate.opsForZSet().add(key,defaultTypedTuples);<br><br><span class=\"hljs-comment\">//获取Zset中指定元素的分数</span><br>redisTemplate.opsForZSet().score(key,value);<br>    <br><span class=\"hljs-comment\">//获取Zset集合的大小</span><br>redisTemplate.opsForZSet().size(key);<br>    <br><span class=\"hljs-comment\">//获取Zset指定分数内集合的大小</span><br>redisTemplate.opsForZSet().count(key,begin,end);<br>    <br><span class=\"hljs-comment\">//获取Zset指定分数内的集合</span><br>redisTemplate.opsForZSet().rangeByScore(key,begin,end);<br>    <br><span class=\"hljs-comment\">//根据 Index 获取Zset集合 (包括分数)</span><br>redisTemplate.opsForZSet().rangeWithScores(key,begin, end);<br>    <br><span class=\"hljs-comment\">//获取Zset集合</span><br>getZsetWithScore(key,<span class=\"hljs-number\">0L</span>, -<span class=\"hljs-number\">1L</span>);<br><br><span class=\"hljs-comment\">//获取指定成员的排名   从大到小排   a,b,c,d     a排0</span><br>redisTemplate.opsForZSet().rank(key,value);<br><br><span class=\"hljs-comment\">//获取指定成员的排名   从大到小排   a,b,c,d     a排3</span><br>redisTemplate.opsForZSet().reverseRank(key,value);<br> <br><span class=\"hljs-comment\">//从集合中删除指定元素</span><br>redisTemplate.opsForZSet().remove(key,value);<br>    <br><span class=\"hljs-comment\">//从集合中删除指定范围索引元素</span><br>redisTemplate.opsForZSet().removeRange(key,begin,end);<br>  <br><span class=\"hljs-comment\">//从集合中删除指定范围分数元素</span><br>redisTemplate.opsForZSet().removeRangeByScore(key,begin,end);<br>   <br><span class=\"hljs-comment\">//修改指定元素的分数</span><br>redisTemplate.opsForZSet().incrementScore(key,value,score);<br> <br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":3084,"excerpt":"","more":"<h1 id=\"redisTemplate操作redis\"><a href=\"#redisTemplate操作redis\" class=\"headerlink\" title=\"redisTemplate操作redis\"></a>redisTemplate操作redis</h1><p><strong>1.String操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//String传入redis </span><br>redisTemplate.opsForValue().set(key, value);<br><br><span class=\"hljs-comment\">//从redis获取 </span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForValue().get(key);<br><br><span class=\"hljs-comment\">//设置过期时间</span><br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">60</span>;<br>redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.key操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//判断key是否存在</span><br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">exist</span> <span class=\"hljs-operator\">=</span>redisTemplate.hasKey(key);<br><br><span class=\"hljs-comment\">//设置key过期时间</span><br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">60</span>;<br>redisTemplate.expire(key, time, TimeUnit.SECONDS);<br><br><span class=\"hljs-comment\">//获取key过期时间</span><br><span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">expire</span> <span class=\"hljs-operator\">=</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br><br><span class=\"hljs-comment\">// 删除key</span><br>redisTemplate.delete(key);<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.散列操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 放入一个 hash ( key value ) item是hash的key</span><br>redisTemplate.opsForHash().put(key, item, value);<br><br><span class=\"hljs-comment\">// 向hash中存放一个map</span><br>redisTemplate.opsForHash().putAll(key, map);<br><br><span class=\"hljs-comment\">// 获取一个hash 的 所有key-value</span><br>Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(key);<br><br> <span class=\"hljs-comment\">// 获取一个hash 的 指定key 的value</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForHash().get(key, item);<br><br><span class=\"hljs-comment\">// 删除指定 hash key 的value</span><br>redisTemplate.opsForHash().delete(key, item);<br><br> <span class=\"hljs-comment\">// 是否存在 指定 hash 的key</span><br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">exist</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForHash().hasKey(key, item);<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.列表操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 列表右推入</span><br>redisTemplate.opsForList().rightPush(key, value);<br><br><span class=\"hljs-comment\">// 列表左推入</span><br>redisTemplate.opsForList().leftPush(key, value);<br><br><span class=\"hljs-comment\">// 列表左弹出</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForList().leftPop(key);<br><br><span class=\"hljs-comment\">// 列表右弹出</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForList().rightPop(key);<br><br><span class=\"hljs-comment\">// 将list右推入列表</span><br>redisTemplate.opsForList().rightPushAll(key, list);<br><br><span class=\"hljs-comment\">// 修改列表指定索引的值</span><br>redisTemplate.opsForList().set(key, index, value);<br> <br><span class=\"hljs-comment\">// 获取列表指定索引的值</span><br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForList().index(key, index);<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.set 操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// set 中存储值</span><br>redisTemplate.opsForSet().add(key, value1, value2);<br><br><span class=\"hljs-comment\">// 从 set 中取值</span><br>Set&lt;Object&gt; members = redisTemplate.opsForSet().members(key);<br><br><span class=\"hljs-comment\">// 判定 set 中是否存在 key-value</span><br> <span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">member</span> <span class=\"hljs-operator\">=</span> redisTemplate.opsForSet().isMember(key, value);<br><br><span class=\"hljs-comment\">//查询set长度</span><br>redisTemplate.opsForSet().size(key);<br><br><span class=\"hljs-comment\">//从set中移除某些个元素</span><br>redisTemplate.opsForSet().remove(key,values);<br><br><span class=\"hljs-comment\">//移除整个set</span><br>redisTemplate.delete(key);<br></code></pre></td></tr></table></figure>\n\n<p><strong>6.zset操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//往Zset中添加元素</span><br>redisTemplate.opsForZSet().add(key, value, score);<br><br><span class=\"hljs-comment\">//根据索引获取Zset的元素</span><br>redisTemplate.opsForZSet().range(key,begin,end);<br><br><span class=\"hljs-comment\">//获取Zset的所有元素</span><br>getZset(key,<span class=\"hljs-number\">0</span>,-<span class=\"hljs-number\">1</span>);<br><br><span class=\"hljs-comment\">// 往Zset中添加多个元素</span><br><span class=\"hljs-comment\">// DefaultTypedTuple&lt;String&gt; p1 = new DefaultTypedTuple&lt;&gt;(&quot;value1&quot;, 1.0);</span><br>HashSet&lt;DefaultTypedTuple&lt;String&gt;&gt; defaultTypedTuples = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;(list);<br>redisTemplate.opsForZSet().add(key,defaultTypedTuples);<br><br><span class=\"hljs-comment\">//获取Zset中指定元素的分数</span><br>redisTemplate.opsForZSet().score(key,value);<br>    <br><span class=\"hljs-comment\">//获取Zset集合的大小</span><br>redisTemplate.opsForZSet().size(key);<br>    <br><span class=\"hljs-comment\">//获取Zset指定分数内集合的大小</span><br>redisTemplate.opsForZSet().count(key,begin,end);<br>    <br><span class=\"hljs-comment\">//获取Zset指定分数内的集合</span><br>redisTemplate.opsForZSet().rangeByScore(key,begin,end);<br>    <br><span class=\"hljs-comment\">//根据 Index 获取Zset集合 (包括分数)</span><br>redisTemplate.opsForZSet().rangeWithScores(key,begin, end);<br>    <br><span class=\"hljs-comment\">//获取Zset集合</span><br>getZsetWithScore(key,<span class=\"hljs-number\">0L</span>, -<span class=\"hljs-number\">1L</span>);<br><br><span class=\"hljs-comment\">//获取指定成员的排名   从大到小排   a,b,c,d     a排0</span><br>redisTemplate.opsForZSet().rank(key,value);<br><br><span class=\"hljs-comment\">//获取指定成员的排名   从大到小排   a,b,c,d     a排3</span><br>redisTemplate.opsForZSet().reverseRank(key,value);<br> <br><span class=\"hljs-comment\">//从集合中删除指定元素</span><br>redisTemplate.opsForZSet().remove(key,value);<br>    <br><span class=\"hljs-comment\">//从集合中删除指定范围索引元素</span><br>redisTemplate.opsForZSet().removeRange(key,begin,end);<br>  <br><span class=\"hljs-comment\">//从集合中删除指定范围分数元素</span><br>redisTemplate.opsForZSet().removeRangeByScore(key,begin,end);<br>   <br><span class=\"hljs-comment\">//修改指定元素的分数</span><br>redisTemplate.opsForZSet().incrementScore(key,value,score);<br> <br></code></pre></td></tr></table></figure>\n\n"},{"title":"springboot集成redis","date":"2022-06-30T06:20:32.000Z","author":"Evan","_content":"\n# springboot 集成redis\n\n## redis是什么\n\nRedis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。\n\n## redis数据类型\n\n**String（字符串）**\n\nstring 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。\n\nstring 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。\n\nstring 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。\n\n**Hash（哈希）**\n\nRedis hash 是一个键值(key=>value)对集合。\n\nRedis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。\n\n**List（列表）**\n\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。\n\n**Set（集合）**\n\nRedis 的 Set 是 string 类型的无序集合。\n\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。\n\n**zset（sorted set：有序集合）**\n\nRedis  zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\nzset的成员是唯一的,但分数(score)却可以重复。\n\n## Springboot如何集成使用redis\n\n**1.添加依赖**\n\n```xml\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n </dependency>\n```\n\n**2.创建Redis的Config类**\n\n```java\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\n        // 创建redisTemplate\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(connectionFactory);\n\n        // 使用Jackson2JsonRedisSerialize替换默认序列化\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new \t Jackson2JsonRedisSerializer(Object.class);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // key采用String的序列化方式\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        // value序列化方式采用jackson\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        // hash的key也采用String的序列化方式\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        // hash的value序列化方式采用jackson\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n```\n\n**3.启动类上添加@EnableCaching注解**\n\n```java\n@SpringBootApplication()\n@EnableCaching\npublic class MyspringbootApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyspringbootApplication.class, args);\n    }\n}\n```\n\n到这里就完成springboot集成redis了。\n\n## redis数据操作\n\n[点击查看redis在springboot的操作](http://yangyewen.xyz/2022/06/30/redisTemplate%E6%93%8D%E4%BD%9Credis/)\n\n## 利用redis实现缓存功能\n\n原理很简单，先在redis中查询是否有数据，若没有就去数据库查询。\n\n如果redis有，就返回redis中的数据。\n\n```java\n @Autowired\n    RedisTemplate<String,Object> redisTemplate;\n\n@ResponseBody\n    @RequestMapping(value = \"/api/user\") //查询数据\n    public List<User> getuser() {\n        List<User> user;\n        //先在redis中查找\n        user=( List<User>)redisTemplate.opsForValue().get(\"user\");\n        //如果redis没有就查询数据库\n         if(user==null){\n             user=userrService.queryuser();\n         }\n        //将查到的数据放入redis缓存中\n        redisTemplate.opsForValue().set(\"user\", user);\n        return user;\n    }\n```\n\n","source":"_posts/springboot集成redis.md","raw":"---\ntitle: springboot集成redis\ndate: 2022-06-30 14:20:32\nauthor: Evan\ncategories: 笔记\ntags: \n---\n\n# springboot 集成redis\n\n## redis是什么\n\nRedis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。\n\n## redis数据类型\n\n**String（字符串）**\n\nstring 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。\n\nstring 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。\n\nstring 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。\n\n**Hash（哈希）**\n\nRedis hash 是一个键值(key=>value)对集合。\n\nRedis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。\n\n**List（列表）**\n\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。\n\n**Set（集合）**\n\nRedis 的 Set 是 string 类型的无序集合。\n\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。\n\n**zset（sorted set：有序集合）**\n\nRedis  zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\nzset的成员是唯一的,但分数(score)却可以重复。\n\n## Springboot如何集成使用redis\n\n**1.添加依赖**\n\n```xml\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n </dependency>\n```\n\n**2.创建Redis的Config类**\n\n```java\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\n        // 创建redisTemplate\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(connectionFactory);\n\n        // 使用Jackson2JsonRedisSerialize替换默认序列化\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new \t Jackson2JsonRedisSerializer(Object.class);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // key采用String的序列化方式\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        // value序列化方式采用jackson\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        // hash的key也采用String的序列化方式\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        // hash的value序列化方式采用jackson\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n```\n\n**3.启动类上添加@EnableCaching注解**\n\n```java\n@SpringBootApplication()\n@EnableCaching\npublic class MyspringbootApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyspringbootApplication.class, args);\n    }\n}\n```\n\n到这里就完成springboot集成redis了。\n\n## redis数据操作\n\n[点击查看redis在springboot的操作](http://yangyewen.xyz/2022/06/30/redisTemplate%E6%93%8D%E4%BD%9Credis/)\n\n## 利用redis实现缓存功能\n\n原理很简单，先在redis中查询是否有数据，若没有就去数据库查询。\n\n如果redis有，就返回redis中的数据。\n\n```java\n @Autowired\n    RedisTemplate<String,Object> redisTemplate;\n\n@ResponseBody\n    @RequestMapping(value = \"/api/user\") //查询数据\n    public List<User> getuser() {\n        List<User> user;\n        //先在redis中查找\n        user=( List<User>)redisTemplate.opsForValue().get(\"user\");\n        //如果redis没有就查询数据库\n         if(user==null){\n             user=userrService.queryuser();\n         }\n        //将查到的数据放入redis缓存中\n        redisTemplate.opsForValue().set(\"user\", user);\n        return user;\n    }\n```\n\n","slug":"springboot集成redis","published":1,"updated":"2022-06-30T09:08:20.346Z","_id":"cl50slzfo00025wu3achc0qon","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"springboot-集成redis\"><a href=\"#springboot-集成redis\" class=\"headerlink\" title=\"springboot 集成redis\"></a>springboot 集成redis</h1><h2 id=\"redis是什么\"><a href=\"#redis是什么\" class=\"headerlink\" title=\"redis是什么\"></a>redis是什么</h2><p>Redis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。</p>\n<h2 id=\"redis数据类型\"><a href=\"#redis数据类型\" class=\"headerlink\" title=\"redis数据类型\"></a>redis数据类型</h2><p><strong>String（字符串）</strong></p>\n<p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p>\n<p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p>\n<p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>\n<p><strong>Hash（哈希）</strong></p>\n<p>Redis hash 是一个键值(key=&gt;value)对集合。</p>\n<p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<p><strong>List（列表）</strong></p>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p><strong>Set（集合）</strong></p>\n<p>Redis 的 Set 是 string 类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n<p><strong>zset（sorted set：有序集合）</strong></p>\n<p>Redis  zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset的成员是唯一的,但分数(score)却可以重复。</p>\n<h2 id=\"Springboot如何集成使用redis\"><a href=\"#Springboot如何集成使用redis\" class=\"headerlink\" title=\"Springboot如何集成使用redis\"></a>Springboot如何集成使用redis</h2><p><strong>1.添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>2.创建Redis的Config类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        <span class=\"hljs-comment\">// 创建redisTemplate</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(connectionFactory);<br><br>        <span class=\"hljs-comment\">// 使用Jackson2JsonRedisSerialize替换默认序列化</span><br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> \t <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br><br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br><br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// key采用String的序列化方式</span><br>        redisTemplate.setKeySerializer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>());<br>        <span class=\"hljs-comment\">// value序列化方式采用jackson</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class=\"hljs-comment\">// hash的key也采用String的序列化方式</span><br>        redisTemplate.setHashKeySerializer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>());<br>        <span class=\"hljs-comment\">// hash的value序列化方式采用jackson</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.启动类上添加@EnableCaching注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication()</span><br><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyspringbootApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(MyspringbootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>到这里就完成springboot集成redis了。</p>\n<h2 id=\"redis数据操作\"><a href=\"#redis数据操作\" class=\"headerlink\" title=\"redis数据操作\"></a>redis数据操作</h2><p><a href=\"http://yangyewen.xyz/2022/06/30/redisTemplate%E6%93%8D%E4%BD%9Credis/\">点击查看redis在springboot的操作</a></p>\n<h2 id=\"利用redis实现缓存功能\"><a href=\"#利用redis实现缓存功能\" class=\"headerlink\" title=\"利用redis实现缓存功能\"></a>利用redis实现缓存功能</h2><p>原理很简单，先在redis中查询是否有数据，若没有就去数据库查询。</p>\n<p>如果redis有，就返回redis中的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"> <span class=\"hljs-meta\">@Autowired</span><br>    RedisTemplate&lt;String,Object&gt; redisTemplate;<br><br><span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/api/user&quot;)</span> <span class=\"hljs-comment\">//查询数据</span><br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">getuser</span><span class=\"hljs-params\">()</span> &#123;<br>        List&lt;User&gt; user;<br>        <span class=\"hljs-comment\">//先在redis中查找</span><br>        user=( List&lt;User&gt;)redisTemplate.opsForValue().get(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">//如果redis没有就查询数据库</span><br>         <span class=\"hljs-keyword\">if</span>(user==<span class=\"hljs-literal\">null</span>)&#123;<br>             user=userrService.queryuser();<br>         &#125;<br>        <span class=\"hljs-comment\">//将查到的数据放入redis缓存中</span><br>        redisTemplate.opsForValue().set(<span class=\"hljs-string\">&quot;user&quot;</span>, user);<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":2896,"excerpt":"","more":"<h1 id=\"springboot-集成redis\"><a href=\"#springboot-集成redis\" class=\"headerlink\" title=\"springboot 集成redis\"></a>springboot 集成redis</h1><h2 id=\"redis是什么\"><a href=\"#redis是什么\" class=\"headerlink\" title=\"redis是什么\"></a>redis是什么</h2><p>Redis 是一种非关系型数据库（NoSQL），NoSQL 是以 key-value 的形式存储的，和传统的关系型数据库不一样，不一定遵循传统数据库的一些基本要求，比如说 SQL 标准，ACID 属性，表结构等等，这类数据库主要有以下特点：非关系型的、分布式的、开源的、水平可扩展的。NoSQL 使用场景有：对数据高并发读写、对海量数据的高效率存储和访问、对数据的高可扩展性和高可用性等等。</p>\n<h2 id=\"redis数据类型\"><a href=\"#redis数据类型\" class=\"headerlink\" title=\"redis数据类型\"></a>redis数据类型</h2><p><strong>String（字符串）</strong></p>\n<p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p>\n<p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p>\n<p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>\n<p><strong>Hash（哈希）</strong></p>\n<p>Redis hash 是一个键值(key=&gt;value)对集合。</p>\n<p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<p><strong>List（列表）</strong></p>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p><strong>Set（集合）</strong></p>\n<p>Redis 的 Set 是 string 类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n<p><strong>zset（sorted set：有序集合）</strong></p>\n<p>Redis  zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset的成员是唯一的,但分数(score)却可以重复。</p>\n<h2 id=\"Springboot如何集成使用redis\"><a href=\"#Springboot如何集成使用redis\" class=\"headerlink\" title=\"Springboot如何集成使用redis\"></a>Springboot如何集成使用redis</h2><p><strong>1.添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>2.创建Redis的Config类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        <span class=\"hljs-comment\">// 创建redisTemplate</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(connectionFactory);<br><br>        <span class=\"hljs-comment\">// 使用Jackson2JsonRedisSerialize替换默认序列化</span><br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> \t <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br><br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br><br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// key采用String的序列化方式</span><br>        redisTemplate.setKeySerializer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>());<br>        <span class=\"hljs-comment\">// value序列化方式采用jackson</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class=\"hljs-comment\">// hash的key也采用String的序列化方式</span><br>        redisTemplate.setHashKeySerializer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>());<br>        <span class=\"hljs-comment\">// hash的value序列化方式采用jackson</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.启动类上添加@EnableCaching注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication()</span><br><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyspringbootApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(MyspringbootApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>到这里就完成springboot集成redis了。</p>\n<h2 id=\"redis数据操作\"><a href=\"#redis数据操作\" class=\"headerlink\" title=\"redis数据操作\"></a>redis数据操作</h2><p><a href=\"http://yangyewen.xyz/2022/06/30/redisTemplate%E6%93%8D%E4%BD%9Credis/\">点击查看redis在springboot的操作</a></p>\n<h2 id=\"利用redis实现缓存功能\"><a href=\"#利用redis实现缓存功能\" class=\"headerlink\" title=\"利用redis实现缓存功能\"></a>利用redis实现缓存功能</h2><p>原理很简单，先在redis中查询是否有数据，若没有就去数据库查询。</p>\n<p>如果redis有，就返回redis中的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"> <span class=\"hljs-meta\">@Autowired</span><br>    RedisTemplate&lt;String,Object&gt; redisTemplate;<br><br><span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/api/user&quot;)</span> <span class=\"hljs-comment\">//查询数据</span><br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">getuser</span><span class=\"hljs-params\">()</span> &#123;<br>        List&lt;User&gt; user;<br>        <span class=\"hljs-comment\">//先在redis中查找</span><br>        user=( List&lt;User&gt;)redisTemplate.opsForValue().get(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>        <span class=\"hljs-comment\">//如果redis没有就查询数据库</span><br>         <span class=\"hljs-keyword\">if</span>(user==<span class=\"hljs-literal\">null</span>)&#123;<br>             user=userrService.queryuser();<br>         &#125;<br>        <span class=\"hljs-comment\">//将查到的数据放入redis缓存中</span><br>        redisTemplate.opsForValue().set(<span class=\"hljs-string\">&quot;user&quot;</span>, user);<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"javascript中对中文字段排序","date":"2022-08-05T08:39:29.000Z","author":"Evan","_content":"\n## 用javascript对数组中的中文字段进行排序\n\n可以使用对象字面量来实现。\n\n```\nvar o = [{id : 007, type : \"广州\"}, \n\t {id : 005, type : \"深圳\"},\n\t {id : 008, type : \"东莞\"}, \n\t {id : 003, type : \"中山\"}, \n\t {id : 002, type : \"深圳\"}, \n\t {id : 006, type : \"佛山\"}];\nvar compareData = {\n\t\"东莞\" : 1,\n\t\"佛山\" : 2,\n\t\"广州\" : 3,\n\t\"深圳\" : 4,\n\t\"顺德\" : 5,\n\t\"中山\" : 6\n};\nl = o.sort(function compare(a,b){return compareData[a.type] - compareData[b.type];});\nfor(var i = 0; i < l.length; i++){\n    document.write(l[i][\"type\"]);\n}\n```\n\n","source":"_posts/javascript中对中文字段排序.md","raw":"---\ntitle: javascript中对中文字段排序\ndate: 2022-08-05 16:39:29\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## 用javascript对数组中的中文字段进行排序\n\n可以使用对象字面量来实现。\n\n```\nvar o = [{id : 007, type : \"广州\"}, \n\t {id : 005, type : \"深圳\"},\n\t {id : 008, type : \"东莞\"}, \n\t {id : 003, type : \"中山\"}, \n\t {id : 002, type : \"深圳\"}, \n\t {id : 006, type : \"佛山\"}];\nvar compareData = {\n\t\"东莞\" : 1,\n\t\"佛山\" : 2,\n\t\"广州\" : 3,\n\t\"深圳\" : 4,\n\t\"顺德\" : 5,\n\t\"中山\" : 6\n};\nl = o.sort(function compare(a,b){return compareData[a.type] - compareData[b.type];});\nfor(var i = 0; i < l.length; i++){\n    document.write(l[i][\"type\"]);\n}\n```\n\n","slug":"javascript中对中文字段排序","published":1,"updated":"2022-08-05T08:46:04.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6g82z310000iou39j3f1pmh","content":"<h2 id=\"用javascript对数组中的中文字段进行排序\"><a href=\"#用javascript对数组中的中文字段进行排序\" class=\"headerlink\" title=\"用javascript对数组中的中文字段进行排序\"></a>用javascript对数组中的中文字段进行排序</h2><p>可以使用对象字面量来实现。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-keyword\">var</span> o = [&#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 007, type</span> : <span class=\"hljs-string\">&quot;广州&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 005, type</span> : <span class=\"hljs-string\">&quot;深圳&quot;</span>&#125;,<br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 008, type</span> : <span class=\"hljs-string\">&quot;东莞&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 003, type</span> : <span class=\"hljs-string\">&quot;中山&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 002, type</span> : <span class=\"hljs-string\">&quot;深圳&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 006, type</span> : <span class=\"hljs-string\">&quot;佛山&quot;</span>&#125;];<br><span class=\"hljs-keyword\">var</span> compareData = &#123;<br>\t<span class=\"hljs-string\">&quot;东莞&quot;</span> : <span class=\"hljs-number\">1</span>,<br>\t<span class=\"hljs-string\">&quot;佛山&quot;</span> : <span class=\"hljs-number\">2</span>,<br>\t<span class=\"hljs-string\">&quot;广州&quot;</span> : <span class=\"hljs-number\">3</span>,<br>\t<span class=\"hljs-string\">&quot;深圳&quot;</span> : <span class=\"hljs-number\">4</span>,<br>\t<span class=\"hljs-string\">&quot;顺德&quot;</span> : <span class=\"hljs-number\">5</span>,<br>\t<span class=\"hljs-string\">&quot;中山&quot;</span> : <span class=\"hljs-number\">6</span><br>&#125;;<br>l = o.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compare</span>(<span class=\"hljs-params\">a,b</span>)</span>&#123;<span class=\"hljs-keyword\">return</span> compareData[a.type] - compareData[b.type];&#125;);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; l.length; i++)&#123;<br>    <span class=\"hljs-built_in\">document</span>.write(l[i][<span class=\"hljs-string\">&quot;type&quot;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":603,"excerpt":"","more":"<h2 id=\"用javascript对数组中的中文字段进行排序\"><a href=\"#用javascript对数组中的中文字段进行排序\" class=\"headerlink\" title=\"用javascript对数组中的中文字段进行排序\"></a>用javascript对数组中的中文字段进行排序</h2><p>可以使用对象字面量来实现。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-keyword\">var</span> o = [&#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 007, type</span> : <span class=\"hljs-string\">&quot;广州&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 005, type</span> : <span class=\"hljs-string\">&quot;深圳&quot;</span>&#125;,<br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 008, type</span> : <span class=\"hljs-string\">&quot;东莞&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 003, type</span> : <span class=\"hljs-string\">&quot;中山&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 002, type</span> : <span class=\"hljs-string\">&quot;深圳&quot;</span>&#125;, <br>\t &#123;<span class=\"hljs-attribute\">id :</span><span class=\"hljs-string\"> 006, type</span> : <span class=\"hljs-string\">&quot;佛山&quot;</span>&#125;];<br><span class=\"hljs-keyword\">var</span> compareData = &#123;<br>\t<span class=\"hljs-string\">&quot;东莞&quot;</span> : <span class=\"hljs-number\">1</span>,<br>\t<span class=\"hljs-string\">&quot;佛山&quot;</span> : <span class=\"hljs-number\">2</span>,<br>\t<span class=\"hljs-string\">&quot;广州&quot;</span> : <span class=\"hljs-number\">3</span>,<br>\t<span class=\"hljs-string\">&quot;深圳&quot;</span> : <span class=\"hljs-number\">4</span>,<br>\t<span class=\"hljs-string\">&quot;顺德&quot;</span> : <span class=\"hljs-number\">5</span>,<br>\t<span class=\"hljs-string\">&quot;中山&quot;</span> : <span class=\"hljs-number\">6</span><br>&#125;;<br>l = o.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compare</span>(<span class=\"hljs-params\">a,b</span>)</span>&#123;<span class=\"hljs-keyword\">return</span> compareData[a.type] - compareData[b.type];&#125;);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; l.length; i++)&#123;<br>    <span class=\"hljs-built_in\">document</span>.write(l[i][<span class=\"hljs-string\">&quot;type&quot;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SQL-FIND_IN_SET（）函数的使用","date":"2022-08-23T01:34:55.000Z","author":"Evan","_content":"\n## FIND_IN_SET()函数\n\n有这样的一个使用场景，当我需要从一个表中查询出某列的值符合一个条件集的数据。\n\n如果条件集数量确定的话，可以使用in进行查询，比如说固定条件是3个的时候：\n\nuser_name  = 杨叶文 or  user_name  = 刘德华  or user_name  = 彭于晏。\n\n```sql\nselect * from user where user_name in ('杨叶文','刘德华','彭于晏');\n可以在in(@var1,@var2,@var3)加三个参数，然后按得到的值分别赋给 @var1,@var2,@var3。\nselect * from user where user_name in ( @var1,@var2,@var3);\n```\n\n那么但如果传入的条件集是一个变量的话，传入 in里面的值数量不确定的时候,例如用户这次要查询3个人数据，下次要查询6个人的数据，那么固定参数数量的方法就无法使用了。\n\n当传入一个大小不确定的list集合，或者传入一个长度不一定的字符串，那么in方法就无法使用。\n\n这时可以使用FIND_IN_SET()函数\n\n```sql\nFIND_IN_SET(str,strlist) \nstr 要查询的字符串\nstrlist 字段名 参数以”,”分隔 如 (1,2,6,8)\n查询字段(strlist)中包含(str)的结果，返回结果为null或记录\n```\n\n实现：\n\n```sql\nselect * from user where FIND_IN_SET(user_name,@nameStr);\nnameStr:\"杨叶文,刘德华,彭于晏\";\n```\n\n​\t\t\t\t\t\t\t\t\t\t\n","source":"_posts/SQL-FIND-IN-SET（）函数的使用.md","raw":"---\ntitle: SQL-FIND_IN_SET（）函数的使用\ndate: 2022-08-23 09:34:55\nauthor: Evan\ncategories: 笔记\ntags:\n- MySql\n---\n\n## FIND_IN_SET()函数\n\n有这样的一个使用场景，当我需要从一个表中查询出某列的值符合一个条件集的数据。\n\n如果条件集数量确定的话，可以使用in进行查询，比如说固定条件是3个的时候：\n\nuser_name  = 杨叶文 or  user_name  = 刘德华  or user_name  = 彭于晏。\n\n```sql\nselect * from user where user_name in ('杨叶文','刘德华','彭于晏');\n可以在in(@var1,@var2,@var3)加三个参数，然后按得到的值分别赋给 @var1,@var2,@var3。\nselect * from user where user_name in ( @var1,@var2,@var3);\n```\n\n那么但如果传入的条件集是一个变量的话，传入 in里面的值数量不确定的时候,例如用户这次要查询3个人数据，下次要查询6个人的数据，那么固定参数数量的方法就无法使用了。\n\n当传入一个大小不确定的list集合，或者传入一个长度不一定的字符串，那么in方法就无法使用。\n\n这时可以使用FIND_IN_SET()函数\n\n```sql\nFIND_IN_SET(str,strlist) \nstr 要查询的字符串\nstrlist 字段名 参数以”,”分隔 如 (1,2,6,8)\n查询字段(strlist)中包含(str)的结果，返回结果为null或记录\n```\n\n实现：\n\n```sql\nselect * from user where FIND_IN_SET(user_name,@nameStr);\nnameStr:\"杨叶文,刘德华,彭于晏\";\n```\n\n​\t\t\t\t\t\t\t\t\t\t\n","slug":"SQL-FIND-IN-SET（）函数的使用","published":1,"updated":"2022-08-23T02:11:54.725Z","_id":"cl75jvoka0000r4v22nazc4nw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"FIND-IN-SET-函数\"><a href=\"#FIND-IN-SET-函数\" class=\"headerlink\" title=\"FIND_IN_SET()函数\"></a>FIND_IN_SET()函数</h2><p>有这样的一个使用场景，当我需要从一个表中查询出某列的值符合一个条件集的数据。</p>\n<p>如果条件集数量确定的话，可以使用in进行查询，比如说固定条件是3个的时候：</p>\n<p>user_name  = 杨叶文 or  user_name  = 刘德华  or user_name  = 彭于晏。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> user_name <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">&#x27;杨叶文&#x27;</span>,<span class=\"hljs-string\">&#x27;刘德华&#x27;</span>,<span class=\"hljs-string\">&#x27;彭于晏&#x27;</span>);<br>可以在<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-variable\">@var1</span>,<span class=\"hljs-variable\">@var2</span>,<span class=\"hljs-variable\">@var3</span>)加三个参数，然后按得到的值分别赋给 <span class=\"hljs-variable\">@var1</span>,<span class=\"hljs-variable\">@var2</span>,<span class=\"hljs-variable\">@var3</span>。<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> user_name <span class=\"hljs-keyword\">in</span> ( <span class=\"hljs-variable\">@var1</span>,<span class=\"hljs-variable\">@var2</span>,<span class=\"hljs-variable\">@var3</span>);<br></code></pre></td></tr></table></figure>\n\n<p>那么但如果传入的条件集是一个变量的话，传入 in里面的值数量不确定的时候,例如用户这次要查询3个人数据，下次要查询6个人的数据，那么固定参数数量的方法就无法使用了。</p>\n<p>当传入一个大小不确定的list集合，或者传入一个长度不一定的字符串，那么in方法就无法使用。</p>\n<p>这时可以使用FIND_IN_SET()函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">FIND_IN_SET(str,strlist) <br>str 要查询的字符串<br>strlist 字段名 参数以”,”分隔 如 (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>)<br>查询字段(strlist)中包含(str)的结果，返回结果为<span class=\"hljs-keyword\">null</span>或记录<br></code></pre></td></tr></table></figure>\n\n<p>实现：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> FIND_IN_SET(user_name,<span class=\"hljs-variable\">@nameStr</span>);<br>nameStr:&quot;杨叶文,刘德华,彭于晏&quot;;<br></code></pre></td></tr></table></figure>\n\n<p>​                                        </p>\n","site":{"data":{}},"wordcount":669,"excerpt":"","more":"<h2 id=\"FIND-IN-SET-函数\"><a href=\"#FIND-IN-SET-函数\" class=\"headerlink\" title=\"FIND_IN_SET()函数\"></a>FIND_IN_SET()函数</h2><p>有这样的一个使用场景，当我需要从一个表中查询出某列的值符合一个条件集的数据。</p>\n<p>如果条件集数量确定的话，可以使用in进行查询，比如说固定条件是3个的时候：</p>\n<p>user_name  = 杨叶文 or  user_name  = 刘德华  or user_name  = 彭于晏。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> user_name <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">&#x27;杨叶文&#x27;</span>,<span class=\"hljs-string\">&#x27;刘德华&#x27;</span>,<span class=\"hljs-string\">&#x27;彭于晏&#x27;</span>);<br>可以在<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-variable\">@var1</span>,<span class=\"hljs-variable\">@var2</span>,<span class=\"hljs-variable\">@var3</span>)加三个参数，然后按得到的值分别赋给 <span class=\"hljs-variable\">@var1</span>,<span class=\"hljs-variable\">@var2</span>,<span class=\"hljs-variable\">@var3</span>。<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> user_name <span class=\"hljs-keyword\">in</span> ( <span class=\"hljs-variable\">@var1</span>,<span class=\"hljs-variable\">@var2</span>,<span class=\"hljs-variable\">@var3</span>);<br></code></pre></td></tr></table></figure>\n\n<p>那么但如果传入的条件集是一个变量的话，传入 in里面的值数量不确定的时候,例如用户这次要查询3个人数据，下次要查询6个人的数据，那么固定参数数量的方法就无法使用了。</p>\n<p>当传入一个大小不确定的list集合，或者传入一个长度不一定的字符串，那么in方法就无法使用。</p>\n<p>这时可以使用FIND_IN_SET()函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">FIND_IN_SET(str,strlist) <br>str 要查询的字符串<br>strlist 字段名 参数以”,”分隔 如 (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>)<br>查询字段(strlist)中包含(str)的结果，返回结果为<span class=\"hljs-keyword\">null</span>或记录<br></code></pre></td></tr></table></figure>\n\n<p>实现：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> FIND_IN_SET(user_name,<span class=\"hljs-variable\">@nameStr</span>);<br>nameStr:&quot;杨叶文,刘德华,彭于晏&quot;;<br></code></pre></td></tr></table></figure>\n\n<p>​                                        </p>\n"},{"title":"Mybatis-plus-generator代码自动生成工具，自动生成实体类","date":"2022-08-29T08:43:09.000Z","author":"Evan","_content":"\n## Mybatis-plus-generator代码自动生成工具，自动生成实体类\n\n 使用Mybatis-plus-generator可以自动生成 Controller Service Mapper DAO层的基本代码，免去自己去写实体类映射数据库的繁琐操作。\n\n### 步骤如下\n\n**添加依赖**\n\n```xml\n\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-generator</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.velocity</groupId>\n            <artifactId>velocity-engine-core</artifactId>\n            <version>2.0</version>\n        </dependency>\n```\n\n**实现代码**\n\n按注释修改自己的配置\n\n可将下面代码放到test包运行\n\n```java\npackage com.example.myspringboot;\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;\nimport com.baomidou.mybatisplus.generator.AutoGenerator;\nimport com.baomidou.mybatisplus.generator.config.DataSourceConfig;\nimport com.baomidou.mybatisplus.generator.config.GlobalConfig;\nimport com.baomidou.mybatisplus.generator.config.PackageConfig;\nimport com.baomidou.mybatisplus.generator.config.StrategyConfig;\nimport com.baomidou.mybatisplus.generator.config.rules.DateType;\nimport com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.Scanner;\n\n@Slf4j\npublic class MyBatisPlusGenerator {\n\n    public static void main(String[] args) {\n        //1. 全局配置\n        GlobalConfig config = new GlobalConfig();\n        // 是否支持AR模式\n        config.setActiveRecord(true)\n                // 作者\n                .setAuthor(\"Evan\")\n                // 生成路径，最好使用绝对路径\n                //TODO  TODO  TODO  TODO\n                .setOutputDir(\"C:\\\\Users\\\\root\\\\Desktop\\\\myspringboot\\\\src\\\\main\\\\java\")\n                // 文件覆盖\n                .setFileOverride(true)\n                // 主键策略\n                .setIdType(IdType.AUTO)\n\n                .setDateType(DateType.ONLY_DATE)\n                // 设置生成的service接口的名字的首字母是否为I，默认Service是以I开头的\n                .setServiceName(\"%Service\")\n\n                //实体类结尾名称\n                .setEntityName(\"\")\n\n                //生成基本的resultMap\n                .setBaseResultMap(true)\n\n                //不使用AR模式\n                .setActiveRecord(false)\n\n                //生成基本的SQL片段\n                .setBaseColumnList(true);\n\n        //2. 数据源配置\n        DataSourceConfig dsConfig = new DataSourceConfig();\n        // 设置数据库类型\n        dsConfig.setDbType(DbType.MYSQL)\n                .setDriverName(\"com.mysql.cj.jdbc.Driver\")\n                //TODO  TODO  TODO  TODO\n                .setUrl(\"jdbc:mysql://127.0.0.1:3306/practice?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\")\n                .setUsername(\"root\")\n                .setPassword(\"123456\");\n\n        //3. 策略配置globalConfiguration中\n        StrategyConfig stConfig = new StrategyConfig();\n\n        //全局大写命名\n        stConfig.setCapitalMode(true)\n                // 数据库表映射到实体的命名策略\n                .setNaming(NamingStrategy.underline_to_camel)\n\n                //使用lombok\n                .setEntityLombokModel(true)\n\n                //使用restcontroller注解\n                .setRestControllerStyle(true)\n\n                // 生成的表, 支持多表一起生成，以数组形式填写\n                //TODO  TODO  TODO  TODO 两个方式，直接写，或者使用命令行输入\n                .setInclude(\"student\");\n        //.setInclude(scanner(\"表名，多个英文逗号分割\").split(\",\"));\n\n        //4. 包名策略配置\n        PackageConfig pkConfig = new PackageConfig();\n        pkConfig.setParent(\"com.example.myspringboot\")\n                .setMapper(\"mapper\")\n                .setService(\"service\")\n                .setController(\"controller\")\n                .setEntity(\"pojo\")\n                .setXml(\"mapper\");\n\n        //5. 整合配置\n        AutoGenerator ag = new AutoGenerator();\n        ag.setGlobalConfig(config)\n                .setDataSource(dsConfig)\n                .setStrategy(stConfig)\n                .setPackageInfo(pkConfig);\n\n        //6. 执行操作\n        ag.execute();\n        System.out.println(\"=======  Done 相关代码生成完毕  ========\");\n    }\n\n    /**\n     * <p>\n     * 读取控制台内容\n     * </p>\n     */\n//    public static String scanner(String tip) {\n//        Scanner scanner = new Scanner(System.in);\n//        StringBuilder help = new StringBuilder();\n//        help.append(\"请输入\" + tip + \"：\");\n//        System.out.println(help.toString());\n//        if (scanner.hasNext()) {\n//            String ipt = scanner.next();\n//            if (StringUtils.isNotBlank(ipt)) {\n//                return ipt;\n//            }\n//        }\n//        throw new MybatisPlusException(\"请输入正确的\" + tip + \"！\");\n//    }\n}\n```\n\n**点击运行即可**\n\n","source":"_posts/Mybatis-plus-generator代码自动生成工具，自动生成实体类.md","raw":"---\ntitle: Mybatis-plus-generator代码自动生成工具，自动生成实体类\ndate: 2022-08-29 16:43:09\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## Mybatis-plus-generator代码自动生成工具，自动生成实体类\n\n 使用Mybatis-plus-generator可以自动生成 Controller Service Mapper DAO层的基本代码，免去自己去写实体类映射数据库的繁琐操作。\n\n### 步骤如下\n\n**添加依赖**\n\n```xml\n\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-generator</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.velocity</groupId>\n            <artifactId>velocity-engine-core</artifactId>\n            <version>2.0</version>\n        </dependency>\n```\n\n**实现代码**\n\n按注释修改自己的配置\n\n可将下面代码放到test包运行\n\n```java\npackage com.example.myspringboot;\n\nimport com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;\nimport com.baomidou.mybatisplus.generator.AutoGenerator;\nimport com.baomidou.mybatisplus.generator.config.DataSourceConfig;\nimport com.baomidou.mybatisplus.generator.config.GlobalConfig;\nimport com.baomidou.mybatisplus.generator.config.PackageConfig;\nimport com.baomidou.mybatisplus.generator.config.StrategyConfig;\nimport com.baomidou.mybatisplus.generator.config.rules.DateType;\nimport com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.Scanner;\n\n@Slf4j\npublic class MyBatisPlusGenerator {\n\n    public static void main(String[] args) {\n        //1. 全局配置\n        GlobalConfig config = new GlobalConfig();\n        // 是否支持AR模式\n        config.setActiveRecord(true)\n                // 作者\n                .setAuthor(\"Evan\")\n                // 生成路径，最好使用绝对路径\n                //TODO  TODO  TODO  TODO\n                .setOutputDir(\"C:\\\\Users\\\\root\\\\Desktop\\\\myspringboot\\\\src\\\\main\\\\java\")\n                // 文件覆盖\n                .setFileOverride(true)\n                // 主键策略\n                .setIdType(IdType.AUTO)\n\n                .setDateType(DateType.ONLY_DATE)\n                // 设置生成的service接口的名字的首字母是否为I，默认Service是以I开头的\n                .setServiceName(\"%Service\")\n\n                //实体类结尾名称\n                .setEntityName(\"\")\n\n                //生成基本的resultMap\n                .setBaseResultMap(true)\n\n                //不使用AR模式\n                .setActiveRecord(false)\n\n                //生成基本的SQL片段\n                .setBaseColumnList(true);\n\n        //2. 数据源配置\n        DataSourceConfig dsConfig = new DataSourceConfig();\n        // 设置数据库类型\n        dsConfig.setDbType(DbType.MYSQL)\n                .setDriverName(\"com.mysql.cj.jdbc.Driver\")\n                //TODO  TODO  TODO  TODO\n                .setUrl(\"jdbc:mysql://127.0.0.1:3306/practice?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC\")\n                .setUsername(\"root\")\n                .setPassword(\"123456\");\n\n        //3. 策略配置globalConfiguration中\n        StrategyConfig stConfig = new StrategyConfig();\n\n        //全局大写命名\n        stConfig.setCapitalMode(true)\n                // 数据库表映射到实体的命名策略\n                .setNaming(NamingStrategy.underline_to_camel)\n\n                //使用lombok\n                .setEntityLombokModel(true)\n\n                //使用restcontroller注解\n                .setRestControllerStyle(true)\n\n                // 生成的表, 支持多表一起生成，以数组形式填写\n                //TODO  TODO  TODO  TODO 两个方式，直接写，或者使用命令行输入\n                .setInclude(\"student\");\n        //.setInclude(scanner(\"表名，多个英文逗号分割\").split(\",\"));\n\n        //4. 包名策略配置\n        PackageConfig pkConfig = new PackageConfig();\n        pkConfig.setParent(\"com.example.myspringboot\")\n                .setMapper(\"mapper\")\n                .setService(\"service\")\n                .setController(\"controller\")\n                .setEntity(\"pojo\")\n                .setXml(\"mapper\");\n\n        //5. 整合配置\n        AutoGenerator ag = new AutoGenerator();\n        ag.setGlobalConfig(config)\n                .setDataSource(dsConfig)\n                .setStrategy(stConfig)\n                .setPackageInfo(pkConfig);\n\n        //6. 执行操作\n        ag.execute();\n        System.out.println(\"=======  Done 相关代码生成完毕  ========\");\n    }\n\n    /**\n     * <p>\n     * 读取控制台内容\n     * </p>\n     */\n//    public static String scanner(String tip) {\n//        Scanner scanner = new Scanner(System.in);\n//        StringBuilder help = new StringBuilder();\n//        help.append(\"请输入\" + tip + \"：\");\n//        System.out.println(help.toString());\n//        if (scanner.hasNext()) {\n//            String ipt = scanner.next();\n//            if (StringUtils.isNotBlank(ipt)) {\n//                return ipt;\n//            }\n//        }\n//        throw new MybatisPlusException(\"请输入正确的\" + tip + \"！\");\n//    }\n}\n```\n\n**点击运行即可**\n\n","slug":"Mybatis-plus-generator代码自动生成工具，自动生成实体类","published":1,"updated":"2022-08-29T08:49:35.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7eiry0l0000owv2d8at9fnm","content":"<h2 id=\"Mybatis-plus-generator代码自动生成工具，自动生成实体类\"><a href=\"#Mybatis-plus-generator代码自动生成工具，自动生成实体类\" class=\"headerlink\" title=\"Mybatis-plus-generator代码自动生成工具，自动生成实体类\"></a>Mybatis-plus-generator代码自动生成工具，自动生成实体类</h2><p> 使用Mybatis-plus-generator可以自动生成 Controller Service Mapper DAO层的基本代码，免去自己去写实体类映射数据库的繁琐操作。</p>\n<h3 id=\"步骤如下\"><a href=\"#步骤如下\" class=\"headerlink\" title=\"步骤如下\"></a>步骤如下</h3><p><strong>添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.baomidou<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-plus-generator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.4.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.velocity<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>velocity-engine-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>实现代码</strong></p>\n<p>按注释修改自己的配置</p>\n<p>可将下面代码放到test包运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.example.myspringboot;<br><br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br><span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBatisPlusGenerator</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//1. 全局配置</span><br>        <span class=\"hljs-type\">GlobalConfig</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GlobalConfig</span>();<br>        <span class=\"hljs-comment\">// 是否支持AR模式</span><br>        config.setActiveRecord(<span class=\"hljs-literal\">true</span>)<br>                <span class=\"hljs-comment\">// 作者</span><br>                .setAuthor(<span class=\"hljs-string\">&quot;Evan&quot;</span>)<br>                <span class=\"hljs-comment\">// 生成路径，最好使用绝对路径</span><br>                <span class=\"hljs-comment\">//TODO  TODO  TODO  TODO</span><br>                .setOutputDir(<span class=\"hljs-string\">&quot;C:\\\\Users\\\\root\\\\Desktop\\\\myspringboot\\\\src\\\\main\\\\java&quot;</span>)<br>                <span class=\"hljs-comment\">// 文件覆盖</span><br>                .setFileOverride(<span class=\"hljs-literal\">true</span>)<br>                <span class=\"hljs-comment\">// 主键策略</span><br>                .setIdType(IdType.AUTO)<br><br>                .setDateType(DateType.ONLY_DATE)<br>                <span class=\"hljs-comment\">// 设置生成的service接口的名字的首字母是否为I，默认Service是以I开头的</span><br>                .setServiceName(<span class=\"hljs-string\">&quot;%Service&quot;</span>)<br><br>                <span class=\"hljs-comment\">//实体类结尾名称</span><br>                .setEntityName(<span class=\"hljs-string\">&quot;&quot;</span>)<br><br>                <span class=\"hljs-comment\">//生成基本的resultMap</span><br>                .setBaseResultMap(<span class=\"hljs-literal\">true</span>)<br><br>                <span class=\"hljs-comment\">//不使用AR模式</span><br>                .setActiveRecord(<span class=\"hljs-literal\">false</span>)<br><br>                <span class=\"hljs-comment\">//生成基本的SQL片段</span><br>                .setBaseColumnList(<span class=\"hljs-literal\">true</span>);<br><br>        <span class=\"hljs-comment\">//2. 数据源配置</span><br>        <span class=\"hljs-type\">DataSourceConfig</span> <span class=\"hljs-variable\">dsConfig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DataSourceConfig</span>();<br>        <span class=\"hljs-comment\">// 设置数据库类型</span><br>        dsConfig.setDbType(DbType.MYSQL)<br>                .setDriverName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)<br>                <span class=\"hljs-comment\">//TODO  TODO  TODO  TODO</span><br>                .setUrl(<span class=\"hljs-string\">&quot;jdbc:mysql://127.0.0.1:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC&quot;</span>)<br>                .setUsername(<span class=\"hljs-string\">&quot;root&quot;</span>)<br>                .setPassword(<span class=\"hljs-string\">&quot;123456&quot;</span>);<br><br>        <span class=\"hljs-comment\">//3. 策略配置globalConfiguration中</span><br>        <span class=\"hljs-type\">StrategyConfig</span> <span class=\"hljs-variable\">stConfig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StrategyConfig</span>();<br><br>        <span class=\"hljs-comment\">//全局大写命名</span><br>        stConfig.setCapitalMode(<span class=\"hljs-literal\">true</span>)<br>                <span class=\"hljs-comment\">// 数据库表映射到实体的命名策略</span><br>                .setNaming(NamingStrategy.underline_to_camel)<br><br>                <span class=\"hljs-comment\">//使用lombok</span><br>                .setEntityLombokModel(<span class=\"hljs-literal\">true</span>)<br><br>                <span class=\"hljs-comment\">//使用restcontroller注解</span><br>                .setRestControllerStyle(<span class=\"hljs-literal\">true</span>)<br><br>                <span class=\"hljs-comment\">// 生成的表, 支持多表一起生成，以数组形式填写</span><br>                <span class=\"hljs-comment\">//TODO  TODO  TODO  TODO 两个方式，直接写，或者使用命令行输入</span><br>                .setInclude(<span class=\"hljs-string\">&quot;student&quot;</span>);<br>        <span class=\"hljs-comment\">//.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br><br>        <span class=\"hljs-comment\">//4. 包名策略配置</span><br>        <span class=\"hljs-type\">PackageConfig</span> <span class=\"hljs-variable\">pkConfig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PackageConfig</span>();<br>        pkConfig.setParent(<span class=\"hljs-string\">&quot;com.example.myspringboot&quot;</span>)<br>                .setMapper(<span class=\"hljs-string\">&quot;mapper&quot;</span>)<br>                .setService(<span class=\"hljs-string\">&quot;service&quot;</span>)<br>                .setController(<span class=\"hljs-string\">&quot;controller&quot;</span>)<br>                .setEntity(<span class=\"hljs-string\">&quot;pojo&quot;</span>)<br>                .setXml(<span class=\"hljs-string\">&quot;mapper&quot;</span>);<br><br>        <span class=\"hljs-comment\">//5. 整合配置</span><br>        <span class=\"hljs-type\">AutoGenerator</span> <span class=\"hljs-variable\">ag</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AutoGenerator</span>();<br>        ag.setGlobalConfig(config)<br>                .setDataSource(dsConfig)<br>                .setStrategy(stConfig)<br>                .setPackageInfo(pkConfig);<br><br>        <span class=\"hljs-comment\">//6. 执行操作</span><br>        ag.execute();<br>        System.out.println(<span class=\"hljs-string\">&quot;=======  Done 相关代码生成完毕  ========&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * &lt;p&gt;</span><br><span class=\"hljs-comment\">     * 读取控制台内容</span><br><span class=\"hljs-comment\">     * &lt;/p&gt;</span><br><span class=\"hljs-comment\">     */</span><br><span class=\"hljs-comment\">//    public static String scanner(String tip) &#123;</span><br><span class=\"hljs-comment\">//        Scanner scanner = new Scanner(System.in);</span><br><span class=\"hljs-comment\">//        StringBuilder help = new StringBuilder();</span><br><span class=\"hljs-comment\">//        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);</span><br><span class=\"hljs-comment\">//        System.out.println(help.toString());</span><br><span class=\"hljs-comment\">//        if (scanner.hasNext()) &#123;</span><br><span class=\"hljs-comment\">//            String ipt = scanner.next();</span><br><span class=\"hljs-comment\">//            if (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class=\"hljs-comment\">//                return ipt;</span><br><span class=\"hljs-comment\">//            &#125;</span><br><span class=\"hljs-comment\">//        &#125;</span><br><span class=\"hljs-comment\">//        throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);</span><br><span class=\"hljs-comment\">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>点击运行即可</strong></p>\n","site":{"data":{}},"wordcount":3932,"excerpt":"","more":"<h2 id=\"Mybatis-plus-generator代码自动生成工具，自动生成实体类\"><a href=\"#Mybatis-plus-generator代码自动生成工具，自动生成实体类\" class=\"headerlink\" title=\"Mybatis-plus-generator代码自动生成工具，自动生成实体类\"></a>Mybatis-plus-generator代码自动生成工具，自动生成实体类</h2><p> 使用Mybatis-plus-generator可以自动生成 Controller Service Mapper DAO层的基本代码，免去自己去写实体类映射数据库的繁琐操作。</p>\n<h3 id=\"步骤如下\"><a href=\"#步骤如下\" class=\"headerlink\" title=\"步骤如下\"></a>步骤如下</h3><p><strong>添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.baomidou<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-plus-generator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.4.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.velocity<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>velocity-engine-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>实现代码</strong></p>\n<p>按注释修改自己的配置</p>\n<p>可将下面代码放到test包运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.example.myspringboot;<br><br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br><span class=\"hljs-keyword\">import</span> lombok.extern.slf4j.Slf4j;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBatisPlusGenerator</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//1. 全局配置</span><br>        <span class=\"hljs-type\">GlobalConfig</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GlobalConfig</span>();<br>        <span class=\"hljs-comment\">// 是否支持AR模式</span><br>        config.setActiveRecord(<span class=\"hljs-literal\">true</span>)<br>                <span class=\"hljs-comment\">// 作者</span><br>                .setAuthor(<span class=\"hljs-string\">&quot;Evan&quot;</span>)<br>                <span class=\"hljs-comment\">// 生成路径，最好使用绝对路径</span><br>                <span class=\"hljs-comment\">//TODO  TODO  TODO  TODO</span><br>                .setOutputDir(<span class=\"hljs-string\">&quot;C:\\\\Users\\\\root\\\\Desktop\\\\myspringboot\\\\src\\\\main\\\\java&quot;</span>)<br>                <span class=\"hljs-comment\">// 文件覆盖</span><br>                .setFileOverride(<span class=\"hljs-literal\">true</span>)<br>                <span class=\"hljs-comment\">// 主键策略</span><br>                .setIdType(IdType.AUTO)<br><br>                .setDateType(DateType.ONLY_DATE)<br>                <span class=\"hljs-comment\">// 设置生成的service接口的名字的首字母是否为I，默认Service是以I开头的</span><br>                .setServiceName(<span class=\"hljs-string\">&quot;%Service&quot;</span>)<br><br>                <span class=\"hljs-comment\">//实体类结尾名称</span><br>                .setEntityName(<span class=\"hljs-string\">&quot;&quot;</span>)<br><br>                <span class=\"hljs-comment\">//生成基本的resultMap</span><br>                .setBaseResultMap(<span class=\"hljs-literal\">true</span>)<br><br>                <span class=\"hljs-comment\">//不使用AR模式</span><br>                .setActiveRecord(<span class=\"hljs-literal\">false</span>)<br><br>                <span class=\"hljs-comment\">//生成基本的SQL片段</span><br>                .setBaseColumnList(<span class=\"hljs-literal\">true</span>);<br><br>        <span class=\"hljs-comment\">//2. 数据源配置</span><br>        <span class=\"hljs-type\">DataSourceConfig</span> <span class=\"hljs-variable\">dsConfig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DataSourceConfig</span>();<br>        <span class=\"hljs-comment\">// 设置数据库类型</span><br>        dsConfig.setDbType(DbType.MYSQL)<br>                .setDriverName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)<br>                <span class=\"hljs-comment\">//TODO  TODO  TODO  TODO</span><br>                .setUrl(<span class=\"hljs-string\">&quot;jdbc:mysql://127.0.0.1:3306/practice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC&quot;</span>)<br>                .setUsername(<span class=\"hljs-string\">&quot;root&quot;</span>)<br>                .setPassword(<span class=\"hljs-string\">&quot;123456&quot;</span>);<br><br>        <span class=\"hljs-comment\">//3. 策略配置globalConfiguration中</span><br>        <span class=\"hljs-type\">StrategyConfig</span> <span class=\"hljs-variable\">stConfig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StrategyConfig</span>();<br><br>        <span class=\"hljs-comment\">//全局大写命名</span><br>        stConfig.setCapitalMode(<span class=\"hljs-literal\">true</span>)<br>                <span class=\"hljs-comment\">// 数据库表映射到实体的命名策略</span><br>                .setNaming(NamingStrategy.underline_to_camel)<br><br>                <span class=\"hljs-comment\">//使用lombok</span><br>                .setEntityLombokModel(<span class=\"hljs-literal\">true</span>)<br><br>                <span class=\"hljs-comment\">//使用restcontroller注解</span><br>                .setRestControllerStyle(<span class=\"hljs-literal\">true</span>)<br><br>                <span class=\"hljs-comment\">// 生成的表, 支持多表一起生成，以数组形式填写</span><br>                <span class=\"hljs-comment\">//TODO  TODO  TODO  TODO 两个方式，直接写，或者使用命令行输入</span><br>                .setInclude(<span class=\"hljs-string\">&quot;student&quot;</span>);<br>        <span class=\"hljs-comment\">//.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br><br>        <span class=\"hljs-comment\">//4. 包名策略配置</span><br>        <span class=\"hljs-type\">PackageConfig</span> <span class=\"hljs-variable\">pkConfig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PackageConfig</span>();<br>        pkConfig.setParent(<span class=\"hljs-string\">&quot;com.example.myspringboot&quot;</span>)<br>                .setMapper(<span class=\"hljs-string\">&quot;mapper&quot;</span>)<br>                .setService(<span class=\"hljs-string\">&quot;service&quot;</span>)<br>                .setController(<span class=\"hljs-string\">&quot;controller&quot;</span>)<br>                .setEntity(<span class=\"hljs-string\">&quot;pojo&quot;</span>)<br>                .setXml(<span class=\"hljs-string\">&quot;mapper&quot;</span>);<br><br>        <span class=\"hljs-comment\">//5. 整合配置</span><br>        <span class=\"hljs-type\">AutoGenerator</span> <span class=\"hljs-variable\">ag</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AutoGenerator</span>();<br>        ag.setGlobalConfig(config)<br>                .setDataSource(dsConfig)<br>                .setStrategy(stConfig)<br>                .setPackageInfo(pkConfig);<br><br>        <span class=\"hljs-comment\">//6. 执行操作</span><br>        ag.execute();<br>        System.out.println(<span class=\"hljs-string\">&quot;=======  Done 相关代码生成完毕  ========&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * &lt;p&gt;</span><br><span class=\"hljs-comment\">     * 读取控制台内容</span><br><span class=\"hljs-comment\">     * &lt;/p&gt;</span><br><span class=\"hljs-comment\">     */</span><br><span class=\"hljs-comment\">//    public static String scanner(String tip) &#123;</span><br><span class=\"hljs-comment\">//        Scanner scanner = new Scanner(System.in);</span><br><span class=\"hljs-comment\">//        StringBuilder help = new StringBuilder();</span><br><span class=\"hljs-comment\">//        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);</span><br><span class=\"hljs-comment\">//        System.out.println(help.toString());</span><br><span class=\"hljs-comment\">//        if (scanner.hasNext()) &#123;</span><br><span class=\"hljs-comment\">//            String ipt = scanner.next();</span><br><span class=\"hljs-comment\">//            if (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class=\"hljs-comment\">//                return ipt;</span><br><span class=\"hljs-comment\">//            &#125;</span><br><span class=\"hljs-comment\">//        &#125;</span><br><span class=\"hljs-comment\">//        throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);</span><br><span class=\"hljs-comment\">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>点击运行即可</strong></p>\n"},{"title":"修改springboot内嵌tomcat上传文件大小","date":"2022-09-01T07:25:32.000Z","author":"Evan","_content":"\n##  修改springboot内嵌tomcat上传文件大小\n\n**错误信息:**\n\n```cmd\nThe field file exceeds its maximum permitted size of 1048576 bytes.\n```\n\n**原因是因为SpringBoot内嵌tomcat默认所能上传的文件大小为1M,超出这个就会报错。**\n\n### 解决办法\n\n**1.修改application.yml配置文件**\n\n```xml\nspring:\n  http:\n    multipart:\n      enabled: true\n      max-file-size: 30MB\n      max-request-size: 30MB\n```\n\n**2.编写配置类**\n\n```java\npackage com.example.myspringboot.config;\n\nimport org.springframework.boot.web.servlet.MultipartConfigFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.unit.DataSize;\n\nimport javax.servlet.MultipartConfigElement;\n\n@Configuration\npublic class MulterFile {\n    /**\n     * 文件上传配置\n     * @return\n     */\n    @Bean\n    public MultipartConfigElement multipartConfigElement() {\n        MultipartConfigFactory factory = new MultipartConfigFactory();\n        //文件最大\n        factory.setMaxFileSize(DataSize.parse(\"30960KB\")); //KB,MB\n        /// 设置总上传数据总大小\n        factory.setMaxRequestSize(DataSize.parse(\"309600KB\"));\n        return factory.createMultipartConfig();\n    }\n}\n```\n\n","source":"_posts/修改springboot内嵌tomcat上传文件大小.md","raw":"---\ntitle: 修改springboot内嵌tomcat上传文件大小\ndate: 2022-09-01 15:25:32\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n##  修改springboot内嵌tomcat上传文件大小\n\n**错误信息:**\n\n```cmd\nThe field file exceeds its maximum permitted size of 1048576 bytes.\n```\n\n**原因是因为SpringBoot内嵌tomcat默认所能上传的文件大小为1M,超出这个就会报错。**\n\n### 解决办法\n\n**1.修改application.yml配置文件**\n\n```xml\nspring:\n  http:\n    multipart:\n      enabled: true\n      max-file-size: 30MB\n      max-request-size: 30MB\n```\n\n**2.编写配置类**\n\n```java\npackage com.example.myspringboot.config;\n\nimport org.springframework.boot.web.servlet.MultipartConfigFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.unit.DataSize;\n\nimport javax.servlet.MultipartConfigElement;\n\n@Configuration\npublic class MulterFile {\n    /**\n     * 文件上传配置\n     * @return\n     */\n    @Bean\n    public MultipartConfigElement multipartConfigElement() {\n        MultipartConfigFactory factory = new MultipartConfigFactory();\n        //文件最大\n        factory.setMaxFileSize(DataSize.parse(\"30960KB\")); //KB,MB\n        /// 设置总上传数据总大小\n        factory.setMaxRequestSize(DataSize.parse(\"309600KB\"));\n        return factory.createMultipartConfig();\n    }\n}\n```\n\n","slug":"修改springboot内嵌tomcat上传文件大小","published":1,"updated":"2022-09-01T07:30:03.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7iq95bs0000n0v227boe9v5","content":"<h2 id=\"修改springboot内嵌tomcat上传文件大小\"><a href=\"#修改springboot内嵌tomcat上传文件大小\" class=\"headerlink\" title=\"修改springboot内嵌tomcat上传文件大小\"></a>修改springboot内嵌tomcat上传文件大小</h2><p><strong>错误信息:</strong></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">The field file exceeds its maximum permitted size of <span class=\"hljs-number\">1048576</span> bytes.<br></code></pre></td></tr></table></figure>\n\n<p><strong>原因是因为SpringBoot内嵌tomcat默认所能上传的文件大小为1M,超出这个就会报错。</strong></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p><strong>1.修改application.yml配置文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">spring:<br>  http:<br>    multipart:<br>      enabled: true<br>      max-file-size: 30MB<br>      max-request-size: 30MB<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.编写配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.example.myspringboot.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.MultipartConfigFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.unit.DataSize;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.MultipartConfigElement;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MulterFile</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 文件上传配置</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> MultipartConfigElement <span class=\"hljs-title function_\">multipartConfigElement</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">MultipartConfigFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MultipartConfigFactory</span>();<br>        <span class=\"hljs-comment\">//文件最大</span><br>        factory.setMaxFileSize(DataSize.parse(<span class=\"hljs-string\">&quot;30960KB&quot;</span>)); <span class=\"hljs-comment\">//KB,MB</span><br>        <span class=\"hljs-comment\">/// 设置总上传数据总大小</span><br>        factory.setMaxRequestSize(DataSize.parse(<span class=\"hljs-string\">&quot;309600KB&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> factory.createMultipartConfig();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":974,"excerpt":"","more":"<h2 id=\"修改springboot内嵌tomcat上传文件大小\"><a href=\"#修改springboot内嵌tomcat上传文件大小\" class=\"headerlink\" title=\"修改springboot内嵌tomcat上传文件大小\"></a>修改springboot内嵌tomcat上传文件大小</h2><p><strong>错误信息:</strong></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmd\">The field file exceeds its maximum permitted size of <span class=\"hljs-number\">1048576</span> bytes.<br></code></pre></td></tr></table></figure>\n\n<p><strong>原因是因为SpringBoot内嵌tomcat默认所能上传的文件大小为1M,超出这个就会报错。</strong></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p><strong>1.修改application.yml配置文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">spring:<br>  http:<br>    multipart:<br>      enabled: true<br>      max-file-size: 30MB<br>      max-request-size: 30MB<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.编写配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.example.myspringboot.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.MultipartConfigFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.unit.DataSize;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.MultipartConfigElement;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MulterFile</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 文件上传配置</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> MultipartConfigElement <span class=\"hljs-title function_\">multipartConfigElement</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">MultipartConfigFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MultipartConfigFactory</span>();<br>        <span class=\"hljs-comment\">//文件最大</span><br>        factory.setMaxFileSize(DataSize.parse(<span class=\"hljs-string\">&quot;30960KB&quot;</span>)); <span class=\"hljs-comment\">//KB,MB</span><br>        <span class=\"hljs-comment\">/// 设置总上传数据总大小</span><br>        factory.setMaxRequestSize(DataSize.parse(<span class=\"hljs-string\">&quot;309600KB&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> factory.createMultipartConfig();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"mybatis动态字段传值问题","date":"2022-09-01T09:35:10.000Z","author":"Evan","_content":"\n## mybatis动态字段传值问题\n\n开发时有这样一个需求，sql语句的字段根据传值查询\n\n一般都会这样写\n\n```sql\n select * from  Student where #{fieldname} like \"%\"#{keywords}\"%\"\n```\n\n但这条sql语句查出来的结果为0；\n\n原因在于#{}为了防止sql注入都会给传入的参数加一个双引号，也就是上面的sql语句实际是这样的：\n\n```sql\nfieldname:\"name\",keywords=\"杨\"\nselect * from  Student where \"fieldname\"  like \"%杨%\"\n```\n\n数据库找不到字段 \"fieldname\" ，所以查询结果为0；\n\n所以这种情况下就可以用到${},${}将传入的参数直接显示生成在sql中，不会添加引号。\n\n```sql\nfieldname:\"name\",keywords=\"杨\"\nselect * from  Student where ${fieldname} like \"%\"#{keywords}\"%\" \n生成为\nselect * from  Student where name like \"%杨%\"\n```\n\n所以#{}可以防止sql注入，在我们确定传入的值是安全的情况下，例如传的变量字段，那么就可以使用${}。\n","source":"_posts/mybatis动态字段传值问题.md","raw":"---\ntitle: mybatis动态字段传值问题\ndate: 2022-09-01 17:35:10\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## mybatis动态字段传值问题\n\n开发时有这样一个需求，sql语句的字段根据传值查询\n\n一般都会这样写\n\n```sql\n select * from  Student where #{fieldname} like \"%\"#{keywords}\"%\"\n```\n\n但这条sql语句查出来的结果为0；\n\n原因在于#{}为了防止sql注入都会给传入的参数加一个双引号，也就是上面的sql语句实际是这样的：\n\n```sql\nfieldname:\"name\",keywords=\"杨\"\nselect * from  Student where \"fieldname\"  like \"%杨%\"\n```\n\n数据库找不到字段 \"fieldname\" ，所以查询结果为0；\n\n所以这种情况下就可以用到${},${}将传入的参数直接显示生成在sql中，不会添加引号。\n\n```sql\nfieldname:\"name\",keywords=\"杨\"\nselect * from  Student where ${fieldname} like \"%\"#{keywords}\"%\" \n生成为\nselect * from  Student where name like \"%杨%\"\n```\n\n所以#{}可以防止sql注入，在我们确定传入的值是安全的情况下，例如传的变量字段，那么就可以使用${}。\n","slug":"mybatis动态字段传值问题","published":1,"updated":"2022-09-01T09:57:42.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ivj7sp0000d8v2d4nrffsm","content":"<h2 id=\"mybatis动态字段传值问题\"><a href=\"#mybatis动态字段传值问题\" class=\"headerlink\" title=\"mybatis动态字段传值问题\"></a>mybatis动态字段传值问题</h2><p>开发时有这样一个需求，sql语句的字段根据传值查询</p>\n<p>一般都会这样写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> #&#123;fieldname&#125; <span class=\"hljs-keyword\">like</span> &quot;%&quot;#&#123;keywords&#125;&quot;%&quot;<br></code></pre></td></tr></table></figure>\n\n<p>但这条sql语句查出来的结果为0；</p>\n<p>原因在于#{}为了防止sql注入都会给传入的参数加一个双引号，也就是上面的sql语句实际是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">fieldname:&quot;name&quot;,keywords<span class=\"hljs-operator\">=</span>&quot;杨&quot;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> &quot;fieldname&quot;  <span class=\"hljs-keyword\">like</span> &quot;%杨%&quot;<br></code></pre></td></tr></table></figure>\n\n<p>数据库找不到字段 “fieldname” ，所以查询结果为0；</p>\n<p>所以这种情况下就可以用到${},${}将传入的参数直接显示生成在sql中，不会添加引号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">fieldname:&quot;name&quot;,keywords<span class=\"hljs-operator\">=</span>&quot;杨&quot;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> $&#123;fieldname&#125; <span class=\"hljs-keyword\">like</span> &quot;%&quot;#&#123;keywords&#125;&quot;%&quot; <br>生成为<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-keyword\">like</span> &quot;%杨%&quot;<br></code></pre></td></tr></table></figure>\n\n<p>所以#{}可以防止sql注入，在我们确定传入的值是安全的情况下，例如传的变量字段，那么就可以使用${}。</p>\n","site":{"data":{}},"wordcount":647,"excerpt":"","more":"<h2 id=\"mybatis动态字段传值问题\"><a href=\"#mybatis动态字段传值问题\" class=\"headerlink\" title=\"mybatis动态字段传值问题\"></a>mybatis动态字段传值问题</h2><p>开发时有这样一个需求，sql语句的字段根据传值查询</p>\n<p>一般都会这样写</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> #&#123;fieldname&#125; <span class=\"hljs-keyword\">like</span> &quot;%&quot;#&#123;keywords&#125;&quot;%&quot;<br></code></pre></td></tr></table></figure>\n\n<p>但这条sql语句查出来的结果为0；</p>\n<p>原因在于#{}为了防止sql注入都会给传入的参数加一个双引号，也就是上面的sql语句实际是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">fieldname:&quot;name&quot;,keywords<span class=\"hljs-operator\">=</span>&quot;杨&quot;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> &quot;fieldname&quot;  <span class=\"hljs-keyword\">like</span> &quot;%杨%&quot;<br></code></pre></td></tr></table></figure>\n\n<p>数据库找不到字段 “fieldname” ，所以查询结果为0；</p>\n<p>所以这种情况下就可以用到${},${}将传入的参数直接显示生成在sql中，不会添加引号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">fieldname:&quot;name&quot;,keywords<span class=\"hljs-operator\">=</span>&quot;杨&quot;<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> $&#123;fieldname&#125; <span class=\"hljs-keyword\">like</span> &quot;%&quot;#&#123;keywords&#125;&quot;%&quot; <br>生成为<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span>  Student <span class=\"hljs-keyword\">where</span> name <span class=\"hljs-keyword\">like</span> &quot;%杨%&quot;<br></code></pre></td></tr></table></figure>\n\n<p>所以#{}可以防止sql注入，在我们确定传入的值是安全的情况下，例如传的变量字段，那么就可以使用${}。</p>\n"},{"title":"axios传递数组参数问题","date":"2022-09-02T08:19:38.000Z","author":"Evan","_content":"\n## axios传递数组参数问题\n\n最近开发时，写批量删除功能时，发现我前端传的值，后端一直获取不了。查了半天才发现原因所在。\n\n后来发现axios传不了数组参数，如果使用序列化库qs的话，那后端无法通过数组参数获取前端的值。\n\n```js\nthis.$qs.stringify({'ids':[1,2,3,4]}))\n这样写的话产生的形式为:ids=1&ids=2&id=3&id=4\n而我后端获取的是一个数组参数，显然不符合的。\n```\n\n所以想要在不改动后端参数形式的情况下，在前端应该这样修改：\n\n```js\nthis.$qs.stringify({'ids':[1,2,3,4]+''}))\n拼接一个空的字符串，使整个value变成一个字符串，那么产生的形式就成为：\nids=\"[1,2,3,4]\"\n```\n\n那么我后端就可以通过(Integer[] ids)来获取前端的值。\n","source":"_posts/axios传递数组参数问题.md","raw":"---\ntitle: axios传递数组参数问题\ndate: 2022-09-02 16:19:38\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## axios传递数组参数问题\n\n最近开发时，写批量删除功能时，发现我前端传的值，后端一直获取不了。查了半天才发现原因所在。\n\n后来发现axios传不了数组参数，如果使用序列化库qs的话，那后端无法通过数组参数获取前端的值。\n\n```js\nthis.$qs.stringify({'ids':[1,2,3,4]}))\n这样写的话产生的形式为:ids=1&ids=2&id=3&id=4\n而我后端获取的是一个数组参数，显然不符合的。\n```\n\n所以想要在不改动后端参数形式的情况下，在前端应该这样修改：\n\n```js\nthis.$qs.stringify({'ids':[1,2,3,4]+''}))\n拼接一个空的字符串，使整个value变成一个字符串，那么产生的形式就成为：\nids=\"[1,2,3,4]\"\n```\n\n那么我后端就可以通过(Integer[] ids)来获取前端的值。\n","slug":"axios传递数组参数问题","published":1,"updated":"2022-09-02T08:38:46.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7k85fqp00003gv2btxqfi75","content":"<h2 id=\"axios传递数组参数问题\"><a href=\"#axios传递数组参数问题\" class=\"headerlink\" title=\"axios传递数组参数问题\"></a>axios传递数组参数问题</h2><p>最近开发时，写批量删除功能时，发现我前端传的值，后端一直获取不了。查了半天才发现原因所在。</p>\n<p>后来发现axios传不了数组参数，如果使用序列化库qs的话，那后端无法通过数组参数获取前端的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-string\">&#x27;ids&#x27;</span>:[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]&#125;))<br>这样写的话产生的形式为:ids=<span class=\"hljs-number\">1</span>&amp;ids=<span class=\"hljs-number\">2</span>&amp;id=<span class=\"hljs-number\">3</span>&amp;id=<span class=\"hljs-number\">4</span><br>而我后端获取的是一个数组参数，显然不符合的。<br></code></pre></td></tr></table></figure>\n\n<p>所以想要在不改动后端参数形式的情况下，在前端应该这样修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-string\">&#x27;ids&#x27;</span>:[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]+<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;))<br>拼接一个空的字符串，使整个value变成一个字符串，那么产生的形式就成为：<br>ids=<span class=\"hljs-string\">&quot;[1,2,3,4]&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>那么我后端就可以通过(Integer[] ids)来获取前端的值。</p>\n","site":{"data":{}},"wordcount":431,"excerpt":"","more":"<h2 id=\"axios传递数组参数问题\"><a href=\"#axios传递数组参数问题\" class=\"headerlink\" title=\"axios传递数组参数问题\"></a>axios传递数组参数问题</h2><p>最近开发时，写批量删除功能时，发现我前端传的值，后端一直获取不了。查了半天才发现原因所在。</p>\n<p>后来发现axios传不了数组参数，如果使用序列化库qs的话，那后端无法通过数组参数获取前端的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-string\">&#x27;ids&#x27;</span>:[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]&#125;))<br>这样写的话产生的形式为:ids=<span class=\"hljs-number\">1</span>&amp;ids=<span class=\"hljs-number\">2</span>&amp;id=<span class=\"hljs-number\">3</span>&amp;id=<span class=\"hljs-number\">4</span><br>而我后端获取的是一个数组参数，显然不符合的。<br></code></pre></td></tr></table></figure>\n\n<p>所以想要在不改动后端参数形式的情况下，在前端应该这样修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$qs</span>.<span class=\"hljs-title function_\">stringify</span>(&#123;<span class=\"hljs-string\">&#x27;ids&#x27;</span>:[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]+<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;))<br>拼接一个空的字符串，使整个value变成一个字符串，那么产生的形式就成为：<br>ids=<span class=\"hljs-string\">&quot;[1,2,3,4]&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>那么我后端就可以通过(Integer[] ids)来获取前端的值。</p>\n"},{"title":"vue+springboot前后端分离结合easyexcel实现excel导入导出功能","date":"2022-09-05T06:59:48.000Z","_content":"\n## 使用easyexcel实现excel导入导出功能\n\n基于springboot，前端使用vue，使用阿里的easyexcel实现了单sheet表导入导出，多sheet表导入导出，单数据库表导入导出，多数据库表导入导出。\n\n**首先需要搭建好spingboot和前端开发项目环境**\n\n然后就可以开始开发excel导入导出功能\n\n**首先需要引入easyexcel的maven依赖**\n\n```xml\n<!--在pom.xml文件添加以下依赖  -->\n <!--阿里easyexcel 用于进行Excel处理 -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>easyexcel</artifactId>\n            <version>2.2.10</version>\n        </dependency>\n```\n\n**根据自己需要的excel表作为对象，建立一个实体类**\n\n有几个注解是重点\n\n```java\n//按照数据库表定义好实体类，为其加上注解 @ExcelProperty(value = \"xxx\", index = 0) ，其中value值对应的是excel表的表头，index的值为数字，代表该列在excel表里面的位置，数字越小列越靠前\n// @ExcelIgnore 使用这个注解可以在生成excel时不显示该字段\n// @ColumnWidth(20) 自定义列宽\npublic class User {\n    // 主键id\n    @ExcelIgnore // 生成报表时忽略，不生成次字段\n    private Integer id;\n    @ExcelProperty(value = \"姓名\", index = 0) // 定义表头名称和位置,0代表第一列\n    private String name;\n    @ExcelProperty(value = \"性别\", index = 1)\n    private String sex;\n    @ExcelProperty(value = \"年龄\", index = 2)\n    private Integer age;\n    //@ColumnWidth(20) // 定义列宽,使用自适应列宽则注释，不使用则可靠此注解自定义\n    @DateTimeFormat(value = \"yyyy-MM-dd\")\n    @ExcelProperty(value = \"出生日期\", index = 3)\n    private String birthday;\n}\n```\n\n## 结合前后端\n\n#### 导出\n\n```js\n //vue的执行函数\nexportWeb: function () {\n              // 使用axios进行GET请求\n                   this.$axios.get('/exportExcel', {\n                           responseType: 'blob', // 设置响应类型为blob\n                         })\n                           .then(response => {\n                             // 创建一个Blob对象，并下载文件\n                             const blob = new Blob([response.data], { type: response.headers['content-type'] });\n                             const link = document.createElement('a');\n                             link.href = window.URL.createObjectURL(blob);\n                             link.download = '导出'; // 设置下载的文件名\n                             link.click();\n                           })\n                           .catch(error => {\n                             // 处理请求错误\n                             console.error('文件下载失败:', error);\n                           });\n           },\n```\n\n```java\n  @RequestMapping(\"/api/exportExcel\")\n    public void export(HttpServletResponse response) throws IOException {\n\n        response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n//        response.setCharacterEncoding(\"utf-8\");\n//       String fileName = URLEncoder.encode(\"导出文件名\", \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n//      response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n\n        //查询数据\n        List<Student> student = studentService.queryStudent();\n        EasyExcel.write(response.getOutputStream(), Student.class).sheet(\"导出文件名\").doWrite(student);\n    }\n```\n\n#### 导入\n\n```html\n //导出页面\n <template>\n\n    <el-upload\n            class=\"upload-demo\"\n            ref=\"upload\"\n            action=\"http://localhost:8082/api/upload\"\n            :on-preview=\"handlePreview\"\n            :on-remove=\"handleRemove\"\n            :on-success=\"handleSuccess\"\n            :file-list=\"fileList\"\n            :multiple=\"false\"\n            :limit=\"1\"\n            :auto-upload=\"false\">\n        <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选取文件</el-button>\n        <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"submitUpload($event)\">上传到服务器</el-button>\n        <div slot=\"tip\" class=\"el-upload__tip\">只能上传execl文件，且不超过500kb</div>\n    </el-upload>\n\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                limitNum: 1,  // 上传excel时，同时允许上传的最大数\n                fileList: [],   // excel文件列表\n            }\n        },\n        methods:{\n            // 成功上传到服务器后返回的内容\n            handleSuccess(e) {\n                console.log('上传成功', e)\n                this.$message(e.message);\n            },\n            // 上传文件到服务器\n            submitUpload(e) {\n\n                console.log('我要上传了', e)\n                this.$refs.upload.submit();\n            },\n\n            // 删除文件\n            handleRemove(file, fileList) {\n                console.log(file, fileList);\n            },\n            handlePreview(file) {\n                console.log(file);\n            },\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n```\n\n```java\n// 导出接口\n// easyexcel上传文件\n    @PostMapping(\"/api/upload\")\n    @ResponseBody\n    public String upload(MultipartFile file) throws IOException {\n\n        EasyExcel.read(file.getInputStream(), Student.class, new StudentDataListener(studentService)).sheet().doRead();\n        return \"上传成功\";\n    }\n```\n\n##### 可以用配置类配置文件上传的大小\n\n```java\n@Configuration\npublic class MulterFile {\n    /**\n     * 文件上传配置\n     * @return\n     */\n    @Bean\n    public MultipartConfigElement multipartConfigElement() {\n        MultipartConfigFactory factory = new MultipartConfigFactory();\n        //文件最大\n        factory.setMaxFileSize(DataSize.parse(\"30960KB\")); //KB,MB\n        /// 设置总上传数据总大小\n        factory.setMaxRequestSize(DataSize.parse(\"309600KB\"));\n        return factory.createMultipartConfig();\n    }\n}\n```\n\n","source":"_posts/vue-springboot前后端分离结合easyexcel实现excel导入导出功能.md","raw":"---\ntitle: vue+springboot前后端分离结合easyexcel实现excel导入导出功能\ndate: 2022-09-05 14:59:48\ntags:\n---\n\n## 使用easyexcel实现excel导入导出功能\n\n基于springboot，前端使用vue，使用阿里的easyexcel实现了单sheet表导入导出，多sheet表导入导出，单数据库表导入导出，多数据库表导入导出。\n\n**首先需要搭建好spingboot和前端开发项目环境**\n\n然后就可以开始开发excel导入导出功能\n\n**首先需要引入easyexcel的maven依赖**\n\n```xml\n<!--在pom.xml文件添加以下依赖  -->\n <!--阿里easyexcel 用于进行Excel处理 -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>easyexcel</artifactId>\n            <version>2.2.10</version>\n        </dependency>\n```\n\n**根据自己需要的excel表作为对象，建立一个实体类**\n\n有几个注解是重点\n\n```java\n//按照数据库表定义好实体类，为其加上注解 @ExcelProperty(value = \"xxx\", index = 0) ，其中value值对应的是excel表的表头，index的值为数字，代表该列在excel表里面的位置，数字越小列越靠前\n// @ExcelIgnore 使用这个注解可以在生成excel时不显示该字段\n// @ColumnWidth(20) 自定义列宽\npublic class User {\n    // 主键id\n    @ExcelIgnore // 生成报表时忽略，不生成次字段\n    private Integer id;\n    @ExcelProperty(value = \"姓名\", index = 0) // 定义表头名称和位置,0代表第一列\n    private String name;\n    @ExcelProperty(value = \"性别\", index = 1)\n    private String sex;\n    @ExcelProperty(value = \"年龄\", index = 2)\n    private Integer age;\n    //@ColumnWidth(20) // 定义列宽,使用自适应列宽则注释，不使用则可靠此注解自定义\n    @DateTimeFormat(value = \"yyyy-MM-dd\")\n    @ExcelProperty(value = \"出生日期\", index = 3)\n    private String birthday;\n}\n```\n\n## 结合前后端\n\n#### 导出\n\n```js\n //vue的执行函数\nexportWeb: function () {\n              // 使用axios进行GET请求\n                   this.$axios.get('/exportExcel', {\n                           responseType: 'blob', // 设置响应类型为blob\n                         })\n                           .then(response => {\n                             // 创建一个Blob对象，并下载文件\n                             const blob = new Blob([response.data], { type: response.headers['content-type'] });\n                             const link = document.createElement('a');\n                             link.href = window.URL.createObjectURL(blob);\n                             link.download = '导出'; // 设置下载的文件名\n                             link.click();\n                           })\n                           .catch(error => {\n                             // 处理请求错误\n                             console.error('文件下载失败:', error);\n                           });\n           },\n```\n\n```java\n  @RequestMapping(\"/api/exportExcel\")\n    public void export(HttpServletResponse response) throws IOException {\n\n        response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n//        response.setCharacterEncoding(\"utf-8\");\n//       String fileName = URLEncoder.encode(\"导出文件名\", \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n//      response.setHeader(\"Content-disposition\", \"attachment;filename*=utf-8''\" + fileName + \".xlsx\");\n\n        //查询数据\n        List<Student> student = studentService.queryStudent();\n        EasyExcel.write(response.getOutputStream(), Student.class).sheet(\"导出文件名\").doWrite(student);\n    }\n```\n\n#### 导入\n\n```html\n //导出页面\n <template>\n\n    <el-upload\n            class=\"upload-demo\"\n            ref=\"upload\"\n            action=\"http://localhost:8082/api/upload\"\n            :on-preview=\"handlePreview\"\n            :on-remove=\"handleRemove\"\n            :on-success=\"handleSuccess\"\n            :file-list=\"fileList\"\n            :multiple=\"false\"\n            :limit=\"1\"\n            :auto-upload=\"false\">\n        <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选取文件</el-button>\n        <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"submitUpload($event)\">上传到服务器</el-button>\n        <div slot=\"tip\" class=\"el-upload__tip\">只能上传execl文件，且不超过500kb</div>\n    </el-upload>\n\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                limitNum: 1,  // 上传excel时，同时允许上传的最大数\n                fileList: [],   // excel文件列表\n            }\n        },\n        methods:{\n            // 成功上传到服务器后返回的内容\n            handleSuccess(e) {\n                console.log('上传成功', e)\n                this.$message(e.message);\n            },\n            // 上传文件到服务器\n            submitUpload(e) {\n\n                console.log('我要上传了', e)\n                this.$refs.upload.submit();\n            },\n\n            // 删除文件\n            handleRemove(file, fileList) {\n                console.log(file, fileList);\n            },\n            handlePreview(file) {\n                console.log(file);\n            },\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n```\n\n```java\n// 导出接口\n// easyexcel上传文件\n    @PostMapping(\"/api/upload\")\n    @ResponseBody\n    public String upload(MultipartFile file) throws IOException {\n\n        EasyExcel.read(file.getInputStream(), Student.class, new StudentDataListener(studentService)).sheet().doRead();\n        return \"上传成功\";\n    }\n```\n\n##### 可以用配置类配置文件上传的大小\n\n```java\n@Configuration\npublic class MulterFile {\n    /**\n     * 文件上传配置\n     * @return\n     */\n    @Bean\n    public MultipartConfigElement multipartConfigElement() {\n        MultipartConfigFactory factory = new MultipartConfigFactory();\n        //文件最大\n        factory.setMaxFileSize(DataSize.parse(\"30960KB\")); //KB,MB\n        /// 设置总上传数据总大小\n        factory.setMaxRequestSize(DataSize.parse(\"309600KB\"));\n        return factory.createMultipartConfig();\n    }\n}\n```\n\n","slug":"vue-springboot前后端分离结合easyexcel实现excel导入导出功能","published":1,"updated":"2023-11-14T07:33:31.243Z","_id":"cl7pz756n00004sv23dmd83vh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"使用easyexcel实现excel导入导出功能\"><a href=\"#使用easyexcel实现excel导入导出功能\" class=\"headerlink\" title=\"使用easyexcel实现excel导入导出功能\"></a>使用easyexcel实现excel导入导出功能</h2><p>基于springboot，前端使用vue，使用阿里的easyexcel实现了单sheet表导入导出，多sheet表导入导出，单数据库表导入导出，多数据库表导入导出。</p>\n<p><strong>首先需要搭建好spingboot和前端开发项目环境</strong></p>\n<p>然后就可以开始开发excel导入导出功能</p>\n<p><strong>首先需要引入easyexcel的maven依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--在pom.xml文件添加以下依赖  --&gt;</span><br> <span class=\"hljs-comment\">&lt;!--阿里easyexcel 用于进行Excel处理 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>easyexcel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>根据自己需要的excel表作为对象，建立一个实体类</strong></p>\n<p>有几个注解是重点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//按照数据库表定义好实体类，为其加上注解 @ExcelProperty(value = &quot;xxx&quot;, index = 0) ，其中value值对应的是excel表的表头，index的值为数字，代表该列在excel表里面的位置，数字越小列越靠前</span><br><span class=\"hljs-comment\">// @ExcelIgnore 使用这个注解可以在生成excel时不显示该字段</span><br><span class=\"hljs-comment\">// @ColumnWidth(20) 自定义列宽</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-comment\">// 主键id</span><br>    <span class=\"hljs-meta\">@ExcelIgnore</span> <span class=\"hljs-comment\">// 生成报表时忽略，不生成次字段</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;姓名&quot;, index = 0)</span> <span class=\"hljs-comment\">// 定义表头名称和位置,0代表第一列</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;性别&quot;, index = 1)</span><br>    <span class=\"hljs-keyword\">private</span> String sex;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;年龄&quot;, index = 2)</span><br>    <span class=\"hljs-keyword\">private</span> Integer age;<br>    <span class=\"hljs-comment\">//@ColumnWidth(20) // 定义列宽,使用自适应列宽则注释，不使用则可靠此注解自定义</span><br>    <span class=\"hljs-meta\">@DateTimeFormat(value = &quot;yyyy-MM-dd&quot;)</span><br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;出生日期&quot;, index = 3)</span><br>    <span class=\"hljs-keyword\">private</span> String birthday;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结合前后端\"><a href=\"#结合前后端\" class=\"headerlink\" title=\"结合前后端\"></a>结合前后端</h2><h4 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-comment\">//vue的执行函数</span><br><span class=\"hljs-attr\">exportWeb</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>              <span class=\"hljs-comment\">// 使用axios进行GET请求</span><br>                   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$axios</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/exportExcel&#x27;</span>, &#123;<br>                           <span class=\"hljs-attr\">responseType</span>: <span class=\"hljs-string\">&#x27;blob&#x27;</span>, <span class=\"hljs-comment\">// 设置响应类型为blob</span><br>                         &#125;)<br>                           .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> &#123;<br>                             <span class=\"hljs-comment\">// 创建一个Blob对象，并下载文件</span><br>                             <span class=\"hljs-keyword\">const</span> blob = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Blob</span>([response.<span class=\"hljs-property\">data</span>], &#123; <span class=\"hljs-attr\">type</span>: response.<span class=\"hljs-property\">headers</span>[<span class=\"hljs-string\">&#x27;content-type&#x27;</span>] &#125;);<br>                             <span class=\"hljs-keyword\">const</span> link = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>);<br>                             link.<span class=\"hljs-property\">href</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">URL</span>.<span class=\"hljs-title function_\">createObjectURL</span>(blob);<br>                             link.<span class=\"hljs-property\">download</span> = <span class=\"hljs-string\">&#x27;导出&#x27;</span>; <span class=\"hljs-comment\">// 设置下载的文件名</span><br>                             link.<span class=\"hljs-title function_\">click</span>();<br>                           &#125;)<br>                           .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>                             <span class=\"hljs-comment\">// 处理请求错误</span><br>                             <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;文件下载失败:&#x27;</span>, error);<br>                           &#125;);<br>           &#125;,<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">  <span class=\"hljs-meta\">@RequestMapping(&quot;/api/exportExcel&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">export</span><span class=\"hljs-params\">(HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br><br>        response.setContentType(<span class=\"hljs-string\">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);<br><span class=\"hljs-comment\">//        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class=\"hljs-comment\">//       String fileName = URLEncoder.encode(&quot;导出文件名&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);</span><br><span class=\"hljs-comment\">//      response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#x27;&#x27;&quot; + fileName + &quot;.xlsx&quot;);</span><br><br>        <span class=\"hljs-comment\">//查询数据</span><br>        List&lt;Student&gt; student = studentService.queryStudent();<br>        EasyExcel.write(response.getOutputStream(), Student.class).sheet(<span class=\"hljs-string\">&quot;导出文件名&quot;</span>).doWrite(student);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"> //导出页面<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-upload</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;upload-demo&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;upload&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;http://localhost:8082/api/upload&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:on-preview</span>=<span class=\"hljs-string\">&quot;handlePreview&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:on-remove</span>=<span class=\"hljs-string\">&quot;handleRemove&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:on-success</span>=<span class=\"hljs-string\">&quot;handleSuccess&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:file-list</span>=<span class=\"hljs-string\">&quot;fileList&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:multiple</span>=<span class=\"hljs-string\">&quot;false&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:limit</span>=<span class=\"hljs-string\">&quot;1&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:auto-upload</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;trigger&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;primary&quot;</span>&gt;</span>选取文件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-left: 10px;&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;success&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;submitUpload($event)&quot;</span>&gt;</span>上传到服务器<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;tip&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;el-upload__tip&quot;</span>&gt;</span>只能上传execl文件，且不超过500kb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-upload</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">limitNum</span>: <span class=\"hljs-number\">1</span>,  <span class=\"hljs-comment\">// 上传excel时，同时允许上传的最大数</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">fileList</span>: [],   <span class=\"hljs-comment\">// excel文件列表</span></span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 成功上传到服务器后返回的内容</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">handleSuccess</span>(<span class=\"hljs-params\">e</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;上传成功&#x27;</span>, e)</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.$message(e.<span class=\"hljs-property\">message</span>);</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 上传文件到服务器</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">submitUpload</span>(<span class=\"hljs-params\">e</span>) &#123;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我要上传了&#x27;</span>, e)</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$refs</span>.<span class=\"hljs-property\">upload</span>.<span class=\"hljs-title function_\">submit</span>();</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 删除文件</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">handleRemove</span>(<span class=\"hljs-params\">file, fileList</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(file, fileList);</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">handlePreview</span>(<span class=\"hljs-params\">file</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(file);</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 导出接口</span><br><span class=\"hljs-comment\">// easyexcel上传文件</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/api/upload&quot;)</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">upload</span><span class=\"hljs-params\">(MultipartFile file)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br><br>        EasyExcel.read(file.getInputStream(), Student.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StudentDataListener</span>(studentService)).sheet().doRead();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;上传成功&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"可以用配置类配置文件上传的大小\"><a href=\"#可以用配置类配置文件上传的大小\" class=\"headerlink\" title=\"可以用配置类配置文件上传的大小\"></a>可以用配置类配置文件上传的大小</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MulterFile</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 文件上传配置</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> MultipartConfigElement <span class=\"hljs-title function_\">multipartConfigElement</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">MultipartConfigFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MultipartConfigFactory</span>();<br>        <span class=\"hljs-comment\">//文件最大</span><br>        factory.setMaxFileSize(DataSize.parse(<span class=\"hljs-string\">&quot;30960KB&quot;</span>)); <span class=\"hljs-comment\">//KB,MB</span><br>        <span class=\"hljs-comment\">/// 设置总上传数据总大小</span><br>        factory.setMaxRequestSize(DataSize.parse(<span class=\"hljs-string\">&quot;309600KB&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> factory.createMultipartConfig();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":4434,"excerpt":"","more":"<h2 id=\"使用easyexcel实现excel导入导出功能\"><a href=\"#使用easyexcel实现excel导入导出功能\" class=\"headerlink\" title=\"使用easyexcel实现excel导入导出功能\"></a>使用easyexcel实现excel导入导出功能</h2><p>基于springboot，前端使用vue，使用阿里的easyexcel实现了单sheet表导入导出，多sheet表导入导出，单数据库表导入导出，多数据库表导入导出。</p>\n<p><strong>首先需要搭建好spingboot和前端开发项目环境</strong></p>\n<p>然后就可以开始开发excel导入导出功能</p>\n<p><strong>首先需要引入easyexcel的maven依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--在pom.xml文件添加以下依赖  --&gt;</span><br> <span class=\"hljs-comment\">&lt;!--阿里easyexcel 用于进行Excel处理 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>easyexcel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>根据自己需要的excel表作为对象，建立一个实体类</strong></p>\n<p>有几个注解是重点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//按照数据库表定义好实体类，为其加上注解 @ExcelProperty(value = &quot;xxx&quot;, index = 0) ，其中value值对应的是excel表的表头，index的值为数字，代表该列在excel表里面的位置，数字越小列越靠前</span><br><span class=\"hljs-comment\">// @ExcelIgnore 使用这个注解可以在生成excel时不显示该字段</span><br><span class=\"hljs-comment\">// @ColumnWidth(20) 自定义列宽</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-comment\">// 主键id</span><br>    <span class=\"hljs-meta\">@ExcelIgnore</span> <span class=\"hljs-comment\">// 生成报表时忽略，不生成次字段</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;姓名&quot;, index = 0)</span> <span class=\"hljs-comment\">// 定义表头名称和位置,0代表第一列</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;性别&quot;, index = 1)</span><br>    <span class=\"hljs-keyword\">private</span> String sex;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;年龄&quot;, index = 2)</span><br>    <span class=\"hljs-keyword\">private</span> Integer age;<br>    <span class=\"hljs-comment\">//@ColumnWidth(20) // 定义列宽,使用自适应列宽则注释，不使用则可靠此注解自定义</span><br>    <span class=\"hljs-meta\">@DateTimeFormat(value = &quot;yyyy-MM-dd&quot;)</span><br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;出生日期&quot;, index = 3)</span><br>    <span class=\"hljs-keyword\">private</span> String birthday;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结合前后端\"><a href=\"#结合前后端\" class=\"headerlink\" title=\"结合前后端\"></a>结合前后端</h2><h4 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-comment\">//vue的执行函数</span><br><span class=\"hljs-attr\">exportWeb</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>              <span class=\"hljs-comment\">// 使用axios进行GET请求</span><br>                   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$axios</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/exportExcel&#x27;</span>, &#123;<br>                           <span class=\"hljs-attr\">responseType</span>: <span class=\"hljs-string\">&#x27;blob&#x27;</span>, <span class=\"hljs-comment\">// 设置响应类型为blob</span><br>                         &#125;)<br>                           .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> &#123;<br>                             <span class=\"hljs-comment\">// 创建一个Blob对象，并下载文件</span><br>                             <span class=\"hljs-keyword\">const</span> blob = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Blob</span>([response.<span class=\"hljs-property\">data</span>], &#123; <span class=\"hljs-attr\">type</span>: response.<span class=\"hljs-property\">headers</span>[<span class=\"hljs-string\">&#x27;content-type&#x27;</span>] &#125;);<br>                             <span class=\"hljs-keyword\">const</span> link = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>);<br>                             link.<span class=\"hljs-property\">href</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">URL</span>.<span class=\"hljs-title function_\">createObjectURL</span>(blob);<br>                             link.<span class=\"hljs-property\">download</span> = <span class=\"hljs-string\">&#x27;导出&#x27;</span>; <span class=\"hljs-comment\">// 设置下载的文件名</span><br>                             link.<span class=\"hljs-title function_\">click</span>();<br>                           &#125;)<br>                           .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>                             <span class=\"hljs-comment\">// 处理请求错误</span><br>                             <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&#x27;文件下载失败:&#x27;</span>, error);<br>                           &#125;);<br>           &#125;,<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">  <span class=\"hljs-meta\">@RequestMapping(&quot;/api/exportExcel&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">export</span><span class=\"hljs-params\">(HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br><br>        response.setContentType(<span class=\"hljs-string\">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);<br><span class=\"hljs-comment\">//        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class=\"hljs-comment\">//       String fileName = URLEncoder.encode(&quot;导出文件名&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;);</span><br><span class=\"hljs-comment\">//      response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#x27;&#x27;&quot; + fileName + &quot;.xlsx&quot;);</span><br><br>        <span class=\"hljs-comment\">//查询数据</span><br>        List&lt;Student&gt; student = studentService.queryStudent();<br>        EasyExcel.write(response.getOutputStream(), Student.class).sheet(<span class=\"hljs-string\">&quot;导出文件名&quot;</span>).doWrite(student);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"> //导出页面<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-upload</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;upload-demo&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;upload&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;http://localhost:8082/api/upload&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:on-preview</span>=<span class=\"hljs-string\">&quot;handlePreview&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:on-remove</span>=<span class=\"hljs-string\">&quot;handleRemove&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:on-success</span>=<span class=\"hljs-string\">&quot;handleSuccess&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:file-list</span>=<span class=\"hljs-string\">&quot;fileList&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:multiple</span>=<span class=\"hljs-string\">&quot;false&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:limit</span>=<span class=\"hljs-string\">&quot;1&quot;</span></span><br><span class=\"hljs-tag\">            <span class=\"hljs-attr\">:auto-upload</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;trigger&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;primary&quot;</span>&gt;</span>选取文件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-left: 10px;&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;success&quot;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;submitUpload($event)&quot;</span>&gt;</span>上传到服务器<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;tip&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;el-upload__tip&quot;</span>&gt;</span>只能上传execl文件，且不超过500kb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-upload</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">limitNum</span>: <span class=\"hljs-number\">1</span>,  <span class=\"hljs-comment\">// 上传excel时，同时允许上传的最大数</span></span><br><span class=\"language-javascript\">                <span class=\"hljs-attr\">fileList</span>: [],   <span class=\"hljs-comment\">// excel文件列表</span></span><br><span class=\"language-javascript\">            &#125;</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 成功上传到服务器后返回的内容</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">handleSuccess</span>(<span class=\"hljs-params\">e</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;上传成功&#x27;</span>, e)</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.$message(e.<span class=\"hljs-property\">message</span>);</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 上传文件到服务器</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">submitUpload</span>(<span class=\"hljs-params\">e</span>) &#123;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我要上传了&#x27;</span>, e)</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$refs</span>.<span class=\"hljs-property\">upload</span>.<span class=\"hljs-title function_\">submit</span>();</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 删除文件</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">handleRemove</span>(<span class=\"hljs-params\">file, fileList</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(file, fileList);</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">handlePreview</span>(<span class=\"hljs-params\">file</span>) &#123;</span><br><span class=\"language-javascript\">                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(file);</span><br><span class=\"language-javascript\">            &#125;,</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 导出接口</span><br><span class=\"hljs-comment\">// easyexcel上传文件</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/api/upload&quot;)</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">upload</span><span class=\"hljs-params\">(MultipartFile file)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br><br>        EasyExcel.read(file.getInputStream(), Student.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StudentDataListener</span>(studentService)).sheet().doRead();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;上传成功&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"可以用配置类配置文件上传的大小\"><a href=\"#可以用配置类配置文件上传的大小\" class=\"headerlink\" title=\"可以用配置类配置文件上传的大小\"></a>可以用配置类配置文件上传的大小</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MulterFile</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 文件上传配置</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> MultipartConfigElement <span class=\"hljs-title function_\">multipartConfigElement</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">MultipartConfigFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MultipartConfigFactory</span>();<br>        <span class=\"hljs-comment\">//文件最大</span><br>        factory.setMaxFileSize(DataSize.parse(<span class=\"hljs-string\">&quot;30960KB&quot;</span>)); <span class=\"hljs-comment\">//KB,MB</span><br>        <span class=\"hljs-comment\">/// 设置总上传数据总大小</span><br>        factory.setMaxRequestSize(DataSize.parse(<span class=\"hljs-string\">&quot;309600KB&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> factory.createMultipartConfig();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"JSON对象数组转Java对象数组","date":"2022-09-06T06:38:08.000Z","author":"Evan","_content":"\n## JSON对象数组转Java对象数组\n\n**引入阿里的fastjson**\n\n```xml\n <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>fastjson</artifactId>\n        <version>1.2.60</version>\n    </dependency>\n```\n\n**创建对应JSON数据的实体类**\n\n可以用JSON工具一键生成实体类代码\n\n```java\npublic class JsonRootBean {\n\n    private String Name;\n    private String SEX;\n    private String age;\n    public void setName(String Name) {\n         this.Name = Name;\n     }\n     public String getName() {\n         return Name;\n     }\n\n    public void setSEX(String SEX) {\n         this.SEX = SEX;\n     }\n     public String getSEX() {\n         return SEX;\n     }\n\n    public void setAge(String age) {\n         this.age = age;\n     }\n     public String getAge() {\n         return age;\n     }\n@Override\n    public String toString() {\n        return \"JsonRootBean{\" +\n                \"SampleName='\" + SampleName + '\\'' +\n                \", Marker='\" + Marker + '\\'' +\n                \", Peak1='\" + Peak1 + '\\'' +\n                \", Peak2='\" + Peak2 + '\\'' +\n                '}';\n    }\n}\n```\n\n**编写生成方法**\n\n记得修改相关类名\n\n```java\n  private static ArrayList<JsonRootBean> getPlatformList(String arrStr) {\n        ArrayList<JsonRootBean> jsonContents = new ArrayList<JsonRootBean>();\n        JSONArray jsonContentList = JSON.parseArray(arrStr);\n        for (Object jsonObject : jsonContentList) {\n            JsonRootBean jsonContent = JSONObject.parseObject(jsonObject.toString(), JsonRootBean.class);\n            jsonContents.add(jsonContent);\n        }\n        return jsonContents;\n    }\n```\n\n**调用方法**\n\n```Java\n  public static void main(String[] arg) {\n  String jsonStr = \"[{\n        \"Name\": \"YYW\",\n        \"SEX\": \"男\",\n        \"age\": \"17\"\n},\n    {\n        \"Name\": \"JAVA\",\n        \"SEX\": \"男\",\n        \"age\": \"22\"\n}\n]\"\n//调用getPlatformList方法\n  ArrayList<JsonRootBean> platformList = getPlatformList(jsonStr);\n//检验结果\n   for (JsonRootBean JsonRootBean: platformList){\n            System.out.println(JsonRootBean);\n        }\n  }\n```\n\n**完成**\n\n","source":"_posts/JSON对象数组转Java对象数组.md","raw":"---\ntitle: JSON对象数组转Java对象数组\ndate: 2022-09-06 14:38:08\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## JSON对象数组转Java对象数组\n\n**引入阿里的fastjson**\n\n```xml\n <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>fastjson</artifactId>\n        <version>1.2.60</version>\n    </dependency>\n```\n\n**创建对应JSON数据的实体类**\n\n可以用JSON工具一键生成实体类代码\n\n```java\npublic class JsonRootBean {\n\n    private String Name;\n    private String SEX;\n    private String age;\n    public void setName(String Name) {\n         this.Name = Name;\n     }\n     public String getName() {\n         return Name;\n     }\n\n    public void setSEX(String SEX) {\n         this.SEX = SEX;\n     }\n     public String getSEX() {\n         return SEX;\n     }\n\n    public void setAge(String age) {\n         this.age = age;\n     }\n     public String getAge() {\n         return age;\n     }\n@Override\n    public String toString() {\n        return \"JsonRootBean{\" +\n                \"SampleName='\" + SampleName + '\\'' +\n                \", Marker='\" + Marker + '\\'' +\n                \", Peak1='\" + Peak1 + '\\'' +\n                \", Peak2='\" + Peak2 + '\\'' +\n                '}';\n    }\n}\n```\n\n**编写生成方法**\n\n记得修改相关类名\n\n```java\n  private static ArrayList<JsonRootBean> getPlatformList(String arrStr) {\n        ArrayList<JsonRootBean> jsonContents = new ArrayList<JsonRootBean>();\n        JSONArray jsonContentList = JSON.parseArray(arrStr);\n        for (Object jsonObject : jsonContentList) {\n            JsonRootBean jsonContent = JSONObject.parseObject(jsonObject.toString(), JsonRootBean.class);\n            jsonContents.add(jsonContent);\n        }\n        return jsonContents;\n    }\n```\n\n**调用方法**\n\n```Java\n  public static void main(String[] arg) {\n  String jsonStr = \"[{\n        \"Name\": \"YYW\",\n        \"SEX\": \"男\",\n        \"age\": \"17\"\n},\n    {\n        \"Name\": \"JAVA\",\n        \"SEX\": \"男\",\n        \"age\": \"22\"\n}\n]\"\n//调用getPlatformList方法\n  ArrayList<JsonRootBean> platformList = getPlatformList(jsonStr);\n//检验结果\n   for (JsonRootBean JsonRootBean: platformList){\n            System.out.println(JsonRootBean);\n        }\n  }\n```\n\n**完成**\n\n","slug":"JSON对象数组转Java对象数组","published":1,"updated":"2022-09-06T09:14:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7pz756q00014sv22sxw67b7","content":"<h2 id=\"JSON对象数组转Java对象数组\"><a href=\"#JSON对象数组转Java对象数组\" class=\"headerlink\" title=\"JSON对象数组转Java对象数组\"></a>JSON对象数组转Java对象数组</h2><p><strong>引入阿里的fastjson</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.60<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>创建对应JSON数据的实体类</strong></p>\n<p>可以用JSON工具一键生成实体类代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JsonRootBean</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> String Name;<br>    <span class=\"hljs-keyword\">private</span> String SEX;<br>    <span class=\"hljs-keyword\">private</span> String age;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String Name)</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.Name = Name;<br>     &#125;<br>     <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>         <span class=\"hljs-keyword\">return</span> Name;<br>     &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setSEX</span><span class=\"hljs-params\">(String SEX)</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.SEX = SEX;<br>     &#125;<br>     <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getSEX</span><span class=\"hljs-params\">()</span> &#123;<br>         <span class=\"hljs-keyword\">return</span> SEX;<br>     &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(String age)</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.age = age;<br>     &#125;<br>     <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>         <span class=\"hljs-keyword\">return</span> age;<br>     &#125;<br><span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;JsonRootBean&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;SampleName=&#x27;&quot;</span> + SampleName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, Marker=&#x27;&quot;</span> + Marker + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, Peak1=&#x27;&quot;</span> + Peak1 + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, Peak2=&#x27;&quot;</span> + Peak2 + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写生成方法</strong></p>\n<p>记得修改相关类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;JsonRootBean&gt; <span class=\"hljs-title function_\">getPlatformList</span><span class=\"hljs-params\">(String arrStr)</span> &#123;<br>      ArrayList&lt;JsonRootBean&gt; jsonContents = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;JsonRootBean&gt;();<br>      <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonContentList</span> <span class=\"hljs-operator\">=</span> JSON.parseArray(arrStr);<br>      <span class=\"hljs-keyword\">for</span> (Object jsonObject : jsonContentList) &#123;<br>          <span class=\"hljs-type\">JsonRootBean</span> <span class=\"hljs-variable\">jsonContent</span> <span class=\"hljs-operator\">=</span> JSONObject.parseObject(jsonObject.toString(), JsonRootBean.class);<br>          jsonContents.add(jsonContent);<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> jsonContents;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>调用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\">  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] arg)</span> &#123;<br>  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;[&#123;</span><br><span class=\"hljs-string\">        &quot;</span>Name<span class=\"hljs-string\">&quot;: &quot;</span>YYW<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>SEX<span class=\"hljs-string\">&quot;: &quot;</span>男<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>age<span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-number\">17</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">&#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">        &quot;</span>Name<span class=\"hljs-string\">&quot;: &quot;</span>JAVA<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>SEX<span class=\"hljs-string\">&quot;: &quot;</span>男<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>age<span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-number\">22</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">]&quot;</span><br><span class=\"hljs-comment\">//调用getPlatformList方法</span><br>  ArrayList&lt;JsonRootBean&gt; platformList = getPlatformList(jsonStr);<br><span class=\"hljs-comment\">//检验结果</span><br>   <span class=\"hljs-keyword\">for</span> (JsonRootBean JsonRootBean: platformList)&#123;<br>            System.out.println(JsonRootBean);<br>        &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>完成</strong></p>\n","site":{"data":{}},"wordcount":1902,"excerpt":"","more":"<h2 id=\"JSON对象数组转Java对象数组\"><a href=\"#JSON对象数组转Java对象数组\" class=\"headerlink\" title=\"JSON对象数组转Java对象数组\"></a>JSON对象数组转Java对象数组</h2><p><strong>引入阿里的fastjson</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.60<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>创建对应JSON数据的实体类</strong></p>\n<p>可以用JSON工具一键生成实体类代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JsonRootBean</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> String Name;<br>    <span class=\"hljs-keyword\">private</span> String SEX;<br>    <span class=\"hljs-keyword\">private</span> String age;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String Name)</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.Name = Name;<br>     &#125;<br>     <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>         <span class=\"hljs-keyword\">return</span> Name;<br>     &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setSEX</span><span class=\"hljs-params\">(String SEX)</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.SEX = SEX;<br>     &#125;<br>     <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getSEX</span><span class=\"hljs-params\">()</span> &#123;<br>         <span class=\"hljs-keyword\">return</span> SEX;<br>     &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(String age)</span> &#123;<br>         <span class=\"hljs-built_in\">this</span>.age = age;<br>     &#125;<br>     <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>         <span class=\"hljs-keyword\">return</span> age;<br>     &#125;<br><span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;JsonRootBean&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;SampleName=&#x27;&quot;</span> + SampleName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, Marker=&#x27;&quot;</span> + Marker + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, Peak1=&#x27;&quot;</span> + Peak1 + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, Peak2=&#x27;&quot;</span> + Peak2 + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写生成方法</strong></p>\n<p>记得修改相关类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;JsonRootBean&gt; <span class=\"hljs-title function_\">getPlatformList</span><span class=\"hljs-params\">(String arrStr)</span> &#123;<br>      ArrayList&lt;JsonRootBean&gt; jsonContents = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;JsonRootBean&gt;();<br>      <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonContentList</span> <span class=\"hljs-operator\">=</span> JSON.parseArray(arrStr);<br>      <span class=\"hljs-keyword\">for</span> (Object jsonObject : jsonContentList) &#123;<br>          <span class=\"hljs-type\">JsonRootBean</span> <span class=\"hljs-variable\">jsonContent</span> <span class=\"hljs-operator\">=</span> JSONObject.parseObject(jsonObject.toString(), JsonRootBean.class);<br>          jsonContents.add(jsonContent);<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> jsonContents;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>调用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\">  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] arg)</span> &#123;<br>  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;[&#123;</span><br><span class=\"hljs-string\">        &quot;</span>Name<span class=\"hljs-string\">&quot;: &quot;</span>YYW<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>SEX<span class=\"hljs-string\">&quot;: &quot;</span>男<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>age<span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-number\">17</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">&#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">        &quot;</span>Name<span class=\"hljs-string\">&quot;: &quot;</span>JAVA<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>SEX<span class=\"hljs-string\">&quot;: &quot;</span>男<span class=\"hljs-string\">&quot;,</span><br><span class=\"hljs-string\">        &quot;</span>age<span class=\"hljs-string\">&quot;: &quot;</span><span class=\"hljs-number\">22</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">]&quot;</span><br><span class=\"hljs-comment\">//调用getPlatformList方法</span><br>  ArrayList&lt;JsonRootBean&gt; platformList = getPlatformList(jsonStr);<br><span class=\"hljs-comment\">//检验结果</span><br>   <span class=\"hljs-keyword\">for</span> (JsonRootBean JsonRootBean: platformList)&#123;<br>            System.out.println(JsonRootBean);<br>        &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>完成</strong></p>\n"},{"title":"调用榛子云短信api服务","date":"2022-10-28T06:21:41.000Z","author":"Evan","_content":"\n## Springboot调用榛子云短信api服务\n\n[榛子云官方文档](http://smsow.zhenzikj.com/doc/ready.html)\n\n#### 步骤\n\n**1.添加依赖**\n\n```xml\n<!-- 榛子云api -->\n        <dependency>\n            <groupId>com.zhenzikj</groupId>\n            <artifactId>zhenzisms</artifactId>\n            <version>2.0.2</version>\n        </dependency>\n```\n\n**2.编写控制类**\n\n```\n@Controller\npublic class Message {\n    //短信平台相关参数\n    //榛子云链接\n    private String apiUrl = \"https://sms_developer.zhenzikj.com\";\n    //榛子云系统上获取 填入自己账号的id和密钥\n    private String appId = \"\";\n    private String appSecret = \"\";\n    @ResponseBody\n    @GetMapping(\"/fitness/code\")\n    public boolean getCode(@RequestParam(\"memPhone\") String memPhone, HttpSession httpSession){\n        try {\n            JSONObject json = null;\n            //随机生成验证码\n            String code = String.valueOf(new Random().nextInt(999999));\n            //将验证码通过榛子云接口发送至手机\n            ZhenziSmsClient client = new ZhenziSmsClient(apiUrl, appId, appSecret);\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(\"number\", \"填自己的手机号码\");\n            params.put(\"templateId\", \"短信的模板id\");\n            String[] templateParams = new String[2];\n            templateParams[0] = code;\n            templateParams[1] = \"5分钟\";//设置有效时间\n            params.put(\"templateParams\", templateParams);\n            String result = client.send(params);\n            System.out.println(result);\n            json = JSONObject.parseObject(result);\n            System.out.println(result);\n            //将验证码存到session中,同时存入创建时间\n            //以json存放，这里使用的是阿里的fastjson\n            json = new JSONObject();\n            json.put(\"memPhone\",memPhone);\n            json.put(\"code\",code);\n            json.put(\"createTime\",System.currentTimeMillis());\n            // 将认证码存入SESSION\n            redisTemplate.expire(\"verifyCode\"+memPhone,1, TimeUnit.MINUTES);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n}\n```\n\n\n\n\n\n","source":"_posts/调用榛子云短信api服务.md","raw":"---\ntitle: 调用榛子云短信api服务\ndate: 2022-10-28 14:21:41\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## Springboot调用榛子云短信api服务\n\n[榛子云官方文档](http://smsow.zhenzikj.com/doc/ready.html)\n\n#### 步骤\n\n**1.添加依赖**\n\n```xml\n<!-- 榛子云api -->\n        <dependency>\n            <groupId>com.zhenzikj</groupId>\n            <artifactId>zhenzisms</artifactId>\n            <version>2.0.2</version>\n        </dependency>\n```\n\n**2.编写控制类**\n\n```\n@Controller\npublic class Message {\n    //短信平台相关参数\n    //榛子云链接\n    private String apiUrl = \"https://sms_developer.zhenzikj.com\";\n    //榛子云系统上获取 填入自己账号的id和密钥\n    private String appId = \"\";\n    private String appSecret = \"\";\n    @ResponseBody\n    @GetMapping(\"/fitness/code\")\n    public boolean getCode(@RequestParam(\"memPhone\") String memPhone, HttpSession httpSession){\n        try {\n            JSONObject json = null;\n            //随机生成验证码\n            String code = String.valueOf(new Random().nextInt(999999));\n            //将验证码通过榛子云接口发送至手机\n            ZhenziSmsClient client = new ZhenziSmsClient(apiUrl, appId, appSecret);\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(\"number\", \"填自己的手机号码\");\n            params.put(\"templateId\", \"短信的模板id\");\n            String[] templateParams = new String[2];\n            templateParams[0] = code;\n            templateParams[1] = \"5分钟\";//设置有效时间\n            params.put(\"templateParams\", templateParams);\n            String result = client.send(params);\n            System.out.println(result);\n            json = JSONObject.parseObject(result);\n            System.out.println(result);\n            //将验证码存到session中,同时存入创建时间\n            //以json存放，这里使用的是阿里的fastjson\n            json = new JSONObject();\n            json.put(\"memPhone\",memPhone);\n            json.put(\"code\",code);\n            json.put(\"createTime\",System.currentTimeMillis());\n            // 将认证码存入SESSION\n            redisTemplate.expire(\"verifyCode\"+memPhone,1, TimeUnit.MINUTES);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n}\n```\n\n\n\n\n\n","slug":"调用榛子云短信api服务","published":1,"updated":"2022-12-09T09:26:35.977Z","_id":"clb6bv8xm0000ksv2fiqke01y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Springboot调用榛子云短信api服务\"><a href=\"#Springboot调用榛子云短信api服务\" class=\"headerlink\" title=\"Springboot调用榛子云短信api服务\"></a>Springboot调用榛子云短信api服务</h2><p><a href=\"http://smsow.zhenzikj.com/doc/ready.html\">榛子云官方文档</a></p>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><p><strong>1.添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 榛子云api --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.zhenzikj<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>zhenzisms<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>2.编写控制类</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Message</span> &#123;<br>    <span class=\"hljs-comment\">//短信平台相关参数</span><br>    <span class=\"hljs-comment\">//榛子云链接</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> apiUrl = <span class=\"hljs-string\">&quot;https://sms_developer.zhenzikj.com&quot;</span>;<br>    <span class=\"hljs-comment\">//榛子云系统上获取 填入自己账号的id和密钥</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> appId = <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> appSecret = <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">&quot;/fitness/code&quot;</span>)<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">getCode</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@RequestParam</span>(<span class=\"hljs-string\">&quot;memPhone&quot;</span>) <span class=\"hljs-built_in\">String</span> memPhone, HttpSession httpSession</span>)&#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-title class_\">JSON</span><span class=\"hljs-built_in\">Object</span> json = <span class=\"hljs-literal\">null</span>;<br>            <span class=\"hljs-comment\">//随机生成验证码</span><br>            <span class=\"hljs-title class_\">String</span> code = <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">valueOf</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().<span class=\"hljs-title function_\">nextInt</span>(<span class=\"hljs-number\">999999</span>));<br>            <span class=\"hljs-comment\">//将验证码通过榛子云接口发送至手机</span><br>            <span class=\"hljs-title class_\">ZhenziSmsClient</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ZhenziSmsClient</span>(apiUrl, appId, appSecret);<br>            <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Object</span>&gt; params = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Object</span>&gt;();<br>            params.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;填自己的手机号码&quot;</span>);<br>            params.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;templateId&quot;</span>, <span class=\"hljs-string\">&quot;短信的模板id&quot;</span>);<br>            <span class=\"hljs-title class_\">String</span>[] templateParams = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">2</span>];<br>            templateParams[<span class=\"hljs-number\">0</span>] = code;<br>            templateParams[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&quot;5分钟&quot;</span>;<span class=\"hljs-comment\">//设置有效时间</span><br>            params.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;templateParams&quot;</span>, templateParams);<br>            <span class=\"hljs-title class_\">String</span> result = client.<span class=\"hljs-title function_\">send</span>(params);<br>            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(result);<br>            json = <span class=\"hljs-title class_\">JSON</span><span class=\"hljs-built_in\">Object</span>.<span class=\"hljs-title function_\">parseObject</span>(result);<br>            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(result);<br>            <span class=\"hljs-comment\">//将验证码存到session中,同时存入创建时间</span><br>            <span class=\"hljs-comment\">//以json存放，这里使用的是阿里的fastjson</span><br>            json = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JSON</span><span class=\"hljs-built_in\">Object</span>();<br>            json.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;memPhone&quot;</span>,memPhone);<br>            json.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;code&quot;</span>,code);<br>            json.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;createTime&quot;</span>,<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-title function_\">currentTimeMillis</span>());<br>            <span class=\"hljs-comment\">// 将认证码存入SESSION</span><br>            redisTemplate.<span class=\"hljs-title function_\">expire</span>(<span class=\"hljs-string\">&quot;verifyCode&quot;</span>+memPhone,<span class=\"hljs-number\">1</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">MINUTES</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-title class_\">Exception</span> e) &#123;<br>            e.<span class=\"hljs-title function_\">printStackTrace</span>();<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"wordcount":1677,"excerpt":"","more":"<h2 id=\"Springboot调用榛子云短信api服务\"><a href=\"#Springboot调用榛子云短信api服务\" class=\"headerlink\" title=\"Springboot调用榛子云短信api服务\"></a>Springboot调用榛子云短信api服务</h2><p><a href=\"http://smsow.zhenzikj.com/doc/ready.html\">榛子云官方文档</a></p>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><p><strong>1.添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 榛子云api --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.zhenzikj<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>zhenzisms<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>2.编写控制类</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Message</span> &#123;<br>    <span class=\"hljs-comment\">//短信平台相关参数</span><br>    <span class=\"hljs-comment\">//榛子云链接</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> apiUrl = <span class=\"hljs-string\">&quot;https://sms_developer.zhenzikj.com&quot;</span>;<br>    <span class=\"hljs-comment\">//榛子云系统上获取 填入自己账号的id和密钥</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> appId = <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">String</span> appSecret = <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    <span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">&quot;/fitness/code&quot;</span>)<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">getCode</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@RequestParam</span>(<span class=\"hljs-string\">&quot;memPhone&quot;</span>) <span class=\"hljs-built_in\">String</span> memPhone, HttpSession httpSession</span>)&#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-title class_\">JSON</span><span class=\"hljs-built_in\">Object</span> json = <span class=\"hljs-literal\">null</span>;<br>            <span class=\"hljs-comment\">//随机生成验证码</span><br>            <span class=\"hljs-title class_\">String</span> code = <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">valueOf</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().<span class=\"hljs-title function_\">nextInt</span>(<span class=\"hljs-number\">999999</span>));<br>            <span class=\"hljs-comment\">//将验证码通过榛子云接口发送至手机</span><br>            <span class=\"hljs-title class_\">ZhenziSmsClient</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ZhenziSmsClient</span>(apiUrl, appId, appSecret);<br>            <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Object</span>&gt; params = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Object</span>&gt;();<br>            params.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;number&quot;</span>, <span class=\"hljs-string\">&quot;填自己的手机号码&quot;</span>);<br>            params.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;templateId&quot;</span>, <span class=\"hljs-string\">&quot;短信的模板id&quot;</span>);<br>            <span class=\"hljs-title class_\">String</span>[] templateParams = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">2</span>];<br>            templateParams[<span class=\"hljs-number\">0</span>] = code;<br>            templateParams[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&quot;5分钟&quot;</span>;<span class=\"hljs-comment\">//设置有效时间</span><br>            params.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;templateParams&quot;</span>, templateParams);<br>            <span class=\"hljs-title class_\">String</span> result = client.<span class=\"hljs-title function_\">send</span>(params);<br>            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(result);<br>            json = <span class=\"hljs-title class_\">JSON</span><span class=\"hljs-built_in\">Object</span>.<span class=\"hljs-title function_\">parseObject</span>(result);<br>            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(result);<br>            <span class=\"hljs-comment\">//将验证码存到session中,同时存入创建时间</span><br>            <span class=\"hljs-comment\">//以json存放，这里使用的是阿里的fastjson</span><br>            json = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JSON</span><span class=\"hljs-built_in\">Object</span>();<br>            json.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;memPhone&quot;</span>,memPhone);<br>            json.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;code&quot;</span>,code);<br>            json.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">&quot;createTime&quot;</span>,<span class=\"hljs-title class_\">System</span>.<span class=\"hljs-title function_\">currentTimeMillis</span>());<br>            <span class=\"hljs-comment\">// 将认证码存入SESSION</span><br>            redisTemplate.<span class=\"hljs-title function_\">expire</span>(<span class=\"hljs-string\">&quot;verifyCode&quot;</span>+memPhone,<span class=\"hljs-number\">1</span>, <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">MINUTES</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-title class_\">Exception</span> e) &#123;<br>            e.<span class=\"hljs-title function_\">printStackTrace</span>();<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"JsBarcode循环生成多个条形码","date":"2022-12-09T03:44:43.000Z","author":"Evan","_content":"\n## JsBarcode.js生成条形码\n\n#### 1.引入jsbarcode\n\n[JsBarcode官方文档](https://lindell.me/JsBarcode/)\n\n```\n//npm下载\nnpm install jsbarcode --save\n```\n\n#### 2.html\n\n```html\n<canvas id=\"canvas\"></canvas>\n<img id=\"barcodeimg\"/>\n<svg id=\"barcodesvg\"></svg>\n```\n\n#### 3.JS调用JsBarcode方法\n\n```js\nJsBarcode(\"#canvas\", \"Hi world!\");\nJsBarcode(\"#barcodeimg\", \"what s up!\");\nJsBarcode(\"#barcodesvg\", \"grr bowwww\");\n```\n\n#### 使用vue遍历生成条形码\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>  \n    <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js\"></script>\n    <script src=\"/js/JsBarcode.all.min.js\"></script>\n</head>\n  <style>-\n    #app{\n    display:flex;\n    flex-wrap:wrap;\n    justify-content:space-between;\n    align-items:center;\n    }\n    img{  \n    width: auto;  \n    height: auto;  \n    max-width: 100%;  \n    max-height: 100%;     \n\t}  \n    .imgbox{\n    height:80px;\n    width:300px;\n    }\n  </style>\n<body>\n   <div id=\"app\">\n   \t<div class=\"imgbox\" v-for='(item,index) in jsBarcodeList ' :key='index' >\n      <img :id=\"'jsbarcodeImg' + index\"/>\n   \t</div>\n  </div>\n</body>\n</html>\n<script>\n\n//循环生成条形码\nconst jsBarcodeList =['abc21312','qwe558','ttt999'];\nfunction generateJSBarcodeImg(){\n\tjsBarcodeList.forEach((v,index)=>{\n\t\t// 根据动态id，动态赋值，动态生成条形码\n      JsBarcode('#jsbarcodeImg' + index, v[0], {\n        format: 'CODE39',\n   \t\ttext:v,\n        width: 2,\n        height: 50,\n  \t\tfontSize:30,\n\t\tfontOptions: \"bold\"\n      })\n\t})\n}\n\n var vm = new Vue({\n\tel:\"#app\",\n\tdata:{},\n\tmounted() {\n\t\t\tsetTimeout(() => {\n\t\t    \tgenerateJSBarcodeImg()\n\t\t  \t}, 500)\n\t\t\n\t},\n\t\n})\n\n</script>\n```\n\n","source":"_posts/JsBarcode循环生成多个条形码.md","raw":"---\ntitle: JsBarcode循环生成多个条形码\ndate: 2022-12-09 11:44:43\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n## JsBarcode.js生成条形码\n\n#### 1.引入jsbarcode\n\n[JsBarcode官方文档](https://lindell.me/JsBarcode/)\n\n```\n//npm下载\nnpm install jsbarcode --save\n```\n\n#### 2.html\n\n```html\n<canvas id=\"canvas\"></canvas>\n<img id=\"barcodeimg\"/>\n<svg id=\"barcodesvg\"></svg>\n```\n\n#### 3.JS调用JsBarcode方法\n\n```js\nJsBarcode(\"#canvas\", \"Hi world!\");\nJsBarcode(\"#barcodeimg\", \"what s up!\");\nJsBarcode(\"#barcodesvg\", \"grr bowwww\");\n```\n\n#### 使用vue遍历生成条形码\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>  \n    <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js\"></script>\n    <script src=\"/js/JsBarcode.all.min.js\"></script>\n</head>\n  <style>-\n    #app{\n    display:flex;\n    flex-wrap:wrap;\n    justify-content:space-between;\n    align-items:center;\n    }\n    img{  \n    width: auto;  \n    height: auto;  \n    max-width: 100%;  \n    max-height: 100%;     \n\t}  \n    .imgbox{\n    height:80px;\n    width:300px;\n    }\n  </style>\n<body>\n   <div id=\"app\">\n   \t<div class=\"imgbox\" v-for='(item,index) in jsBarcodeList ' :key='index' >\n      <img :id=\"'jsbarcodeImg' + index\"/>\n   \t</div>\n  </div>\n</body>\n</html>\n<script>\n\n//循环生成条形码\nconst jsBarcodeList =['abc21312','qwe558','ttt999'];\nfunction generateJSBarcodeImg(){\n\tjsBarcodeList.forEach((v,index)=>{\n\t\t// 根据动态id，动态赋值，动态生成条形码\n      JsBarcode('#jsbarcodeImg' + index, v[0], {\n        format: 'CODE39',\n   \t\ttext:v,\n        width: 2,\n        height: 50,\n  \t\tfontSize:30,\n\t\tfontOptions: \"bold\"\n      })\n\t})\n}\n\n var vm = new Vue({\n\tel:\"#app\",\n\tdata:{},\n\tmounted() {\n\t\t\tsetTimeout(() => {\n\t\t    \tgenerateJSBarcodeImg()\n\t\t  \t}, 500)\n\t\t\n\t},\n\t\n})\n\n</script>\n```\n\n","slug":"JsBarcode循环生成多个条形码","published":1,"updated":"2022-12-09T09:26:52.094Z","_id":"clbgaxtf40000o0v2763x38hn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JsBarcode-js生成条形码\"><a href=\"#JsBarcode-js生成条形码\" class=\"headerlink\" title=\"JsBarcode.js生成条形码\"></a>JsBarcode.js生成条形码</h2><h4 id=\"1-引入jsbarcode\"><a href=\"#1-引入jsbarcode\" class=\"headerlink\" title=\"1.引入jsbarcode\"></a>1.引入jsbarcode</h4><p><a href=\"https://lindell.me/JsBarcode/\">JsBarcode官方文档</a></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>npm下载<br>npm install jsbarcode --save<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-html\"><a href=\"#2-html\" class=\"headerlink\" title=\"2.html\"></a>2.html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;barcodeimg&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;barcodesvg&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-JS调用JsBarcode方法\"><a href=\"#3-JS调用JsBarcode方法\" class=\"headerlink\" title=\"3.JS调用JsBarcode方法\"></a>3.JS调用JsBarcode方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&quot;#canvas&quot;</span>, <span class=\"hljs-string\">&quot;Hi world!&quot;</span>);<br><span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&quot;#barcodeimg&quot;</span>, <span class=\"hljs-string\">&quot;what s up!&quot;</span>);<br><span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&quot;#barcodesvg&quot;</span>, <span class=\"hljs-string\">&quot;grr bowwww&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用vue遍历生成条形码\"><a href=\"#使用vue遍历生成条形码\" class=\"headerlink\" title=\"使用vue遍历生成条形码\"></a>使用vue遍历生成条形码</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>  <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://code.jquery.com/jquery-2.1.3.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/js/JsBarcode.all.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\">-</span><br><span class=\"language-css\">    <span class=\"hljs-selector-id\">#app</span>&#123;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">display</span>:flex;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">flex-wrap</span>:wrap;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">justify-content</span>:space-between;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">align-items</span>:center;</span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    <span class=\"hljs-selector-tag\">img</span>&#123;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">width</span>: auto;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">height</span>: auto;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">100%</span>;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">max-height</span>: <span class=\"hljs-number\">100%</span>;     </span><br><span class=\"language-css\">\t&#125;  </span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.imgbox</span>&#123;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">80px</span>;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;</span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;imgbox&quot;</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;(item,index) in jsBarcodeList &#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;index&#x27;</span> &gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:id</span>=<span class=\"hljs-string\">&quot;&#x27;jsbarcodeImg&#x27; + index&quot;</span>/&gt;</span><br>   \t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//循环生成条形码</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> jsBarcodeList =[<span class=\"hljs-string\">&#x27;abc21312&#x27;</span>,<span class=\"hljs-string\">&#x27;qwe558&#x27;</span>,<span class=\"hljs-string\">&#x27;ttt999&#x27;</span>];</span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateJSBarcodeImg</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">\tjsBarcodeList.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,index</span>)=&gt;</span>&#123;</span><br><span class=\"language-javascript\">\t\t<span class=\"hljs-comment\">// 根据动态id，动态赋值，动态生成条形码</span></span><br><span class=\"language-javascript\">      <span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&#x27;#jsbarcodeImg&#x27;</span> + index, v[<span class=\"hljs-number\">0</span>], &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">&#x27;CODE39&#x27;</span>,</span><br><span class=\"language-javascript\">   \t\t<span class=\"hljs-attr\">text</span>:v,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">50</span>,</span><br><span class=\"language-javascript\">  \t\t<span class=\"hljs-attr\">fontSize</span>:<span class=\"hljs-number\">30</span>,</span><br><span class=\"language-javascript\">\t\t<span class=\"hljs-attr\">fontOptions</span>: <span class=\"hljs-string\">&quot;bold&quot;</span></span><br><span class=\"language-javascript\">      &#125;)</span><br><span class=\"language-javascript\">\t&#125;)</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"> <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">\t<span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">\t<span class=\"hljs-attr\">data</span>:&#123;&#125;,</span><br><span class=\"language-javascript\">\t<span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">\t\t\t<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"language-javascript\">\t\t    \t<span class=\"hljs-title function_\">generateJSBarcodeImg</span>()</span><br><span class=\"language-javascript\">\t\t  \t&#125;, <span class=\"hljs-number\">500</span>)</span><br><span class=\"language-javascript\">\t\t</span><br><span class=\"language-javascript\">\t&#125;,</span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">&#125;)</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1964,"excerpt":"","more":"<h2 id=\"JsBarcode-js生成条形码\"><a href=\"#JsBarcode-js生成条形码\" class=\"headerlink\" title=\"JsBarcode.js生成条形码\"></a>JsBarcode.js生成条形码</h2><h4 id=\"1-引入jsbarcode\"><a href=\"#1-引入jsbarcode\" class=\"headerlink\" title=\"1.引入jsbarcode\"></a>1.引入jsbarcode</h4><p><a href=\"https://lindell.me/JsBarcode/\">JsBarcode官方文档</a></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>npm下载<br>npm install jsbarcode --save<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-html\"><a href=\"#2-html\" class=\"headerlink\" title=\"2.html\"></a>2.html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;canvas&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;barcodeimg&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;barcodesvg&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-JS调用JsBarcode方法\"><a href=\"#3-JS调用JsBarcode方法\" class=\"headerlink\" title=\"3.JS调用JsBarcode方法\"></a>3.JS调用JsBarcode方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&quot;#canvas&quot;</span>, <span class=\"hljs-string\">&quot;Hi world!&quot;</span>);<br><span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&quot;#barcodeimg&quot;</span>, <span class=\"hljs-string\">&quot;what s up!&quot;</span>);<br><span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&quot;#barcodesvg&quot;</span>, <span class=\"hljs-string\">&quot;grr bowwww&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用vue遍历生成条形码\"><a href=\"#使用vue遍历生成条形码\" class=\"headerlink\" title=\"使用vue遍历生成条形码\"></a>使用vue遍历生成条形码</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>  <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://code.jquery.com/jquery-2.1.3.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/js/JsBarcode.all.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\">-</span><br><span class=\"language-css\">    <span class=\"hljs-selector-id\">#app</span>&#123;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">display</span>:flex;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">flex-wrap</span>:wrap;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">justify-content</span>:space-between;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">align-items</span>:center;</span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">    <span class=\"hljs-selector-tag\">img</span>&#123;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">width</span>: auto;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">height</span>: auto;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">100%</span>;  </span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">max-height</span>: <span class=\"hljs-number\">100%</span>;     </span><br><span class=\"language-css\">\t&#125;  </span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.imgbox</span>&#123;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">80px</span>;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;</span><br><span class=\"language-css\">    &#125;</span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;imgbox&quot;</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;(item,index) in jsBarcodeList &#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;index&#x27;</span> &gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:id</span>=<span class=\"hljs-string\">&quot;&#x27;jsbarcodeImg&#x27; + index&quot;</span>/&gt;</span><br>   \t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-comment\">//循环生成条形码</span></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> jsBarcodeList =[<span class=\"hljs-string\">&#x27;abc21312&#x27;</span>,<span class=\"hljs-string\">&#x27;qwe558&#x27;</span>,<span class=\"hljs-string\">&#x27;ttt999&#x27;</span>];</span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateJSBarcodeImg</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">\tjsBarcodeList.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v,index</span>)=&gt;</span>&#123;</span><br><span class=\"language-javascript\">\t\t<span class=\"hljs-comment\">// 根据动态id，动态赋值，动态生成条形码</span></span><br><span class=\"language-javascript\">      <span class=\"hljs-title class_\">JsBarcode</span>(<span class=\"hljs-string\">&#x27;#jsbarcodeImg&#x27;</span> + index, v[<span class=\"hljs-number\">0</span>], &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">&#x27;CODE39&#x27;</span>,</span><br><span class=\"language-javascript\">   \t\t<span class=\"hljs-attr\">text</span>:v,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">50</span>,</span><br><span class=\"language-javascript\">  \t\t<span class=\"hljs-attr\">fontSize</span>:<span class=\"hljs-number\">30</span>,</span><br><span class=\"language-javascript\">\t\t<span class=\"hljs-attr\">fontOptions</span>: <span class=\"hljs-string\">&quot;bold&quot;</span></span><br><span class=\"language-javascript\">      &#125;)</span><br><span class=\"language-javascript\">\t&#125;)</span><br><span class=\"language-javascript\">&#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"> <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">\t<span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">\t<span class=\"hljs-attr\">data</span>:&#123;&#125;,</span><br><span class=\"language-javascript\">\t<span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">\t\t\t<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"language-javascript\">\t\t    \t<span class=\"hljs-title function_\">generateJSBarcodeImg</span>()</span><br><span class=\"language-javascript\">\t\t  \t&#125;, <span class=\"hljs-number\">500</span>)</span><br><span class=\"language-javascript\">\t\t</span><br><span class=\"language-javascript\">\t&#125;,</span><br><span class=\"language-javascript\">\t</span><br><span class=\"language-javascript\">&#125;)</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Windows安装RabbitMQ详细教程","date":"2022-12-26T02:17:22.000Z","author":"Evan","_content":"\n### Windows安装RabbitMQ详细教程\n\n[参考链接](https://blog.csdn.net/tirster/article/details/121938987)\n\n#### Erlang下载\n\n链接：https://pan.baidu.com/s/19RnyLyZpj1lNfd1rlWVSPw?pwd=aeh1 \n提取码：aeh1\n\n#### rabbitmq下载\n\n链接：https://pan.baidu.com/s/1ivEYLnst3OdHGurnhexQhg?pwd=g91v \n提取码：g91v\n","source":"_posts/Windows安装RabbitMQ详细教程.md","raw":"---\ntitle: Windows安装RabbitMQ详细教程\ndate: 2022-12-26 10:17:22\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n### Windows安装RabbitMQ详细教程\n\n[参考链接](https://blog.csdn.net/tirster/article/details/121938987)\n\n#### Erlang下载\n\n链接：https://pan.baidu.com/s/19RnyLyZpj1lNfd1rlWVSPw?pwd=aeh1 \n提取码：aeh1\n\n#### rabbitmq下载\n\n链接：https://pan.baidu.com/s/1ivEYLnst3OdHGurnhexQhg?pwd=g91v \n提取码：g91v\n","slug":"Windows安装RabbitMQ详细教程","published":1,"updated":"2022-12-26T02:22:03.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc46cqau0000tov22vurhxpt","content":"<h3 id=\"Windows安装RabbitMQ详细教程\"><a href=\"#Windows安装RabbitMQ详细教程\" class=\"headerlink\" title=\"Windows安装RabbitMQ详细教程\"></a>Windows安装RabbitMQ详细教程</h3><p><a href=\"https://blog.csdn.net/tirster/article/details/121938987\">参考链接</a></p>\n<h4 id=\"Erlang下载\"><a href=\"#Erlang下载\" class=\"headerlink\" title=\"Erlang下载\"></a>Erlang下载</h4><p>链接：<a href=\"https://pan.baidu.com/s/19RnyLyZpj1lNfd1rlWVSPw?pwd=aeh1\">https://pan.baidu.com/s/19RnyLyZpj1lNfd1rlWVSPw?pwd=aeh1</a><br>提取码：aeh1</p>\n<h4 id=\"rabbitmq下载\"><a href=\"#rabbitmq下载\" class=\"headerlink\" title=\"rabbitmq下载\"></a>rabbitmq下载</h4><p>链接：<a href=\"https://pan.baidu.com/s/1ivEYLnst3OdHGurnhexQhg?pwd=g91v\">https://pan.baidu.com/s/1ivEYLnst3OdHGurnhexQhg?pwd=g91v</a><br>提取码：g91v</p>\n","site":{"data":{}},"wordcount":177,"excerpt":"","more":"<h3 id=\"Windows安装RabbitMQ详细教程\"><a href=\"#Windows安装RabbitMQ详细教程\" class=\"headerlink\" title=\"Windows安装RabbitMQ详细教程\"></a>Windows安装RabbitMQ详细教程</h3><p><a href=\"https://blog.csdn.net/tirster/article/details/121938987\">参考链接</a></p>\n<h4 id=\"Erlang下载\"><a href=\"#Erlang下载\" class=\"headerlink\" title=\"Erlang下载\"></a>Erlang下载</h4><p>链接：<a href=\"https://pan.baidu.com/s/19RnyLyZpj1lNfd1rlWVSPw?pwd=aeh1\">https://pan.baidu.com/s/19RnyLyZpj1lNfd1rlWVSPw?pwd=aeh1</a><br>提取码：aeh1</p>\n<h4 id=\"rabbitmq下载\"><a href=\"#rabbitmq下载\" class=\"headerlink\" title=\"rabbitmq下载\"></a>rabbitmq下载</h4><p>链接：<a href=\"https://pan.baidu.com/s/1ivEYLnst3OdHGurnhexQhg?pwd=g91v\">https://pan.baidu.com/s/1ivEYLnst3OdHGurnhexQhg?pwd=g91v</a><br>提取码：g91v</p>\n"},{"title":"git上传项目到gitee","date":"2022-12-26T03:36:30.000Z","author":"Evan","_content":"\n### git上传项目到gitee\n\n**1.下载安装gitee**\n\n[git官网](https://git-scm.com/download/win)\n\n**2.配置git的用户名和邮箱**\n\n右键单击项目你要上传的项目，再点击**Git Bash Here**\n\n然后输入命令:\n\n```text\ngit init \n//初始化本地仓库,这个时候本地文件夹会生成一个.git文件，说明初始化成功了。\n```\n\n在项目里找到`.git`文件夹，点开后找到`config`文件打开。\n\n```text\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n//添加user这一项，名字邮箱填自己的\n[user]\n\tname = @yangyewen\n\temail = 1310244108@qq.com\n```\n\n可以通过以下操作看下是否成功设置名字邮箱\n\n```text\n//查看用户名\ngit config user.name\n//查看邮箱\ngit config user.email\n\n//设置用户名\ngit config --global user.name \"xxx\"\n//设置邮箱\ngit config --global user.email \"xxx\"\n```\n\n**3.上传到远程仓库**\n\n打开gitee里要上传的项目，复制项目地址\n\n>  ***克隆下载--->HTTPS--->复制***\n\n打开命令框，输入命令：\n\n```text\ngit remote add origin 上一步复制的链接\n```\n\n**4.将远程origin主机的master分支拉取过来和本地的当前分支进行合并**\n\n输入命令：\n\n```text\ngit pull origin master\n```\n\n**5.将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录**\n\n输入命令：\n\n```text\ngit add .\n```\n\n**6.将缓存区内容添加到本地仓库**\n\n输入命令：\n\n```text\ngit commit -m '说明' //说明处是指提交时的备注，例如git commit -m '第一次提交’\n```\n\n**7.将本地版本库推送到远程服务器**\n\n输入命令：\n\n```text\ngit push origin master\n//强制推送 git push -f origin master\n```\n\n最后刷新gitee仓库 成功！\n","source":"_posts/git上传项目到gitee.md","raw":"---\ntitle: git上传项目到gitee\ndate: 2022-12-26 11:36:30\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n### git上传项目到gitee\n\n**1.下载安装gitee**\n\n[git官网](https://git-scm.com/download/win)\n\n**2.配置git的用户名和邮箱**\n\n右键单击项目你要上传的项目，再点击**Git Bash Here**\n\n然后输入命令:\n\n```text\ngit init \n//初始化本地仓库,这个时候本地文件夹会生成一个.git文件，说明初始化成功了。\n```\n\n在项目里找到`.git`文件夹，点开后找到`config`文件打开。\n\n```text\n[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n//添加user这一项，名字邮箱填自己的\n[user]\n\tname = @yangyewen\n\temail = 1310244108@qq.com\n```\n\n可以通过以下操作看下是否成功设置名字邮箱\n\n```text\n//查看用户名\ngit config user.name\n//查看邮箱\ngit config user.email\n\n//设置用户名\ngit config --global user.name \"xxx\"\n//设置邮箱\ngit config --global user.email \"xxx\"\n```\n\n**3.上传到远程仓库**\n\n打开gitee里要上传的项目，复制项目地址\n\n>  ***克隆下载--->HTTPS--->复制***\n\n打开命令框，输入命令：\n\n```text\ngit remote add origin 上一步复制的链接\n```\n\n**4.将远程origin主机的master分支拉取过来和本地的当前分支进行合并**\n\n输入命令：\n\n```text\ngit pull origin master\n```\n\n**5.将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录**\n\n输入命令：\n\n```text\ngit add .\n```\n\n**6.将缓存区内容添加到本地仓库**\n\n输入命令：\n\n```text\ngit commit -m '说明' //说明处是指提交时的备注，例如git commit -m '第一次提交’\n```\n\n**7.将本地版本库推送到远程服务器**\n\n输入命令：\n\n```text\ngit push origin master\n//强制推送 git push -f origin master\n```\n\n最后刷新gitee仓库 成功！\n","slug":"git上传项目到gitee","published":1,"updated":"2023-11-14T07:36:59.787Z","_id":"clc4f6xn10000zcv26p2caq1n","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"git上传项目到gitee\"><a href=\"#git上传项目到gitee\" class=\"headerlink\" title=\"git上传项目到gitee\"></a>git上传项目到gitee</h3><p><strong>1.下载安装gitee</strong></p>\n<p><a href=\"https://git-scm.com/download/win\">git官网</a></p>\n<p><strong>2.配置git的用户名和邮箱</strong></p>\n<p>右键单击项目你要上传的项目，再点击<strong>Git Bash Here</strong></p>\n<p>然后输入命令:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git init <br>//初始化本地仓库,这个时候本地文件夹会生成一个.git文件，说明初始化成功了。<br></code></pre></td></tr></table></figure>\n\n<p>在项目里找到<code>.git</code>文件夹，点开后找到<code>config</code>文件打开。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">[core]<br>\trepositoryformatversion = 0<br>\tfilemode = false<br>\tbare = false<br>\tlogallrefupdates = true<br>\tsymlinks = false<br>\tignorecase = true<br>//添加user这一项，名字邮箱填自己的<br>[user]<br>\tname = @yangyewen<br>\temail = 1310244108@qq.com<br></code></pre></td></tr></table></figure>\n\n<p>可以通过以下操作看下是否成功设置名字邮箱</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">//查看用户名<br>git config user.name<br>//查看邮箱<br>git config user.email<br><br>//设置用户名<br>git config --global user.name &quot;xxx&quot;<br>//设置邮箱<br>git config --global user.email &quot;xxx&quot;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.上传到远程仓库</strong></p>\n<p>打开gitee里要上传的项目，复制项目地址</p>\n<blockquote>\n<p> <em><strong>克隆下载—&gt;HTTPS—&gt;复制</strong></em></p>\n</blockquote>\n<p>打开命令框，输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git remote add origin 上一步复制的链接<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.将远程origin主机的master分支拉取过来和本地的当前分支进行合并</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git pull origin master<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git add .<br></code></pre></td></tr></table></figure>\n\n<p><strong>6.将缓存区内容添加到本地仓库</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git commit -m &#x27;说明&#x27; //说明处是指提交时的备注，例如git commit -m &#x27;第一次提交’<br></code></pre></td></tr></table></figure>\n\n<p><strong>7.将本地版本库推送到远程服务器</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git push origin master<br>//强制推送 git push -f origin master<br></code></pre></td></tr></table></figure>\n\n<p>最后刷新gitee仓库 成功！</p>\n","site":{"data":{}},"wordcount":879,"excerpt":"","more":"<h3 id=\"git上传项目到gitee\"><a href=\"#git上传项目到gitee\" class=\"headerlink\" title=\"git上传项目到gitee\"></a>git上传项目到gitee</h3><p><strong>1.下载安装gitee</strong></p>\n<p><a href=\"https://git-scm.com/download/win\">git官网</a></p>\n<p><strong>2.配置git的用户名和邮箱</strong></p>\n<p>右键单击项目你要上传的项目，再点击<strong>Git Bash Here</strong></p>\n<p>然后输入命令:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git init <br>//初始化本地仓库,这个时候本地文件夹会生成一个.git文件，说明初始化成功了。<br></code></pre></td></tr></table></figure>\n\n<p>在项目里找到<code>.git</code>文件夹，点开后找到<code>config</code>文件打开。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">[core]<br>\trepositoryformatversion = 0<br>\tfilemode = false<br>\tbare = false<br>\tlogallrefupdates = true<br>\tsymlinks = false<br>\tignorecase = true<br>//添加user这一项，名字邮箱填自己的<br>[user]<br>\tname = @yangyewen<br>\temail = 1310244108@qq.com<br></code></pre></td></tr></table></figure>\n\n<p>可以通过以下操作看下是否成功设置名字邮箱</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">//查看用户名<br>git config user.name<br>//查看邮箱<br>git config user.email<br><br>//设置用户名<br>git config --global user.name &quot;xxx&quot;<br>//设置邮箱<br>git config --global user.email &quot;xxx&quot;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.上传到远程仓库</strong></p>\n<p>打开gitee里要上传的项目，复制项目地址</p>\n<blockquote>\n<p> <em><strong>克隆下载—&gt;HTTPS—&gt;复制</strong></em></p>\n</blockquote>\n<p>打开命令框，输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git remote add origin 上一步复制的链接<br></code></pre></td></tr></table></figure>\n\n<p><strong>4.将远程origin主机的master分支拉取过来和本地的当前分支进行合并</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git pull origin master<br></code></pre></td></tr></table></figure>\n\n<p><strong>5.将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git add .<br></code></pre></td></tr></table></figure>\n\n<p><strong>6.将缓存区内容添加到本地仓库</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git commit -m &#x27;说明&#x27; //说明处是指提交时的备注，例如git commit -m &#x27;第一次提交’<br></code></pre></td></tr></table></figure>\n\n<p><strong>7.将本地版本库推送到远程服务器</strong></p>\n<p>输入命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">git push origin master<br>//强制推送 git push -f origin master<br></code></pre></td></tr></table></figure>\n\n<p>最后刷新gitee仓库 成功！</p>\n"},{"title":"Js实现数字转化人名币汉字","date":"2023-04-25T09:11:29.000Z","author":"Evan","_content":"\n##### 实现将阿拉伯数字转变成汉字计数\n\n```js\n\tfunction changeNumMoneyToChinese(money) {\n\t\t  var cnNums = new Array(\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"); //汉字的数字\n\t\t  var cnIntRadice = new Array(\"\", \"拾\", \"佰\", \"仟\"); //基本单位\n\t\t  var cnIntUnits = new Array(\"\", \"万\", \"亿\", \"兆\"); //对应整数部分扩展单位\n\t\t  var cnDecUnits = new Array(\"角\", \"分\", \"毫\", \"厘\"); //对应小数部分单位\n\t\t  var cnInteger = \"整\"; //整数金额时后面跟的字符\n\t\t  var cnIntLast = \"元\"; //整型完以后的单位\n\t\t  var maxNum = 999999999999999.9999; //最大处理的数字\n\t\t  var IntegerNum; //金额整数部分\n\t\t  var DecimalNum; //金额小数部分\n\t\t  var ChineseStr = \"\"; //输出的中文金额字符串\n\t\t  var parts; //分离金额后用的数组，预定义\n\t\t  if (money == \"\") {\n\t\t    return \"\";\n\t\t  }\n\t\t  money = parseFloat(money);\n\t\t  if (money >= maxNum) {\n\t\t    alert('超出最大处理数字');\n\t\t    return \"\";\n\t\t  }\n\t\t  if (money == 0) {\n\t\t    ChineseStr = cnNums[0] + cnIntLast + cnInteger;\n\t\t    return ChineseStr;\n\t\t  }\n\t\t  money = money.toString(); //转换为字符串\n\t\t  if (money.indexOf(\".\") == -1) {\n\t\t    IntegerNum = money;\n\t\t    DecimalNum = '';\n\t\t  } else {\n\t\t    parts = money.split(\".\");\n\t\t    IntegerNum = parts[0];\n\t\t    DecimalNum = parts[1].substr(0, 4);\n\t\t  }\n\t\t  if (parseInt(IntegerNum, 10) > 0) { //获取整型部分转换\n\t\t    var zeroCount = 0;\n\t\t    var IntLen = IntegerNum.length;\n\t\t    for (var i = 0; i < IntLen; i++) {\n\t\t      var n = IntegerNum.substr(i, 1);\n\t\t      var p = IntLen - i - 1;\n\t\t      var q = p / 4;\n\t\t      var m = p % 4;\n\t\t      if (n == \"0\") {\n\t\t        zeroCount++;\n\t\t      } else {\n\t\t        if (zeroCount > 0) {\n\t\t          ChineseStr += cnNums[0];\n\t\t        }\n\t\t        zeroCount = 0; //归零\n\t\t        ChineseStr += cnNums[parseInt(n)] + cnIntRadice[m];\n\t\t      }\n\t\t      if (m == 0 && zeroCount < 4) {\n\t\t        ChineseStr += cnIntUnits[q];\n\t\t      }\n\t\t    }\n\t\t    ChineseStr += cnIntLast;\n\t\t    //整型部分处理完毕\n\t\t  }\n\t\t  if (DecimalNum != '') { //小数部分\n\t\t    var decLen = DecimalNum.length;\n\t\t    for (var i = 0; i < decLen; i++) {\n\t\t      var n = DecimalNum.substr(i, 1);\n\t\t      if (n != '0') {\n\t\t        ChineseStr += cnNums[Number(n)] + cnDecUnits[i];\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t  if (ChineseStr == '') {\n\t\t    ChineseStr += cnNums[0] + cnIntLast + cnInteger;\n\t\t  } else if (DecimalNum == '') {\n\t\t    ChineseStr += cnInteger;\n\t\t  }\n\t\t  return ChineseStr;\n\t\t\n\t\t}\n\t\tconsole.log(changeNumMoneyToChinese(2400))\n```\n\n","source":"_posts/Js实现数字转化人名币汉字.md","raw":"---\ntitle: Js实现数字转化人名币汉字\ndate: 2023-04-25 17:11:29\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n##### 实现将阿拉伯数字转变成汉字计数\n\n```js\n\tfunction changeNumMoneyToChinese(money) {\n\t\t  var cnNums = new Array(\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"); //汉字的数字\n\t\t  var cnIntRadice = new Array(\"\", \"拾\", \"佰\", \"仟\"); //基本单位\n\t\t  var cnIntUnits = new Array(\"\", \"万\", \"亿\", \"兆\"); //对应整数部分扩展单位\n\t\t  var cnDecUnits = new Array(\"角\", \"分\", \"毫\", \"厘\"); //对应小数部分单位\n\t\t  var cnInteger = \"整\"; //整数金额时后面跟的字符\n\t\t  var cnIntLast = \"元\"; //整型完以后的单位\n\t\t  var maxNum = 999999999999999.9999; //最大处理的数字\n\t\t  var IntegerNum; //金额整数部分\n\t\t  var DecimalNum; //金额小数部分\n\t\t  var ChineseStr = \"\"; //输出的中文金额字符串\n\t\t  var parts; //分离金额后用的数组，预定义\n\t\t  if (money == \"\") {\n\t\t    return \"\";\n\t\t  }\n\t\t  money = parseFloat(money);\n\t\t  if (money >= maxNum) {\n\t\t    alert('超出最大处理数字');\n\t\t    return \"\";\n\t\t  }\n\t\t  if (money == 0) {\n\t\t    ChineseStr = cnNums[0] + cnIntLast + cnInteger;\n\t\t    return ChineseStr;\n\t\t  }\n\t\t  money = money.toString(); //转换为字符串\n\t\t  if (money.indexOf(\".\") == -1) {\n\t\t    IntegerNum = money;\n\t\t    DecimalNum = '';\n\t\t  } else {\n\t\t    parts = money.split(\".\");\n\t\t    IntegerNum = parts[0];\n\t\t    DecimalNum = parts[1].substr(0, 4);\n\t\t  }\n\t\t  if (parseInt(IntegerNum, 10) > 0) { //获取整型部分转换\n\t\t    var zeroCount = 0;\n\t\t    var IntLen = IntegerNum.length;\n\t\t    for (var i = 0; i < IntLen; i++) {\n\t\t      var n = IntegerNum.substr(i, 1);\n\t\t      var p = IntLen - i - 1;\n\t\t      var q = p / 4;\n\t\t      var m = p % 4;\n\t\t      if (n == \"0\") {\n\t\t        zeroCount++;\n\t\t      } else {\n\t\t        if (zeroCount > 0) {\n\t\t          ChineseStr += cnNums[0];\n\t\t        }\n\t\t        zeroCount = 0; //归零\n\t\t        ChineseStr += cnNums[parseInt(n)] + cnIntRadice[m];\n\t\t      }\n\t\t      if (m == 0 && zeroCount < 4) {\n\t\t        ChineseStr += cnIntUnits[q];\n\t\t      }\n\t\t    }\n\t\t    ChineseStr += cnIntLast;\n\t\t    //整型部分处理完毕\n\t\t  }\n\t\t  if (DecimalNum != '') { //小数部分\n\t\t    var decLen = DecimalNum.length;\n\t\t    for (var i = 0; i < decLen; i++) {\n\t\t      var n = DecimalNum.substr(i, 1);\n\t\t      if (n != '0') {\n\t\t        ChineseStr += cnNums[Number(n)] + cnDecUnits[i];\n\t\t      }\n\t\t    }\n\t\t  }\n\t\t  if (ChineseStr == '') {\n\t\t    ChineseStr += cnNums[0] + cnIntLast + cnInteger;\n\t\t  } else if (DecimalNum == '') {\n\t\t    ChineseStr += cnInteger;\n\t\t  }\n\t\t  return ChineseStr;\n\t\t\n\t\t}\n\t\tconsole.log(changeNumMoneyToChinese(2400))\n```\n\n","slug":"Js实现数字转化人名币汉字","published":1,"updated":"2023-04-25T09:16:55.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgw1zumv00006gv27pm0h6kp","content":"<h5 id=\"实现将阿拉伯数字转变成汉字计数\"><a href=\"#实现将阿拉伯数字转变成汉字计数\" class=\"headerlink\" title=\"实现将阿拉伯数字转变成汉字计数\"></a>实现将阿拉伯数字转变成汉字计数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeNumMoneyToChinese</span>(<span class=\"hljs-params\">money</span>) &#123;<br>\t  <span class=\"hljs-keyword\">var</span> cnNums = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;零&quot;</span>, <span class=\"hljs-string\">&quot;壹&quot;</span>, <span class=\"hljs-string\">&quot;贰&quot;</span>, <span class=\"hljs-string\">&quot;叁&quot;</span>, <span class=\"hljs-string\">&quot;肆&quot;</span>, <span class=\"hljs-string\">&quot;伍&quot;</span>, <span class=\"hljs-string\">&quot;陆&quot;</span>, <span class=\"hljs-string\">&quot;柒&quot;</span>, <span class=\"hljs-string\">&quot;捌&quot;</span>, <span class=\"hljs-string\">&quot;玖&quot;</span>); <span class=\"hljs-comment\">//汉字的数字</span><br>\t  <span class=\"hljs-keyword\">var</span> cnIntRadice = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;拾&quot;</span>, <span class=\"hljs-string\">&quot;佰&quot;</span>, <span class=\"hljs-string\">&quot;仟&quot;</span>); <span class=\"hljs-comment\">//基本单位</span><br>\t  <span class=\"hljs-keyword\">var</span> cnIntUnits = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;万&quot;</span>, <span class=\"hljs-string\">&quot;亿&quot;</span>, <span class=\"hljs-string\">&quot;兆&quot;</span>); <span class=\"hljs-comment\">//对应整数部分扩展单位</span><br>\t  <span class=\"hljs-keyword\">var</span> cnDecUnits = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;角&quot;</span>, <span class=\"hljs-string\">&quot;分&quot;</span>, <span class=\"hljs-string\">&quot;毫&quot;</span>, <span class=\"hljs-string\">&quot;厘&quot;</span>); <span class=\"hljs-comment\">//对应小数部分单位</span><br>\t  <span class=\"hljs-keyword\">var</span> cnInteger = <span class=\"hljs-string\">&quot;整&quot;</span>; <span class=\"hljs-comment\">//整数金额时后面跟的字符</span><br>\t  <span class=\"hljs-keyword\">var</span> cnIntLast = <span class=\"hljs-string\">&quot;元&quot;</span>; <span class=\"hljs-comment\">//整型完以后的单位</span><br>\t  <span class=\"hljs-keyword\">var</span> maxNum = <span class=\"hljs-number\">999999999999999.9999</span>; <span class=\"hljs-comment\">//最大处理的数字</span><br>\t  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">IntegerNum</span>; <span class=\"hljs-comment\">//金额整数部分</span><br>\t  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">DecimalNum</span>; <span class=\"hljs-comment\">//金额小数部分</span><br>\t  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">ChineseStr</span> = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">//输出的中文金额字符串</span><br>\t  <span class=\"hljs-keyword\">var</span> parts; <span class=\"hljs-comment\">//分离金额后用的数组，预定义</span><br>\t  <span class=\"hljs-keyword\">if</span> (money == <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>\t  &#125;<br>\t  money = <span class=\"hljs-built_in\">parseFloat</span>(money);<br>\t  <span class=\"hljs-keyword\">if</span> (money &gt;= maxNum) &#123;<br>\t    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;超出最大处理数字&#x27;</span>);<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (money == <span class=\"hljs-number\">0</span>) &#123;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> = cnNums[<span class=\"hljs-number\">0</span>] + cnIntLast + cnInteger;<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ChineseStr</span>;<br>\t  &#125;<br>\t  money = money.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-comment\">//转换为字符串</span><br>\t  <span class=\"hljs-keyword\">if</span> (money.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;.&quot;</span>) == -<span class=\"hljs-number\">1</span>) &#123;<br>\t    <span class=\"hljs-title class_\">IntegerNum</span> = money;<br>\t    <span class=\"hljs-title class_\">DecimalNum</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>\t  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t    parts = money.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;.&quot;</span>);<br>\t    <span class=\"hljs-title class_\">IntegerNum</span> = parts[<span class=\"hljs-number\">0</span>];<br>\t    <span class=\"hljs-title class_\">DecimalNum</span> = parts[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>);<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-title class_\">IntegerNum</span>, <span class=\"hljs-number\">10</span>) &gt; <span class=\"hljs-number\">0</span>) &#123; <span class=\"hljs-comment\">//获取整型部分转换</span><br>\t    <span class=\"hljs-keyword\">var</span> zeroCount = <span class=\"hljs-number\">0</span>;<br>\t    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">IntLen</span> = <span class=\"hljs-title class_\">IntegerNum</span>.<span class=\"hljs-property\">length</span>;<br>\t    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-title class_\">IntLen</span>; i++) &#123;<br>\t      <span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-title class_\">IntegerNum</span>.<span class=\"hljs-title function_\">substr</span>(i, <span class=\"hljs-number\">1</span>);<br>\t      <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-title class_\">IntLen</span> - i - <span class=\"hljs-number\">1</span>;<br>\t      <span class=\"hljs-keyword\">var</span> q = p / <span class=\"hljs-number\">4</span>;<br>\t      <span class=\"hljs-keyword\">var</span> m = p % <span class=\"hljs-number\">4</span>;<br>\t      <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-string\">&quot;0&quot;</span>) &#123;<br>\t        zeroCount++;<br>\t      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t        <span class=\"hljs-keyword\">if</span> (zeroCount &gt; <span class=\"hljs-number\">0</span>) &#123;<br>\t          <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-number\">0</span>];<br>\t        &#125;<br>\t        zeroCount = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//归零</span><br>\t        <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-built_in\">parseInt</span>(n)] + cnIntRadice[m];<br>\t      &#125;<br>\t      <span class=\"hljs-keyword\">if</span> (m == <span class=\"hljs-number\">0</span> &amp;&amp; zeroCount &lt; <span class=\"hljs-number\">4</span>) &#123;<br>\t        <span class=\"hljs-title class_\">ChineseStr</span> += cnIntUnits[q];<br>\t      &#125;<br>\t    &#125;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> += cnIntLast;<br>\t    <span class=\"hljs-comment\">//整型部分处理完毕</span><br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">DecimalNum</span> != <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123; <span class=\"hljs-comment\">//小数部分</span><br>\t    <span class=\"hljs-keyword\">var</span> decLen = <span class=\"hljs-title class_\">DecimalNum</span>.<span class=\"hljs-property\">length</span>;<br>\t    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; decLen; i++) &#123;<br>\t      <span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-title class_\">DecimalNum</span>.<span class=\"hljs-title function_\">substr</span>(i, <span class=\"hljs-number\">1</span>);<br>\t      <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-string\">&#x27;0&#x27;</span>) &#123;<br>\t        <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-title class_\">Number</span>(n)] + cnDecUnits[i];<br>\t      &#125;<br>\t    &#125;<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">ChineseStr</span> == <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-number\">0</span>] + cnIntLast + cnInteger;<br>\t  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">DecimalNum</span> == <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> += cnInteger;<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ChineseStr</span>;<br>\t<br>\t&#125;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">changeNumMoneyToChinese</span>(<span class=\"hljs-number\">2400</span>))<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":2223,"excerpt":"","more":"<h5 id=\"实现将阿拉伯数字转变成汉字计数\"><a href=\"#实现将阿拉伯数字转变成汉字计数\" class=\"headerlink\" title=\"实现将阿拉伯数字转变成汉字计数\"></a>实现将阿拉伯数字转变成汉字计数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">changeNumMoneyToChinese</span>(<span class=\"hljs-params\">money</span>) &#123;<br>\t  <span class=\"hljs-keyword\">var</span> cnNums = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;零&quot;</span>, <span class=\"hljs-string\">&quot;壹&quot;</span>, <span class=\"hljs-string\">&quot;贰&quot;</span>, <span class=\"hljs-string\">&quot;叁&quot;</span>, <span class=\"hljs-string\">&quot;肆&quot;</span>, <span class=\"hljs-string\">&quot;伍&quot;</span>, <span class=\"hljs-string\">&quot;陆&quot;</span>, <span class=\"hljs-string\">&quot;柒&quot;</span>, <span class=\"hljs-string\">&quot;捌&quot;</span>, <span class=\"hljs-string\">&quot;玖&quot;</span>); <span class=\"hljs-comment\">//汉字的数字</span><br>\t  <span class=\"hljs-keyword\">var</span> cnIntRadice = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;拾&quot;</span>, <span class=\"hljs-string\">&quot;佰&quot;</span>, <span class=\"hljs-string\">&quot;仟&quot;</span>); <span class=\"hljs-comment\">//基本单位</span><br>\t  <span class=\"hljs-keyword\">var</span> cnIntUnits = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;万&quot;</span>, <span class=\"hljs-string\">&quot;亿&quot;</span>, <span class=\"hljs-string\">&quot;兆&quot;</span>); <span class=\"hljs-comment\">//对应整数部分扩展单位</span><br>\t  <span class=\"hljs-keyword\">var</span> cnDecUnits = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-string\">&quot;角&quot;</span>, <span class=\"hljs-string\">&quot;分&quot;</span>, <span class=\"hljs-string\">&quot;毫&quot;</span>, <span class=\"hljs-string\">&quot;厘&quot;</span>); <span class=\"hljs-comment\">//对应小数部分单位</span><br>\t  <span class=\"hljs-keyword\">var</span> cnInteger = <span class=\"hljs-string\">&quot;整&quot;</span>; <span class=\"hljs-comment\">//整数金额时后面跟的字符</span><br>\t  <span class=\"hljs-keyword\">var</span> cnIntLast = <span class=\"hljs-string\">&quot;元&quot;</span>; <span class=\"hljs-comment\">//整型完以后的单位</span><br>\t  <span class=\"hljs-keyword\">var</span> maxNum = <span class=\"hljs-number\">999999999999999.9999</span>; <span class=\"hljs-comment\">//最大处理的数字</span><br>\t  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">IntegerNum</span>; <span class=\"hljs-comment\">//金额整数部分</span><br>\t  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">DecimalNum</span>; <span class=\"hljs-comment\">//金额小数部分</span><br>\t  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">ChineseStr</span> = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">//输出的中文金额字符串</span><br>\t  <span class=\"hljs-keyword\">var</span> parts; <span class=\"hljs-comment\">//分离金额后用的数组，预定义</span><br>\t  <span class=\"hljs-keyword\">if</span> (money == <span class=\"hljs-string\">&quot;&quot;</span>) &#123;<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>\t  &#125;<br>\t  money = <span class=\"hljs-built_in\">parseFloat</span>(money);<br>\t  <span class=\"hljs-keyword\">if</span> (money &gt;= maxNum) &#123;<br>\t    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;超出最大处理数字&#x27;</span>);<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (money == <span class=\"hljs-number\">0</span>) &#123;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> = cnNums[<span class=\"hljs-number\">0</span>] + cnIntLast + cnInteger;<br>\t    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ChineseStr</span>;<br>\t  &#125;<br>\t  money = money.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-comment\">//转换为字符串</span><br>\t  <span class=\"hljs-keyword\">if</span> (money.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;.&quot;</span>) == -<span class=\"hljs-number\">1</span>) &#123;<br>\t    <span class=\"hljs-title class_\">IntegerNum</span> = money;<br>\t    <span class=\"hljs-title class_\">DecimalNum</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>\t  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t    parts = money.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;.&quot;</span>);<br>\t    <span class=\"hljs-title class_\">IntegerNum</span> = parts[<span class=\"hljs-number\">0</span>];<br>\t    <span class=\"hljs-title class_\">DecimalNum</span> = parts[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>);<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-title class_\">IntegerNum</span>, <span class=\"hljs-number\">10</span>) &gt; <span class=\"hljs-number\">0</span>) &#123; <span class=\"hljs-comment\">//获取整型部分转换</span><br>\t    <span class=\"hljs-keyword\">var</span> zeroCount = <span class=\"hljs-number\">0</span>;<br>\t    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">IntLen</span> = <span class=\"hljs-title class_\">IntegerNum</span>.<span class=\"hljs-property\">length</span>;<br>\t    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-title class_\">IntLen</span>; i++) &#123;<br>\t      <span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-title class_\">IntegerNum</span>.<span class=\"hljs-title function_\">substr</span>(i, <span class=\"hljs-number\">1</span>);<br>\t      <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-title class_\">IntLen</span> - i - <span class=\"hljs-number\">1</span>;<br>\t      <span class=\"hljs-keyword\">var</span> q = p / <span class=\"hljs-number\">4</span>;<br>\t      <span class=\"hljs-keyword\">var</span> m = p % <span class=\"hljs-number\">4</span>;<br>\t      <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-string\">&quot;0&quot;</span>) &#123;<br>\t        zeroCount++;<br>\t      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t        <span class=\"hljs-keyword\">if</span> (zeroCount &gt; <span class=\"hljs-number\">0</span>) &#123;<br>\t          <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-number\">0</span>];<br>\t        &#125;<br>\t        zeroCount = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//归零</span><br>\t        <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-built_in\">parseInt</span>(n)] + cnIntRadice[m];<br>\t      &#125;<br>\t      <span class=\"hljs-keyword\">if</span> (m == <span class=\"hljs-number\">0</span> &amp;&amp; zeroCount &lt; <span class=\"hljs-number\">4</span>) &#123;<br>\t        <span class=\"hljs-title class_\">ChineseStr</span> += cnIntUnits[q];<br>\t      &#125;<br>\t    &#125;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> += cnIntLast;<br>\t    <span class=\"hljs-comment\">//整型部分处理完毕</span><br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">DecimalNum</span> != <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123; <span class=\"hljs-comment\">//小数部分</span><br>\t    <span class=\"hljs-keyword\">var</span> decLen = <span class=\"hljs-title class_\">DecimalNum</span>.<span class=\"hljs-property\">length</span>;<br>\t    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; decLen; i++) &#123;<br>\t      <span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-title class_\">DecimalNum</span>.<span class=\"hljs-title function_\">substr</span>(i, <span class=\"hljs-number\">1</span>);<br>\t      <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-string\">&#x27;0&#x27;</span>) &#123;<br>\t        <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-title class_\">Number</span>(n)] + cnDecUnits[i];<br>\t      &#125;<br>\t    &#125;<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">ChineseStr</span> == <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> += cnNums[<span class=\"hljs-number\">0</span>] + cnIntLast + cnInteger;<br>\t  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">DecimalNum</span> == <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>\t    <span class=\"hljs-title class_\">ChineseStr</span> += cnInteger;<br>\t  &#125;<br>\t  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ChineseStr</span>;<br>\t<br>\t&#125;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">changeNumMoneyToChinese</span>(<span class=\"hljs-number\">2400</span>))<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Django生成模型类的编码问题","date":"2024-01-10T08:42:19.000Z","author":"Evan","_content":"\n\n\n\n\n## Django生成模型类的编码问题\n\n利用Django的ORM，将数据表变成Django中的模型类。\n\n```python\npython manage.py inspectdb > 应用名/models.py\n```\n\n有了Django框架的ORM，我们可以直接使用面向对象的方式来实现对数据的CRUD（增删改查）操作。我们可以在PyCharm的终端中输入下面的命令进入到Django项目的交互式环境，然后尝试对模型的操作。\n\n```\npython manage.py shell\n```\n\n然后会报错误：\n\n```\nValueError: source code string cannot contain null bytes\n```\n\n## 解决办法\n\n该问题是因为生成的文件编码问题，将models.py的内容改成UTF-8格式即刻解决\n","source":"_posts/Django生成模型类的编码问题.md","raw":"---\ntitle: Django生成模型类的编码问题\ndate: 2024-01-10 16:42:19\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n\n\n\n\n## Django生成模型类的编码问题\n\n利用Django的ORM，将数据表变成Django中的模型类。\n\n```python\npython manage.py inspectdb > 应用名/models.py\n```\n\n有了Django框架的ORM，我们可以直接使用面向对象的方式来实现对数据的CRUD（增删改查）操作。我们可以在PyCharm的终端中输入下面的命令进入到Django项目的交互式环境，然后尝试对模型的操作。\n\n```\npython manage.py shell\n```\n\n然后会报错误：\n\n```\nValueError: source code string cannot contain null bytes\n```\n\n## 解决办法\n\n该问题是因为生成的文件编码问题，将models.py的内容改成UTF-8格式即刻解决\n","slug":"Django生成模型类的编码问题","published":1,"updated":"2024-01-10T06:19:22.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrrg7q7p0000eov21r96epsd","content":"<h2 id=\"Django生成模型类的编码问题\"><a href=\"#Django生成模型类的编码问题\" class=\"headerlink\" title=\"Django生成模型类的编码问题\"></a>Django生成模型类的编码问题</h2><p>利用Django的ORM，将数据表变成Django中的模型类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">python manage.py inspectdb &gt; 应用名/models.py<br></code></pre></td></tr></table></figure>\n\n<p>有了Django框架的ORM，我们可以直接使用面向对象的方式来实现对数据的CRUD（增删改查）操作。我们可以在PyCharm的终端中输入下面的命令进入到Django项目的交互式环境，然后尝试对模型的操作。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">python</span> manage.<span class=\"hljs-keyword\">py</span> <span class=\"hljs-keyword\">shell</span><br></code></pre></td></tr></table></figure>\n\n<p>然后会报错误：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">ValueError: source <span class=\"hljs-built_in\">code</span> <span class=\"hljs-keyword\">string</span> cannot contain <span class=\"hljs-built_in\">null</span> bytes<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>该问题是因为生成的文件编码问题，将models.py的内容改成UTF-8格式即刻解决</p>\n","site":{"data":{}},"wordcount":315,"excerpt":"","more":"<h2 id=\"Django生成模型类的编码问题\"><a href=\"#Django生成模型类的编码问题\" class=\"headerlink\" title=\"Django生成模型类的编码问题\"></a>Django生成模型类的编码问题</h2><p>利用Django的ORM，将数据表变成Django中的模型类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">python manage.py inspectdb &gt; 应用名/models.py<br></code></pre></td></tr></table></figure>\n\n<p>有了Django框架的ORM，我们可以直接使用面向对象的方式来实现对数据的CRUD（增删改查）操作。我们可以在PyCharm的终端中输入下面的命令进入到Django项目的交互式环境，然后尝试对模型的操作。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">python</span> manage.<span class=\"hljs-keyword\">py</span> <span class=\"hljs-keyword\">shell</span><br></code></pre></td></tr></table></figure>\n\n<p>然后会报错误：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">ValueError: source <span class=\"hljs-built_in\">code</span> <span class=\"hljs-keyword\">string</span> cannot contain <span class=\"hljs-built_in\">null</span> bytes<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>该问题是因为生成的文件编码问题，将models.py的内容改成UTF-8格式即刻解决</p>\n"},{"title":"Django使用Vue在html中按{{}}取值失败的解决办法","date":"2024-02-22T09:12:06.000Z","author":"Evan","_content":"\n因为django本身有模版的概念，直接取值是从django的模版中取值的\n\n而在vue的v-for中想要获取遍历之后的数据，\n\n直接用{{ var }}方式取值，会取到None\n\n这时候就需要进行特殊处理，解决办法为：\n\n**1、禁用Django的模版**\n\n```html\n{% verbatim %}\n{% endverbatim %}\n在需要不解析的DOM 上下 包裹 {% verbatim %} {% endverbatim %} \n例如：\n<div id=\"app\" v-cloak v-loading.fullscreen.lock=\"loading\">\n    {% verbatim %}\n    <div class=\"subject\" v-for=\"subject in subjects\">\n        <p class=\"sname\">\n            <a :href=\"'/teachers?sno=' + subject.no\">\n                {{ subject.name }}\n            </a>\n            <img v-if=\"subject.isHot\" src=''>\n        </p>\n        <p>{{ subject.intro }}</p>\n    </div>{% endverbatim %}\n</div>\n```\n\n**2.更改Vue的{{ }}**\n\n 改成其他 例如：{[ ]} 等等，修改方式如下：\n\n```js\nVue.config.delimiters = [\"{[\", \"]}\"]\n或者\nnew Vue({\n  delimiters:['{[', ']}'],\n  el: '.el',\n  data:{}\n })\n```\n\n","source":"_posts/Django使用Vue在html中按-取值失败的解决办法.md","raw":"---\ntitle: 'Django使用Vue在html中按{{}}取值失败的解决办法'\ndate: 2024-02-22 17:12:06\nauthor: Evan\ncategories: 笔记\ntags:\n---\n\n因为django本身有模版的概念，直接取值是从django的模版中取值的\n\n而在vue的v-for中想要获取遍历之后的数据，\n\n直接用{{ var }}方式取值，会取到None\n\n这时候就需要进行特殊处理，解决办法为：\n\n**1、禁用Django的模版**\n\n```html\n{% verbatim %}\n{% endverbatim %}\n在需要不解析的DOM 上下 包裹 {% verbatim %} {% endverbatim %} \n例如：\n<div id=\"app\" v-cloak v-loading.fullscreen.lock=\"loading\">\n    {% verbatim %}\n    <div class=\"subject\" v-for=\"subject in subjects\">\n        <p class=\"sname\">\n            <a :href=\"'/teachers?sno=' + subject.no\">\n                {{ subject.name }}\n            </a>\n            <img v-if=\"subject.isHot\" src=''>\n        </p>\n        <p>{{ subject.intro }}</p>\n    </div>{% endverbatim %}\n</div>\n```\n\n**2.更改Vue的{{ }}**\n\n 改成其他 例如：{[ ]} 等等，修改方式如下：\n\n```js\nVue.config.delimiters = [\"{[\", \"]}\"]\n或者\nnew Vue({\n  delimiters:['{[', ']}'],\n  el: '.el',\n  data:{}\n })\n```\n\n","slug":"Django使用Vue在html中按-取值失败的解决办法","published":1,"updated":"2024-02-22T09:18:11.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsx0gikf0000bov21c6765tu"},{"title":"用python实现图片验证码","date":"2024-01-24T08:42:19.000Z","author":"Evan","_content":"\n\n\n\n\n# 用python实现图片验证码\n\n**1.安装模块pillow**\n\n```python\n#安装pillow模块\npip3 install pillow\n```\n\n**2.生成随机验证码**\n\n```python\ndef gen_random_code(length=4):\n    ALL_CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return ''.join(random.choices(ALL_CHARS, k=length))\n```\n\n**3.根据验证码生成图片**\n\n```python\ndef generate_image(code, width, height, font_size):\n    # 创建一个新的图片对象\n    img = Image.new(mode='RGB', size=(width, height), color=(255, 255, 255))\n    # 创建一个画笔对象\n    draw = ImageDraw.Draw(img)\n    # 设置字体\n    font = ImageFont.truetype('arial.ttf', font_size)\n    # 获取字符的宽度和高度\n    # text_width, text_height = draw.textsize(code, font)\n    # 获取字符的宽度和高度\n    bbox = draw.textbbox((0, 0, width, height), code, font=font)\n    text_width = bbox[2] - bbox[0]\n    text_height = bbox[3] - bbox[1]\n\n    # 将字符绘制在图片中央\n    x = (width - text_width) // 2\n    y = (height - text_height) // 2\n    draw.text((x, y), code, font=font, fill=(0, 0, 0))\n    # 添加干扰线\n    for i in range(5):\n        x1 = random.randint(0, width)\n        y1 = random.randint(0, height)\n        x2 = random.randint(0, width)\n        y2 = random.randint(0, height)\n        draw.line((x1, y1, x2, y2), fill=(0, 0, 0), width=2)\n    # 添加干扰点\n    for i in range(50):\n        x = random.randint(0, width)\n        y = random.randint(0, height)\n        draw.point((x, y), fill=(0, 0, 0))\n    # 返回验证码图片对象\n    return img\n```\n\n**调用**\n\n```python\ndef get_captcha(request: HttpRequest) -> HttpResponse:\n    \"\"\"验证码\"\"\"\n    captcha_text = gen_random_code()\n    request.session['captcha'] = captcha_text\n    image_data = generate_image(request.session['captcha'], 150, 50, 30)\n    //保存图片\n    save_image(image_data, 'captcha.png')\n    //展示图片\n    image_data.show()\n    return HttpResponse(image_data, content_type='image/jpeg')\n```\n\n","source":"_posts/用python实现图片验证码.md","raw":"---\ntitle: 用python实现图片验证码\ndate: 2024-01-24 16:42:19\nauthor: Evan\ncategories: 笔记\ntags:\n\n---\n\n\n\n\n\n# 用python实现图片验证码\n\n**1.安装模块pillow**\n\n```python\n#安装pillow模块\npip3 install pillow\n```\n\n**2.生成随机验证码**\n\n```python\ndef gen_random_code(length=4):\n    ALL_CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return ''.join(random.choices(ALL_CHARS, k=length))\n```\n\n**3.根据验证码生成图片**\n\n```python\ndef generate_image(code, width, height, font_size):\n    # 创建一个新的图片对象\n    img = Image.new(mode='RGB', size=(width, height), color=(255, 255, 255))\n    # 创建一个画笔对象\n    draw = ImageDraw.Draw(img)\n    # 设置字体\n    font = ImageFont.truetype('arial.ttf', font_size)\n    # 获取字符的宽度和高度\n    # text_width, text_height = draw.textsize(code, font)\n    # 获取字符的宽度和高度\n    bbox = draw.textbbox((0, 0, width, height), code, font=font)\n    text_width = bbox[2] - bbox[0]\n    text_height = bbox[3] - bbox[1]\n\n    # 将字符绘制在图片中央\n    x = (width - text_width) // 2\n    y = (height - text_height) // 2\n    draw.text((x, y), code, font=font, fill=(0, 0, 0))\n    # 添加干扰线\n    for i in range(5):\n        x1 = random.randint(0, width)\n        y1 = random.randint(0, height)\n        x2 = random.randint(0, width)\n        y2 = random.randint(0, height)\n        draw.line((x1, y1, x2, y2), fill=(0, 0, 0), width=2)\n    # 添加干扰点\n    for i in range(50):\n        x = random.randint(0, width)\n        y = random.randint(0, height)\n        draw.point((x, y), fill=(0, 0, 0))\n    # 返回验证码图片对象\n    return img\n```\n\n**调用**\n\n```python\ndef get_captcha(request: HttpRequest) -> HttpResponse:\n    \"\"\"验证码\"\"\"\n    captcha_text = gen_random_code()\n    request.session['captcha'] = captcha_text\n    image_data = generate_image(request.session['captcha'], 150, 50, 30)\n    //保存图片\n    save_image(image_data, 'captcha.png')\n    //展示图片\n    image_data.show()\n    return HttpResponse(image_data, content_type='image/jpeg')\n```\n\n","slug":"用python实现图片验证码","published":1,"updated":"2024-02-20T08:09:25.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsx0giko0002bov25zt61ap9","content":"<h1 id=\"用python实现图片验证码\"><a href=\"#用python实现图片验证码\" class=\"headerlink\" title=\"用python实现图片验证码\"></a>用python实现图片验证码</h1><p><strong>1.安装模块pillow</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#安装pillow模块</span><br>pip3 install pillow<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.生成随机验证码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gen_random_code</span>(<span class=\"hljs-params\">length=<span class=\"hljs-number\">4</span></span>):<br>    ALL_CHARS = <span class=\"hljs-string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span>.join(random.choices(ALL_CHARS, k=length))<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.根据验证码生成图片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_image</span>(<span class=\"hljs-params\">code, width, height, font_size</span>):<br>    <span class=\"hljs-comment\"># 创建一个新的图片对象</span><br>    img = Image.new(mode=<span class=\"hljs-string\">&#x27;RGB&#x27;</span>, size=(width, height), color=(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>))<br>    <span class=\"hljs-comment\"># 创建一个画笔对象</span><br>    draw = ImageDraw.Draw(img)<br>    <span class=\"hljs-comment\"># 设置字体</span><br>    font = ImageFont.truetype(<span class=\"hljs-string\">&#x27;arial.ttf&#x27;</span>, font_size)<br>    <span class=\"hljs-comment\"># 获取字符的宽度和高度</span><br>    <span class=\"hljs-comment\"># text_width, text_height = draw.textsize(code, font)</span><br>    <span class=\"hljs-comment\"># 获取字符的宽度和高度</span><br>    bbox = draw.textbbox((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height), code, font=font)<br>    text_width = bbox[<span class=\"hljs-number\">2</span>] - bbox[<span class=\"hljs-number\">0</span>]<br>    text_height = bbox[<span class=\"hljs-number\">3</span>] - bbox[<span class=\"hljs-number\">1</span>]<br><br>    <span class=\"hljs-comment\"># 将字符绘制在图片中央</span><br>    x = (width - text_width) // <span class=\"hljs-number\">2</span><br>    y = (height - text_height) // <span class=\"hljs-number\">2</span><br>    draw.text((x, y), code, font=font, fill=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>))<br>    <span class=\"hljs-comment\"># 添加干扰线</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        x1 = random.randint(<span class=\"hljs-number\">0</span>, width)<br>        y1 = random.randint(<span class=\"hljs-number\">0</span>, height)<br>        x2 = random.randint(<span class=\"hljs-number\">0</span>, width)<br>        y2 = random.randint(<span class=\"hljs-number\">0</span>, height)<br>        draw.line((x1, y1, x2, y2), fill=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), width=<span class=\"hljs-number\">2</span>)<br>    <span class=\"hljs-comment\"># 添加干扰点</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">50</span>):<br>        x = random.randint(<span class=\"hljs-number\">0</span>, width)<br>        y = random.randint(<span class=\"hljs-number\">0</span>, height)<br>        draw.point((x, y), fill=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>))<br>    <span class=\"hljs-comment\"># 返回验证码图片对象</span><br>    <span class=\"hljs-keyword\">return</span> img<br></code></pre></td></tr></table></figure>\n\n<p><strong>调用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_captcha</span>(<span class=\"hljs-params\">request: HttpRequest</span>) -&gt; HttpResponse:<br>    <span class=\"hljs-string\">&quot;&quot;&quot;验证码&quot;&quot;&quot;</span><br>    captcha_text = gen_random_code()<br>    request.session[<span class=\"hljs-string\">&#x27;captcha&#x27;</span>] = captcha_text<br>    image_data = generate_image(request.session[<span class=\"hljs-string\">&#x27;captcha&#x27;</span>], <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">30</span>)<br>    //保存图片<br>    save_image(image_data, <span class=\"hljs-string\">&#x27;captcha.png&#x27;</span>)<br>    //展示图片<br>    image_data.show()<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(image_data, content_type=<span class=\"hljs-string\">&#x27;image/jpeg&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1504,"excerpt":"","more":"<h1 id=\"用python实现图片验证码\"><a href=\"#用python实现图片验证码\" class=\"headerlink\" title=\"用python实现图片验证码\"></a>用python实现图片验证码</h1><p><strong>1.安装模块pillow</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#安装pillow模块</span><br>pip3 install pillow<br></code></pre></td></tr></table></figure>\n\n<p><strong>2.生成随机验证码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gen_random_code</span>(<span class=\"hljs-params\">length=<span class=\"hljs-number\">4</span></span>):<br>    ALL_CHARS = <span class=\"hljs-string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span>.join(random.choices(ALL_CHARS, k=length))<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.根据验证码生成图片</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_image</span>(<span class=\"hljs-params\">code, width, height, font_size</span>):<br>    <span class=\"hljs-comment\"># 创建一个新的图片对象</span><br>    img = Image.new(mode=<span class=\"hljs-string\">&#x27;RGB&#x27;</span>, size=(width, height), color=(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>))<br>    <span class=\"hljs-comment\"># 创建一个画笔对象</span><br>    draw = ImageDraw.Draw(img)<br>    <span class=\"hljs-comment\"># 设置字体</span><br>    font = ImageFont.truetype(<span class=\"hljs-string\">&#x27;arial.ttf&#x27;</span>, font_size)<br>    <span class=\"hljs-comment\"># 获取字符的宽度和高度</span><br>    <span class=\"hljs-comment\"># text_width, text_height = draw.textsize(code, font)</span><br>    <span class=\"hljs-comment\"># 获取字符的宽度和高度</span><br>    bbox = draw.textbbox((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height), code, font=font)<br>    text_width = bbox[<span class=\"hljs-number\">2</span>] - bbox[<span class=\"hljs-number\">0</span>]<br>    text_height = bbox[<span class=\"hljs-number\">3</span>] - bbox[<span class=\"hljs-number\">1</span>]<br><br>    <span class=\"hljs-comment\"># 将字符绘制在图片中央</span><br>    x = (width - text_width) // <span class=\"hljs-number\">2</span><br>    y = (height - text_height) // <span class=\"hljs-number\">2</span><br>    draw.text((x, y), code, font=font, fill=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>))<br>    <span class=\"hljs-comment\"># 添加干扰线</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        x1 = random.randint(<span class=\"hljs-number\">0</span>, width)<br>        y1 = random.randint(<span class=\"hljs-number\">0</span>, height)<br>        x2 = random.randint(<span class=\"hljs-number\">0</span>, width)<br>        y2 = random.randint(<span class=\"hljs-number\">0</span>, height)<br>        draw.line((x1, y1, x2, y2), fill=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), width=<span class=\"hljs-number\">2</span>)<br>    <span class=\"hljs-comment\"># 添加干扰点</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">50</span>):<br>        x = random.randint(<span class=\"hljs-number\">0</span>, width)<br>        y = random.randint(<span class=\"hljs-number\">0</span>, height)<br>        draw.point((x, y), fill=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>))<br>    <span class=\"hljs-comment\"># 返回验证码图片对象</span><br>    <span class=\"hljs-keyword\">return</span> img<br></code></pre></td></tr></table></figure>\n\n<p><strong>调用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_captcha</span>(<span class=\"hljs-params\">request: HttpRequest</span>) -&gt; HttpResponse:<br>    <span class=\"hljs-string\">&quot;&quot;&quot;验证码&quot;&quot;&quot;</span><br>    captcha_text = gen_random_code()<br>    request.session[<span class=\"hljs-string\">&#x27;captcha&#x27;</span>] = captcha_text<br>    image_data = generate_image(request.session[<span class=\"hljs-string\">&#x27;captcha&#x27;</span>], <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">30</span>)<br>    //保存图片<br>    save_image(image_data, <span class=\"hljs-string\">&#x27;captcha.png&#x27;</span>)<br>    //展示图片<br>    image_data.show()<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(image_data, content_type=<span class=\"hljs-string\">&#x27;image/jpeg&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n"},{"title":"WSGIRequest’ object has no attribute ‘is_ajax’","date":"2024-02-21T07:19:02.000Z","author":"Evan","_content":"\n### 中间件权限校验的Ajax请求判断的版本问题\n\n使用中间件权限校验，判断是不是Ajax请求时产生报错：\n\n```text\nWSGIRequest’ object has no attribute ‘is_ajax’\n```\n\ndjango更新至4.0取消了request.is_ajax()这个判断；4.0版本的django可以使用以下代替：\n\n```\nrequest.headers.get('x-requested-with') == 'XMLHttpRequest':\n```\n\n也可以将django版本降低，就可以继续使用：\n\n```python\nrequest.is_ajax()\n```\n\n","source":"_posts/WSGIRequest’-object-has-no-attribute-‘is-ajax’.md","raw":"---\ntitle: WSGIRequest’ object has no attribute ‘is_ajax’\ndate: 2024-02-21 15:19:02\nauthor: Evan\ncategories: 笔记\n---\n\n### 中间件权限校验的Ajax请求判断的版本问题\n\n使用中间件权限校验，判断是不是Ajax请求时产生报错：\n\n```text\nWSGIRequest’ object has no attribute ‘is_ajax’\n```\n\ndjango更新至4.0取消了request.is_ajax()这个判断；4.0版本的django可以使用以下代替：\n\n```\nrequest.headers.get('x-requested-with') == 'XMLHttpRequest':\n```\n\n也可以将django版本降低，就可以继续使用：\n\n```python\nrequest.is_ajax()\n```\n\n","slug":"WSGIRequest’-object-has-no-attribute-‘is-ajax’","published":1,"updated":"2024-02-21T07:27:39.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsx0gikq0003bov2cut2eg24","content":"<h3 id=\"中间件权限校验的Ajax请求判断的版本问题\"><a href=\"#中间件权限校验的Ajax请求判断的版本问题\" class=\"headerlink\" title=\"中间件权限校验的Ajax请求判断的版本问题\"></a>中间件权限校验的Ajax请求判断的版本问题</h3><p>使用中间件权限校验，判断是不是Ajax请求时产生报错：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">WSGIRequest’ object has no attribute ‘is_ajax’<br></code></pre></td></tr></table></figure>\n\n<p>django更新至4.0取消了request.is_ajax()这个判断；4.0版本的django可以使用以下代替：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">request.headers.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-string\">&#x27;x-requested-with&#x27;</span>) == <span class=\"hljs-string\">&#x27;XMLHttpRequest&#x27;</span>:<br></code></pre></td></tr></table></figure>\n\n<p>也可以将django版本降低，就可以继续使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">request.is_ajax()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":268,"excerpt":"","more":"<h3 id=\"中间件权限校验的Ajax请求判断的版本问题\"><a href=\"#中间件权限校验的Ajax请求判断的版本问题\" class=\"headerlink\" title=\"中间件权限校验的Ajax请求判断的版本问题\"></a>中间件权限校验的Ajax请求判断的版本问题</h3><p>使用中间件权限校验，判断是不是Ajax请求时产生报错：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">WSGIRequest’ object has no attribute ‘is_ajax’<br></code></pre></td></tr></table></figure>\n\n<p>django更新至4.0取消了request.is_ajax()这个判断；4.0版本的django可以使用以下代替：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">request.headers.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-string\">&#x27;x-requested-with&#x27;</span>) == <span class=\"hljs-string\">&#x27;XMLHttpRequest&#x27;</span>:<br></code></pre></td></tr></table></figure>\n\n<p>也可以将django版本降低，就可以继续使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">request.is_ajax()<br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl3kwbmx000015cu3cojahhni","category_id":"cl3kwbmx900035cu3brd61zxi","_id":"cl3kwbmxj000c5cu36hcacjjd"},{"post_id":"cl3kwbmxh000a5cu3bmptcjp0","category_id":"cl3kwbmx900035cu3brd61zxi","_id":"cl3kwbmxm000i5cu305bl02qg"},{"post_id":"cl3kwbmx600025cu3ai7w2ppi","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl3kwbmxn000n5cu3ahrr8mn1"},{"post_id":"cl3kwbmxi000b5cu35d555v76","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl3kwbmxo000o5cu307rba3el"},{"post_id":"cl3kwbmxk000f5cu3gzlr4qt8","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl3kwbmxo000r5cu3bphn2tq3"},{"post_id":"cl3kwbmxc00055cu377hhg40j","category_id":"cl3kwbmxj000d5cu3h54g27hc","_id":"cl3kwbmxp000t5cu3f7mb6jcw"},{"post_id":"cl3kwbmxl000h5cu3hlt72da3","category_id":"cl3kwbmxj000d5cu3h54g27hc","_id":"cl3kwbmxp000v5cu3aob9206c"},{"post_id":"cl3kwbmxn000m5cu34l3k884q","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl3kwbmxq000x5cu39fmk1v0a"},{"post_id":"cl3kwbmxe00065cu3bt3qafnt","category_id":"cl3kwbmxm000k5cu31864ckcc","_id":"cl3kwbmxq000y5cu365hwez4u"},{"post_id":"cl3kwbmxf00075cu312jj6bbc","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl3kwbmxq00105cu385ukh06l"},{"post_id":"cl4cizl5z0000tou3hpnbeqby","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl4i98flt00008ku3br4052ia"},{"post_id":"cl4i98flu00018ku39vwo1mf8","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl4i98flv00028ku31nb0amh4"},{"post_id":"cl4qpv07d0000l8u3ctwbf1yq","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl4qpwftr0001l8u3ci4x7czr"},{"post_id":"cl4w4vgin0000qku397d62hjp","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl4w4w5w20001qku3311n3r7o"},{"post_id":"cl4wh45d90000u8u3gsnz878i","category_id":"cl4whgbuc0000n4u3ebuahkpv","_id":"cl4whgbuh0001n4u3d9izfmdl"},{"post_id":"cl4wk4lji0000b4u38gmfbscj","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl4wk4ljn0001b4u32mg1heyw"},{"post_id":"cl4wl6dpd00009gu3clmdazbn","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl4wl6dpi00019gu34615ayx9"},{"post_id":"cl50gn1yn0000gou38ovu7tv4","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl50gn20b0001gou3fd9xae67"},{"post_id":"cl50slzfj00005wu3eisa66cc","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl50slzfn00015wu37is0f17j"},{"post_id":"cl50slzfo00025wu3achc0qon","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl50t4drt0000u4u373uxgx3r"},{"post_id":"cl6g82z310000iou39j3f1pmh","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl6g82z380001iou3f6wh2gcp"},{"post_id":"cl75jvoka0000r4v22nazc4nw","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl75jvokh0001r4v27q9r21t4"},{"post_id":"cl7eiry0l0000owv2d8at9fnm","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl7eiry0p0001owv26vcp72yc"},{"post_id":"cl7iq95bs0000n0v227boe9v5","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl7iq95bw0001n0v22nrg8jzf"},{"post_id":"cl7ivj7sp0000d8v2d4nrffsm","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl7ivj7st0001d8v2ebse9mf6"},{"post_id":"cl7k85fqp00003gv2btxqfi75","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl7k85fqt00013gv2767q0rwn"},{"post_id":"cl7pz756q00014sv22sxw67b7","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"cl7pz756s00024sv2b5o1fdyp"},{"post_id":"clb6bv8xm0000ksv2fiqke01y","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clb6bv8xq0001ksv219w38vvo"},{"post_id":"clbgaxtf40000o0v2763x38hn","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clc46593f0000h0v2ck8n0gp9"},{"post_id":"clc46cqau0000tov22vurhxpt","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clc46cqay0001tov2giot9mnj"},{"post_id":"clc4f6xn10000zcv26p2caq1n","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clc4f6xn60001zcv28beqfokv"},{"post_id":"clgw1zumv00006gv27pm0h6kp","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clgw1zun000016gv206yc7cja"},{"post_id":"clrrg7q7p0000eov21r96epsd","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clrrg7q7z0001eov24l5w6xvz"},{"post_id":"clsx0gikf0000bov21c6765tu","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clsx0gikn0001bov27vs79dsn"},{"post_id":"clsx0giko0002bov25zt61ap9","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clsx0gikr0004bov23uhfan84"},{"post_id":"clsx0gikq0003bov2cut2eg24","category_id":"cl3kwbmxg00085cu30yaa35dp","_id":"clsx0gikr0005bov2fr4a5aw1"}],"PostTag":[{"post_id":"cl3kwbmx000015cu3cojahhni","tag_id":"cl3kwbmxb00045cu35ucved61","_id":"cl3kwbmxl000g5cu3g3xn1bxq"},{"post_id":"cl3kwbmx000015cu3cojahhni","tag_id":"cl3kwbmxg00095cu38cnz789w","_id":"cl3kwbmxm000j5cu3d9x99hnd"},{"post_id":"cl3kwbmx600025cu3ai7w2ppi","tag_id":"cl3kwbmxj000e5cu3dcf818xm","_id":"cl3kwbmxp000s5cu3a6p66lug"},{"post_id":"cl3kwbmx600025cu3ai7w2ppi","tag_id":"cl3kwbmxm000l5cu3f6nih7ur","_id":"cl3kwbmxp000u5cu392165li6"},{"post_id":"cl3kwbmxc00055cu377hhg40j","tag_id":"cl3kwbmxo000q5cu30nw3a5js","_id":"cl3kwbmxq00115cu3d1trds0a"},{"post_id":"cl3kwbmxc00055cu377hhg40j","tag_id":"cl3kwbmxp000w5cu31y6zbzxo","_id":"cl3kwbmxq00125cu37l1h2n3u"},{"post_id":"cl3kwbmxe00065cu3bt3qafnt","tag_id":"cl3kwbmxq000z5cu3be2ra99f","_id":"cl3kwbmxr00145cu3fdjf807q"},{"post_id":"cl3kwbmxf00075cu312jj6bbc","tag_id":"cl3kwbmxq00135cu3193257nm","_id":"cl3kwbmxr00165cu3bo6p85lj"},{"post_id":"cl3kwbmxh000a5cu3bmptcjp0","tag_id":"cl3kwbmxb00045cu35ucved61","_id":"cl3kwbmxr00185cu33gw7ayvz"},{"post_id":"cl3kwbmxh000a5cu3bmptcjp0","tag_id":"cl3kwbmxr00155cu3cd88hlqd","_id":"cl3kwbmxr00195cu3gj1e1d3r"},{"post_id":"cl3kwbmxi000b5cu35d555v76","tag_id":"cl3kwbmxq00135cu3193257nm","_id":"cl3kwbmxs001b5cu3bxst1z7b"},{"post_id":"cl3kwbmxl000h5cu3hlt72da3","tag_id":"cl3kwbmxr001a5cu3ekkfbm3n","_id":"cl3kwbmxs001c5cu38fwucb1d"},{"post_id":"cl75jvoka0000r4v22nazc4nw","tag_id":"cl75ww3zn0000sgv2d2k61ufw","_id":"cl75ww3zs0001sgv2h06zffo8"}],"Tag":[{"name":"Java","_id":"cl3kwbmxb00045cu35ucved61"},{"name":"集合","_id":"cl3kwbmxg00095cu38cnz789w"},{"name":"vue","_id":"cl3kwbmxj000e5cu3dcf818xm"},{"name":"springboot","_id":"cl3kwbmxm000l5cu3f6nih7ur"},{"name":"Java框架","_id":"cl3kwbmxo000q5cu30nw3a5js"},{"name":"mybatis","_id":"cl3kwbmxp000w5cu31y6zbzxo"},{"name":"Web","_id":"cl3kwbmxq000z5cu3be2ra99f"},{"name":"elementUI","_id":"cl3kwbmxq00135cu3193257nm"},{"name":"多线程","_id":"cl3kwbmxr00155cu3cd88hlqd"},{"name":"动态代理","_id":"cl3kwbmxr001a5cu3ekkfbm3n"},{"name":"MySql","_id":"cl75ww3zn0000sgv2d2k61ufw"}]}}